// Code generated by entc, DO NOT EDIT.

package _example

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/masseelch/elk/_example/predicate"
	"github.com/masseelch/elk/_example/skipgenerationmodel"
)

// SkipGenerationModelUpdate is the builder for updating SkipGenerationModel entities.
type SkipGenerationModelUpdate struct {
	config
	hooks    []Hook
	mutation *SkipGenerationModelMutation
}

// Where adds a new predicate for the builder.
func (sgmu *SkipGenerationModelUpdate) Where(ps ...predicate.SkipGenerationModel) *SkipGenerationModelUpdate {
	sgmu.mutation.predicates = append(sgmu.mutation.predicates, ps...)
	return sgmu
}

// SetName sets the name field.
func (sgmu *SkipGenerationModelUpdate) SetName(s string) *SkipGenerationModelUpdate {
	sgmu.mutation.SetName(s)
	return sgmu
}

// Mutation returns the SkipGenerationModelMutation object of the builder.
func (sgmu *SkipGenerationModelUpdate) Mutation() *SkipGenerationModelMutation {
	return sgmu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (sgmu *SkipGenerationModelUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(sgmu.hooks) == 0 {
		affected, err = sgmu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SkipGenerationModelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sgmu.mutation = mutation
			affected, err = sgmu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(sgmu.hooks) - 1; i >= 0; i-- {
			mut = sgmu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sgmu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (sgmu *SkipGenerationModelUpdate) SaveX(ctx context.Context) int {
	affected, err := sgmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sgmu *SkipGenerationModelUpdate) Exec(ctx context.Context) error {
	_, err := sgmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgmu *SkipGenerationModelUpdate) ExecX(ctx context.Context) {
	if err := sgmu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sgmu *SkipGenerationModelUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   skipgenerationmodel.Table,
			Columns: skipgenerationmodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: skipgenerationmodel.FieldID,
			},
		},
	}
	if ps := sgmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sgmu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skipgenerationmodel.FieldName,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sgmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skipgenerationmodel.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SkipGenerationModelUpdateOne is the builder for updating a single SkipGenerationModel entity.
type SkipGenerationModelUpdateOne struct {
	config
	hooks    []Hook
	mutation *SkipGenerationModelMutation
}

// SetName sets the name field.
func (sgmuo *SkipGenerationModelUpdateOne) SetName(s string) *SkipGenerationModelUpdateOne {
	sgmuo.mutation.SetName(s)
	return sgmuo
}

// Mutation returns the SkipGenerationModelMutation object of the builder.
func (sgmuo *SkipGenerationModelUpdateOne) Mutation() *SkipGenerationModelMutation {
	return sgmuo.mutation
}

// Save executes the query and returns the updated entity.
func (sgmuo *SkipGenerationModelUpdateOne) Save(ctx context.Context) (*SkipGenerationModel, error) {
	var (
		err  error
		node *SkipGenerationModel
	)
	if len(sgmuo.hooks) == 0 {
		node, err = sgmuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SkipGenerationModelMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sgmuo.mutation = mutation
			node, err = sgmuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sgmuo.hooks) - 1; i >= 0; i-- {
			mut = sgmuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sgmuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (sgmuo *SkipGenerationModelUpdateOne) SaveX(ctx context.Context) *SkipGenerationModel {
	node, err := sgmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sgmuo *SkipGenerationModelUpdateOne) Exec(ctx context.Context) error {
	_, err := sgmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sgmuo *SkipGenerationModelUpdateOne) ExecX(ctx context.Context) {
	if err := sgmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (sgmuo *SkipGenerationModelUpdateOne) sqlSave(ctx context.Context) (_node *SkipGenerationModel, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   skipgenerationmodel.Table,
			Columns: skipgenerationmodel.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: skipgenerationmodel.FieldID,
			},
		},
	}
	id, ok := sgmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing SkipGenerationModel.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := sgmuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: skipgenerationmodel.FieldName,
		})
	}
	_node = &SkipGenerationModel{config: sgmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, sgmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{skipgenerationmodel.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
