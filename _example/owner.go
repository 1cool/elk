// Code generated by entc, DO NOT EDIT.

package _example

import (
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/masseelch/elk/_example/owner"
)

// Owner is the model entity for the Owner schema.
type Owner struct {
	config `groups:"-" json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty" groups:"owner:read"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the OwnerQuery when eager-loading is set.
	Edges OwnerEdges `json:"edges" groups:"owner:read"`
}

// OwnerEdges holds the relations/edges for other nodes in the graph.
type OwnerEdges struct {
	// Pets holds the value of the pets edge.
	Pets []*Pet `json:"pets" groups:"owner:read"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PetsOrErr returns the Pets value or an error if the edge
// was not loaded in eager-loading.
func (e OwnerEdges) PetsOrErr() ([]*Pet, error) {
	if e.loadedTypes[0] {
		return e.Pets, nil
	}
	return nil, &NotLoadedError{edge: "pets"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Owner) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Owner fields.
func (o *Owner) assignValues(values ...interface{}) error {
	if m, n := len(values), len(owner.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	o.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		o.Name = value.String
	}
	return nil
}

// QueryPets queries the pets edge of the Owner.
func (o *Owner) QueryPets() *PetQuery {
	return (&OwnerClient{config: o.config}).QueryPets(o)
}

// Update returns a builder for updating this Owner.
// Note that, you need to call Owner.Unwrap() before calling this method, if this Owner
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Owner) Update() *OwnerUpdateOne {
	return (&OwnerClient{config: o.config}).UpdateOne(o)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (o *Owner) Unwrap() *Owner {
	tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("_example: Owner is not a transactional entity")
	}
	o.config.driver = tx.drv
	return o
}

// Get rid of the fmt.Stringer implementation since it breaks liip/sheriff.
// This lines have to be here since template/text does skip empty templates.

// Owners is a parsable slice of Owner.
type Owners []*Owner

func (o Owners) config(cfg config) {
	for _i := range o {
		o[_i].config = cfg
	}
}
