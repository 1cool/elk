{{ define "http/response" -}}
    {{/* gotype: entgo.io/ent/entc/gen.Graph */}}
    {{- with extend $ "Package" "http" -}}
        {{ template "header" . }}
    {{ end }}
    {{ template "helper/http/import" $ }}

    {{- range $n, $v := responseViews $ }}
        type (
            {{ $n }} struct {
                {{- range $f := $v.Fields }}
                    {{ $f.StructField }} {{ if $f.NillableValue }}*{{ end }}{{ $f.Type }}
                    {{- with tagLookup $f.StructTag "json" }} `json:"{{ . }}"{{ end }}`
                {{- end }}
                {{- range $e := $v.Edges }}
                    {{ $e.StructField }} {{ if $e.Unique }}*{{ end }}{{ $e.ViewName }}{{ if not $e.Unique }}s{{ end }}
                    {{- with tagLookup $e.StructTag "json" }} `json:"{{ . }}"{{ end }}`
                {{- end }}
            }
            {{ $n }}s []*{{ $n }}
        )

        {{- $pkg := base $.Config.Package }}
        func New{{ $n }}(e *{{ $pkg }}.{{ $v.Node.Name }}) *{{ $n }} {
            return &{{ $n }}{
                {{- range $f := $v.Fields }}
                    {{ $f.StructField }}: e.{{ $f.StructField }},
                {{- end }}
                {{- range $e := $v.Edges }}
                    {{ $e.StructField }}: New{{ $e.ViewName }}{{ if not $e.Unique }}s{{ end }}(e.Edges.{{ $e.StructField }}),
                {{- end }}
            }
        }

        func New{{ $n }}s(es []*{{ $pkg }}.{{ $v.Node.Name }}) {{ $n }}s {
            if len(es) == 0 {
                return nil
            }
            r := make({{ $n }}s, len(es))
            for i, e := range es {
                r[i] = New{{ $n }}(e)
            }
            return r
        }
    {{- end }}
{{ end }}
