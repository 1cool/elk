{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "http/handler" }}
    {{- with extend $ "Package" "http" -}}
        {{ template "header" . }}
    {{ end }}
    {{ template "helper/http/import" $ }}

    // NewHandler returns a ready to use handler with all generated endpoints mounted.
    func NewHandler(c *ent.Client, l *zap.Logger) chi.Router {
        r := chi.NewRouter()
        MountRoutes(c, l, r)
        return r
    }

    // MountRoutes mounts all generated routes on the given router.
    func MountRoutes(c *ent.Client, l *zap.Logger, r chi.Router) {
        {{- range $n := $.Nodes }}
            {{- if or (nodeOperations $n) (filterEdges $n) }}
                New{{ $n.Name }}Handler(c, l).MountRoutes(r)
            {{- end }}
        {{- end }}
    }

    {{ $pkg := base $.Config.Package }}
    {{- range $n := $.Nodes }}
        // {{ $n.Name }}Handler handles http crud operations on {{ $pkg }}.{{ $n.Name }}.
        type {{ $n.Name }}Handler struct {
            client    *ent.Client
            log       *zap.Logger
        }

        func New{{ $n.Name }}Handler(c *ent.Client, l *zap.Logger) *{{ $n.Name }}Handler {
            return &{{ $n.Name }}Handler{
                client: c,
                log:    l.With(zap.String("handler", "{{ $n.Name }}Handler")),
            }
        }

        {{- $ops := nodeOperations $n }}
        {{- $edgs := filterEdges $n }}
        {{- $h := print $n.Name "Handler" }}
        {{- if or $ops $edgs }}
            {{- if contains $ops "create" }}
                func (h *{{ $h }}) MountCreateRoute(r chi.Router) *{{ $h }} {
                    r.Post("/{{ $n.Name | kebab | pluralize }}", h.Create)
                    return h
                }
            {{- end }}
            {{- if contains $ops "read" }}
                func (h *{{ $h }}) MountReadRoute(r chi.Router) *{{ $h }} {
                    r.Get("/{{ $n.Name | kebab | pluralize }}/{id}", h.Read)
                    return h
                }
            {{- end }}
            {{- if contains $ops "update" }}
                func (h *{{ $h }}) MountUpdateRoute(r chi.Router) *{{ $h }} {
                    r.Patch("/{{ $n.Name | kebab | pluralize }}/{id}", h.Update)
                    return h
                }
            {{- end }}
            {{- if contains $ops "delete" }}
                func (h *{{ $h }}) MountDeleteRoute(r chi.Router) *{{ $h }} {
                    r.Delete("/{{ $n.Name | kebab | pluralize }}/{id}", h.Delete)
                    return h
                }
            {{- end }}
            {{- if contains $ops "list" }}
                func (h *{{ $h }}) MountListRoute(r chi.Router) *{{ $h }} {
                    r.Get("/{{ $n.Name | kebab | pluralize }}", h.List)
                    return h
                }
            {{- end }}
            {{- range $e := $edgs }}
                func (h *{{ $h }}) Mount{{ $e.Name | pascal }}Route(r chi.Router) *{{ $h }} {
                	r.Get("/{{ $n.Name | kebab | pluralize }}/{id}/{{ $e.Name | kebab }}", h.{{ $e.Name | pascal }})
                	return h
                }
            {{- end }}
            func (h *{{ $h }}) MountRoutes(r chi.Router) {
            	h
                {{- if contains $ops "create" }}.MountCreateRoute(r){{ end }}
                {{- if contains $ops "read" }}.MountReadRoute(r){{ end }}
                {{- if contains $ops "update" }}.MountUpdateRoute(r){{ end }}
                {{- if contains $ops "delete" }}.MountDeleteRoute(r){{ end }}
                {{- if contains $ops "list" }}.MountListRoute(r){{ end }}
                {{- range $e := $edgs }}.Mount{{ $e.Name | pascal }}Route(r){{ end }}
            }
        {{- end }}
    {{- end }}

    func stripEntError(err error) string {
        return strings.TrimPrefix(err.Error(), "ent: ")
    }

    func zapFields(errs map[string]string) []zap.Field {
        if errs == nil || len(errs) == 0 {
            return nil
        }
        r := make([]zap.Field, 0)
        for k, v := range errs {
            r = append(r, zap.String(k, v))
        }
        return r
    }
{{ end }}