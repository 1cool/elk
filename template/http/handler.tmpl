{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "http/handler" }}
    {{- with extend $ "Package" "http" -}}
        {{ template "header" . }}
    {{ end }}
    import ( {{/* This is needed for stupid SIV rule */}}
        "github.com/go-chi/chi/v5"
        "github.com/go-playground/validator/v10"
    )

    // handler has some convenience methods used on node-handlers.
    type handler struct {}

    {{ $pkg := base $.Config.Package }}
    {{ range $n := $.Nodes }}
        // {{ $n.Name }}Handler handles http crud operations on {{ $pkg }}.{{ $n.Name }}.
        type {{ $n.Name }}Handler struct {
            handler

            client    *ent.Client
            log       *zap.Logger
            validator *validator.Validate
        }

        func New{{ $n.Name }}Handler(c *ent.Client, l *zap.Logger, v *validator.Validate) *{{ $n.Name }}Handler {
            return &{{ $n.Name }}Handler{
                client:    c,
                log:       l.With(zap.String("handler", "{{ $n.Name }}Handler")),
                validator: v,
            }
        }

        // RegisterHandlers registers the generated handlers on the given chi router.
        func (h *{{ $n.Name }}Handler) RegisterHandlers(r chi.Router) {
            // Do no use r.Route() to avoid wildcard matching.
            r.Get("/", h.List)
            r.Post("/", h.Create)
            r.Get("/{id}", h.Read)
            r.Patch("/{id}", h.Update)
            r.Delete("/{id}", h.Delete)
            {{ range $e := $n.Edges -}}
                r.Get("/{id}/{{ $e.Name }}", h.{{ $e.Name | pascal }})
            {{ end -}}
        }
    {{ end }}

    func (h handler) stripEntError(err error) string {
        return strings.TrimPrefix(err.Error(), "ent: ")
    }
{{ end }}