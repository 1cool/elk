{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "http/read" }}
    {{- with extend $ "Package" "http" -}}
        {{ template "header" . }}
    {{ end }}
    {{ template "helper/http/import" $ }}

    {{ $pkg := base $.Config.Package }}
    {{ range $n := $.Nodes }}
        // Read fetches the {{ $pkg }}.{{ $n.Name }} identified by a given url-parameter from the
        // database and renders it to the client.
        func (h *{{ $n.Name }}Handler) Read(w http.ResponseWriter, r *http.Request) {
            l := h.log.With(zap.String("method", "Read"))
            {{- template "helper/http/id-from-url" $n -}}

            // Create the query to fetch the {{ $n.Name }}
            q := h.client.{{ $n.Name }}.Query().Where({{ $n.Name | lower }}.ID({{ if $n.ID.HasGoType }}{{ $n.ID.Type }}(id){{ else }}id{{ end }}))

            {{- with edges $n "read" }}
                // Eager load edges that are required on read operation.
                q{{ .EntQuery }}
            {{- end }}
            e, err := q.Only(r.Context())

            {{-
                template "helper/http/error-handling" dict
                "Errors" (list "not-found" "not-singular")
                "Logs" (list (printf "zap.%s(\"%s\", id)" (zapField $n.ID) $n.ID.Name))
                "Default" (print "could not read " ($n.Name | kebab))
            -}}

            l.Info("{{ $n.Name | kebab }} rendered", zap.{{ zapField $n.ID}}("{{ $n.ID.Name }}", id))
            easyjson.MarshalToHTTPResponseWriter(New{{ (view $n ($n.Annotations.ElkSchema.ReadGroups | stringSlice)).Name }}(e), w)
        }
    {{ end }}
{{ end }}