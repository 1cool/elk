{{/* gotype: entgo.io/ent/entc/gen.Graph */}}

{{ define "http/list" }}
    {{- with extend $ "Package" "http" -}}
        {{ template "header" . }}
    {{ end }}

    {{ range $n := $.Nodes }}
        // Read fetches the {{ $n.Name }} model identified by a given url-parameter from the
        // database and returns it to the client.
        func (h *{{ $n.Name }}Handler) List(w http.ResponseWriter, r *http.Request) {
            l := h.log.With(zap.String("method", "List"))
            q := h.client.{{ $n.Name }}.Query()
            {{- with edgesToLoad $n "list" }}
                // Eager load edges that are required on list operation.
                {{ .Code "q" }}
            {{- end }}
            var err error
            page := 1
            if d := r.URL.Query().Get("page"); d != "" {
                page, err = strconv.Atoi(d)
                if err != nil {
                    l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
                    render.BadRequest(w, r, "page must be an integer greater zero")
                    return
                }
            }
            itemsPerPage := 30
            if d := r.URL.Query().Get("itemsPerPage"); d != "" {
                itemsPerPage, err = strconv.Atoi(d)
                if err != nil {
                    l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
                    render.BadRequest(w, r, "itemsPerPage must be an integer greater zero")
                    return
                }
            }
            es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
            if err != nil {
                l.Error("error fetching {{ $n.Name | kebab | plural}} from db", zap.Error(err))
                render.InternalServerError(w, r, nil)
                return
            }
            d, err := sheriff.Marshal(&sheriff.Options{
                IncludeEmptyTag: true,
                Groups: []string{ {{- with $.Annotations.ElkSchema.ReadGroups }}.Code{{ else }}"{{ $n.Name | kebab }}"{{ end -}} },
            }, es)
            if err != nil {
                l.Error("serialization error", zap.Error(err))
                render.InternalServerError(w, r, nil)
                return
            }
            l.Info("{{ $n.Name | kebab | plural }} rendered", zap.Int("amount", len(es)))
            render.OK(w, r, d)
        }
    {{ end }}
{{ end }}