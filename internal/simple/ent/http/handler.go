// Code generated by entc, DO NOT EDIT.

package http

import (
	"strings"

	"github.com/go-chi/chi/v5"
	"github.com/masseelch/elk/internal/simple/ent"
	"go.uber.org/zap"
)

// NewHandler returns a ready to use handler with all generated endpoints mounted.
func NewHandler(c *ent.Client, l *zap.Logger) chi.Router {
	r := chi.NewRouter()
	cHandler := NewCategoryHandler(c, l)
	r.Route("/categories", func(r chi.Router) {
		r.Post("/", cHandler.Create)
		r.Get("/{id}", cHandler.Read)
		r.Patch("/{id}", cHandler.Update)
		r.Delete("/{id}", cHandler.Delete)
		r.Get("/", cHandler.List)
		r.Get("/{id}/pets", cHandler.Pets)
	})
	oHandler := NewOwnerHandler(c, l)
	r.Route("/owners", func(r chi.Router) {
		r.Post("/", oHandler.Create)
		r.Get("/{id}", oHandler.Read)
		r.Patch("/{id}", oHandler.Update)
		r.Delete("/{id}", oHandler.Delete)
		r.Get("/", oHandler.List)
		r.Get("/{id}/pets", oHandler.Pets)
	})
	peHandler := NewPetHandler(c, l)
	r.Route("/pets", func(r chi.Router) {
		r.Post("/", peHandler.Create)
		r.Get("/{id}", peHandler.Read)
		r.Patch("/{id}", peHandler.Update)
		r.Delete("/{id}", peHandler.Delete)
		r.Get("/", peHandler.List)
		r.Get("/{id}/category", peHandler.Category)
		r.Get("/{id}/owner", peHandler.Owner)
		r.Get("/{id}/friends", peHandler.Friends)
	})
	return r
}

// CategoryHandler handles http crud operations on ent.Category.
type CategoryHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewCategoryHandler(c *ent.Client, l *zap.Logger) *CategoryHandler {
	return &CategoryHandler{
		client: c,
		log:    l.With(zap.String("handler", "CategoryHandler")),
	}
}

// OwnerHandler handles http crud operations on ent.Owner.
type OwnerHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewOwnerHandler(c *ent.Client, l *zap.Logger) *OwnerHandler {
	return &OwnerHandler{
		client: c,
		log:    l.With(zap.String("handler", "OwnerHandler")),
	}
}

// PetHandler handles http crud operations on ent.Pet.
type PetHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewPetHandler(c *ent.Client, l *zap.Logger) *PetHandler {
	return &PetHandler{
		client: c,
		log:    l.With(zap.String("handler", "PetHandler")),
	}
}

func stripEntError(err error) string {
	return strings.TrimPrefix(err.Error(), "ent: ")
}

func zapFields(errs map[string]string) []zap.Field {
	if errs == nil || len(errs) == 0 {
		return nil
	}
	r := make([]zap.Field, 0)
	for k, v := range errs {
		r = append(r, zap.String(k, v))
	}
	return r
}
