// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// ../template/flutter_models.tpl
// ../template/handler/create.tpl
// ../template/handler/handler.tpl
// ../template/handler/list.tpl
// ../template/handler/read.tpl
// ../template/header.tpl
// ../template/sheriff.tpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _flutter_modelsTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func flutter_modelsTplBytes() ([]byte, error) {
	return bindataRead(
		_flutter_modelsTpl,
		"flutter_models.tpl",
	)
}

func flutter_modelsTpl() (*asset, error) {
	bytes, err := flutter_modelsTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "flutter_models.tpl", size: 0, mode: os.FileMode(420), modTime: time.Unix(1604922569, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _handlerCreateTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x56\xdf\x6f\xdb\xc6\x0f\x7f\xcf\x5f\xc1\xaf\x60\x14\x52\x60\x9f\xdf\x53\xf4\x21\x6d\xfa\xcd\x8c\x6d\x2d\xd0\x64\xeb\x43\x51\xa0\x67\x1f\x25\x5f\xa2\xdc\xa9\xbc\x53\x7e\x4c\xd3\xff\x3e\xdc\x0f\xcb\x92\x2d\xa7\xee\x86\x6d\x98\x5e\x6c\x51\x24\x8f\xe4\xe7\x43\xf2\x9a\x06\x04\xe6\x52\x21\x24\x2b\x42\x6e\x31\x81\xb6\x3d\x01\x00\x98\xcf\xc1\x58\xaa\x57\x16\xac\x86\xa5\x54\x02\xec\x1a\xa1\xd2\xc6\xc2\x52\x8b\x27\xb0\x9a\x79\x3d\xfb\x54\x21\x34\x0d\x4c\xd8\x3b\x7e\x87\xf0\x3b\xac\xf8\x1d\x96\xd0\xb6\x6f\xbc\xbf\x0f\xf8\xb5\x46\x63\x37\xbe\x1a\x6f\xe3\x9e\xa6\x99\x9f\xc2\xb9\x10\xc0\xcb\x12\x72\x89\xa5\x30\x60\xd7\xdc\x02\x27\x04\xa5\x2d\xe0\xe3\xaa\xac\x05\x0a\x06\xa7\xf3\x18\x53\xb0\x03\xe2\xaa\x40\x98\xe4\x70\xf6\x0a\x26\xec\xff\xc1\x76\xd6\xd3\x09\x7a\x33\x98\x70\xaf\x92\xb3\x73\xa5\xb4\xe5\x56\x6a\x65\x82\xfe\x25\x2a\x18\x31\x90\x39\x68\x82\xd4\x1d\x3f\xe1\x19\x4c\x38\x0b\x59\xec\xea\xc6\x40\x26\x39\xbb\xf2\x79\x79\x9f\xd0\xb6\x51\x78\xfd\x54\xa1\xfb\x22\x55\xe1\x84\x5f\x6e\x8c\x56\x67\x49\xd3\x80\xe5\xc5\x4f\x5a\xdf\xd6\xd5\xd6\xf4\x9a\x17\x90\x38\x05\x57\xf9\xc4\x39\x90\xf9\xf6\xe0\x5f\x79\x29\x85\x0f\xdc\xe9\xb5\xed\x7d\x78\x47\xef\xed\xa0\x96\xfb\x88\xca\x05\xf4\x65\x2f\xc5\x20\x3f\xd9\x15\xcd\x06\xb2\x1e\x34\x28\x0a\x3c\x16\x99\xd9\x06\x1a\x0c\xd0\xbc\xf5\xb6\xcf\x20\x83\xdf\x83\x0c\x57\x22\x42\x83\xa1\xc2\x7d\xdb\x1f\xb8\x12\x25\xd2\x25\x2a\x76\x75\x2b\xab\x4b\x54\x48\xfe\x53\x06\xe9\x28\xa4\xd9\x21\x4c\x71\x04\x53\x99\x43\x3c\xf8\x17\x25\xbf\xd6\x8e\x0f\x9f\x3e\x77\x45\x0e\x56\x3e\xa4\xc5\xc5\x51\xe0\xe3\xbf\x08\xfe\x6c\x04\xfd\x28\x6a\x4f\x36\xad\x7f\xbd\x96\x06\xf2\x5a\xad\x9c\x5f\x08\xa3\xc1\x00\x07\x85\x0f\xbd\x66\x6f\x5b\xb8\xd3\x02\x4b\x0f\x8d\xb1\x9a\xd0\x80\xb4\x20\x95\x9f\x15\x82\x5b\xbe\xe4\x06\xc3\x9c\x70\xce\xd2\xf5\xc0\x38\x62\x96\x41\x48\x24\x7d\x80\xb5\xb5\x15\xfb\x80\xa6\xd2\xca\xe0\x47\x92\x16\x69\x0a\x04\xa7\x51\xee\x47\x49\xd6\x1b\x22\xf3\x39\x5c\xa2\xdd\x4e\x26\x77\x24\xeb\xbe\x0a\xc7\xb1\xfe\x68\x32\x8a\xdf\xe2\xee\x68\x6a\x5a\xe7\xc6\x6a\xa1\x61\xe6\x18\xaf\x1f\x20\xd7\x74\x37\xab\xa9\x9c\xa1\x5a\x09\x2d\x50\xcc\x1f\xef\xca\x79\x45\xda\xea\x65\x9d\xef\x9c\x22\x73\x40\x22\x77\x94\x03\x92\xbd\xc3\x87\x0b\x5c\x69\x81\x94\x12\x7b\xad\xc5\x53\xc6\xc2\x7b\xfa\x42\x64\x2f\xbd\xea\xff\x5e\x81\x92\x65\x2f\x0d\xf7\xac\x59\xa9\x8b\x02\x89\x7d\x94\x76\xfd\x96\x48\x53\x8a\x44\x19\x0b\x7f\x13\x74\x3f\x20\x9c\x27\x47\x2c\xcf\x99\x6c\xe0\x80\x50\x09\x24\xf6\x9a\x8b\x98\x58\xfa\x30\x05\x9a\x42\x22\x95\x27\x8e\xb7\x71\x73\x58\xaa\x62\xcf\xd4\xd6\xa4\x3a\x51\xa4\x41\x2c\x70\xe4\x17\x76\x98\x8e\xa5\xbe\x66\x91\x9c\x9a\x22\xb5\xd3\x67\xb3\x0d\x96\x53\xd0\xb7\xce\x1a\x89\x58\x7a\xba\xf5\xb0\x08\x11\x6f\x99\xed\x8b\x90\xbd\x74\xea\xcd\x5e\xd3\x1e\x55\xb9\xe8\xdc\xd5\x8e\xe2\x4a\x72\xb9\xec\x14\xa2\x57\xc7\x85\xb2\x48\x8a\x97\x57\x48\xf7\x48\xc1\x57\x28\xa8\x92\xe5\x98\xd5\xa0\x84\x3b\x65\x7c\x2e\xcc\x85\xca\x75\x9a\xdc\x77\xb9\x42\xce\x65\x89\xe2\x48\x74\x9d\x8b\xe3\xb1\xbc\xe2\xf7\x63\x38\x2e\x03\x84\xab\x52\xa2\xb2\xac\xdf\xa2\x71\xc6\xa4\xd9\xd8\x94\xff\x67\x17\x30\xdb\xab\xf9\x15\xda\xb1\x25\x9c\x0a\x36\x26\xce\x8e\x98\x86\x63\xdb\xf1\xbf\xb5\xd2\xf6\xab\x14\x8f\xea\xef\xae\x3d\x9d\x5e\x35\x63\x20\x11\xff\xc5\x45\xac\xe6\xee\x56\xdc\xef\x00\x5f\xd1\xd2\x1c\xf4\x7f\x2e\xc4\x98\x7f\x73\xe0\x00\xc6\xd8\x81\x33\x86\x10\x7d\x1b\xcc\x41\x03\xb8\x25\xe5\x16\xd4\x70\x39\xb9\x07\xa7\x9b\x61\xb6\x64\xae\x4f\x52\x62\x6f\xb4\xb2\xf8\x68\xd3\x2c\xdb\x1d\x79\x7f\x7e\x84\x1b\x7e\xef\x86\x50\xbf\xc9\xc6\x5b\xfd\x3b\x06\xd0\xf3\x3d\x8f\x24\x79\x29\x7f\x1b\x6b\x7c\xcf\xdb\x82\x74\x5d\x99\x40\xef\x03\xfc\x0b\xfc\xba\x0c\x8a\xbd\x22\xdf\x74\x35\x33\x6b\x24\x99\xe7\xec\x67\x4e\x66\xcd\xcb\xf4\xc5\x46\xf0\xbe\xf2\xde\x9a\x60\x7c\x06\x9f\x3e\x87\x15\xd4\x8c\xf5\xc3\x26\x96\xd1\xab\x59\xd7\x8a\x85\x8f\x35\xa8\xfa\xfb\xce\xa4\x68\xdb\x64\x1a\x11\xdf\xef\xcd\x40\xcb\x5d\xb9\x7b\x92\xb1\xdb\xc1\x19\x21\x17\xc9\x37\x09\xd6\xb6\x53\xc0\xbf\x46\x0c\xf7\xea\xf9\x9e\x26\x83\xa1\xeb\x5f\x16\x17\x1d\x3f\xa6\xe0\x6e\x96\x1d\x91\x4c\x44\x34\xac\x0b\x4f\xab\xbf\x91\x42\x83\xe0\xf7\xa2\xdd\x96\xad\x8b\x32\x2c\xb4\x31\x95\x18\xd7\x60\xb9\xc5\x50\xdf\xff\x18\x23\xbb\xc9\xe2\x55\xb4\x6b\xe0\x3f\x02\x00\x00\xff\xff\x70\xb4\x95\x8a\xa4\x0e\x00\x00")

func handlerCreateTplBytes() ([]byte, error) {
	return bindataRead(
		_handlerCreateTpl,
		"handler/create.tpl",
	)
}

func handlerCreateTpl() (*asset, error) {
	bytes, err := handlerCreateTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handler/create.tpl", size: 3748, mode: os.FileMode(420), modTime: time.Unix(1604933744, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _handlerHandlerTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x55\x4d\x6b\xeb\x38\x14\xdd\xfb\x57\x5c\x4c\x18\xec\x4c\x2a\xcf\x6c\x03\xb3\x28\xa5\xb4\x03\x9d\x52\xda\x32\x6f\xd3\x8d\x6a\xdf\x58\xa2\x8a\xe4\x27\x5d\x27\x2d\xc6\xff\xfd\x21\xd9\x71\xe2\xc4\xaf\x5f\x59\xc9\x3a\xe7\xdc\x9c\x7b\xae\x84\x9a\x06\x66\xd5\x4b\x09\xcb\x7f\xe0\x99\x3b\x84\x58\x70\x5d\x28\xb4\x31\xb4\x6d\xd4\x34\x67\xb0\x95\x24\x00\x5f\x09\x75\x01\x33\x88\xef\x78\xfe\xc2\x4b\x8c\x0f\x88\x67\x6d\x1b\x01\x00\x34\x0d\x10\xae\x2b\xc5\xc9\x97\x41\x5e\x78\x90\x75\x75\xc0\xcb\xdb\x36\x8a\xe4\xba\x32\x96\x20\x09\x8a\x58\x23\x65\x82\xa8\x8a\xbb\x4f\x47\x36\x37\x7a\x13\x47\xdd\x67\x29\x49\xd4\xcf\x2c\x37\xeb\xac\x34\x67\xb9\x90\x59\x2e\x64\x3c\x85\x55\x8a\xbf\x95\xd6\xd4\xba\xc8\x36\x5c\xc9\x82\x93\xb1\xd9\xe6\xef\xbf\x4e\xc9\x4a\xca\x2a\x73\x02\xad\x5c\xad\x4e\xd1\x35\x77\x0e\x51\xe5\x22\xb3\xa8\xbd\xff\x13\x86\x93\xb6\xae\x1c\xea\x4c\x99\xd2\xd6\x6e\x67\xd5\xc7\xc8\x2e\x8c\x5e\xc9\x92\xf5\x11\x41\xdb\xc6\x51\x1a\xf9\xe6\xe5\x0a\xb4\x21\x98\xb1\x73\xad\x0d\x71\x92\x46\x3b\x76\xdd\xe5\x77\x85\x9a\x3d\xbc\xc8\xea\x0a\x35\xda\x00\x85\x9c\x7c\xd5\x2c\x83\x47\x81\x10\x6a\xdf\xf2\xb5\xaf\xd8\x8b\x58\xc0\xe9\xad\x9a\x44\xc1\x91\xad\x73\x82\x26\xb0\xfc\xcf\xc2\x3c\x17\x92\xfd\x57\xbf\x46\xc3\x5e\xae\x24\x6a\xf2\xab\x39\x6a\x62\x17\xe1\x73\x40\x87\x18\x61\x3e\x2c\xd9\xff\xdd\x0a\x07\x96\x32\x65\x89\x36\xd4\xe8\xf2\x60\x37\x61\x27\x10\xf6\x5d\x5c\x58\xf4\x87\x82\x83\xc6\xed\x94\xe1\xc0\x5b\xd5\x3a\x87\x5b\xdc\x4e\xe0\x49\x7e\xe8\x71\x01\x9b\x29\x53\x0b\xef\xe6\xc8\x47\x0a\xf3\xa9\x7c\x0e\x82\x41\xaa\xad\x86\x3f\x26\x58\x7b\x52\x20\x2e\x87\xa5\x4f\xf2\x16\xb7\xf7\xa6\x26\xb4\x49\xba\x18\xf1\xba\x54\x03\x39\x1f\x23\x83\xe3\x25\x6c\xc6\x48\x97\xe2\xb2\x5f\xee\xb1\xf6\x28\xc6\x7f\xd7\x95\xc2\xb5\x1f\x1a\x09\x84\xdd\xdd\x81\x5d\x57\x52\x13\xda\x15\xcf\x91\xed\xf3\x4c\xc4\x54\xde\x29\x3c\xa0\xdd\xe0\xf5\xe3\xe3\x5d\xb2\x05\x5f\x84\xdd\xa3\xab\x8c\x76\xf8\xc3\x4a\x42\xbb\xf0\x27\xa6\xdf\xff\x59\xa3\xa3\xf4\x20\x33\xc1\x2c\x3b\xd0\x2f\xc0\xa6\x47\x46\x2f\x35\x7f\x56\x08\x5c\x29\x7f\xef\x2b\x23\x35\xb9\xb1\xa9\xa9\xb1\xa4\xbd\xee\x5c\xa9\xcb\x9d\x2a\xf9\x70\x82\x82\x75\xaa\xee\x8c\xed\x84\x49\x7a\x42\xb8\x47\x5e\xbc\x03\xdf\x48\x47\x13\x70\x7f\x40\xc4\x74\x87\x7e\x0e\x79\x77\xb8\x4d\xd5\x5f\xdf\xcf\x37\x7a\x6c\xf9\xe3\x56\x2d\xbb\x33\x8e\x92\x38\x8b\x17\x20\x58\xa7\xff\x8a\x57\x8b\xbc\xf8\x8e\xd3\x71\x76\x9f\xf1\x79\x85\xde\x66\x23\x8b\xe5\xd3\x53\xf1\x67\x1b\xfc\xfa\x2a\x5f\x71\xab\xa4\xa3\xef\xb8\x1d\x8f\xf2\xf3\x6e\x83\x49\x2f\x7e\xdf\xe4\xe8\x9d\xeb\xa6\x1f\xc3\x0c\xa6\x5e\x41\x9f\x77\x8f\x35\x4d\x36\x3f\xc1\xeb\xaa\x18\xd4\xf3\xec\x77\xac\x02\x15\x8e\x58\x27\x0c\x9f\x54\xff\x3f\xfb\xc7\xf6\x57\x00\x00\x00\xff\xff\xfb\x7f\x08\x8b\xdb\x07\x00\x00")

func handlerHandlerTplBytes() ([]byte, error) {
	return bindataRead(
		_handlerHandlerTpl,
		"handler/handler.tpl",
	)
}

func handlerHandlerTpl() (*asset, error) {
	bytes, err := handlerHandlerTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handler/handler.tpl", size: 2011, mode: os.FileMode(420), modTime: time.Unix(1604933974, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _handlerListTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\xdf\x6f\xdb\x36\x10\x7e\xcf\x5f\x71\x15\x8c\x59\x2a\x1c\xba\xc5\xde\x32\x18\x43\xda\x65\x59\xb0\x6c\xc9\x92\x14\x79\x18\xf6\x40\x9b\x47\x99\x0d\x4d\xca\x24\x95\xfe\xd0\xf4\xbf\x0f\xa4\x7e\x58\x96\x65\x37\x01\x5a\x0c\x25\x10\xc0\x38\x1d\xbf\x3b\x7e\xf7\xdd\x91\x29\x0a\x60\xc8\x85\x42\x88\xa4\xb0\x2e\x82\xb2\x3c\x02\x00\x98\x4e\xe1\x6e\x29\x2c\xf0\x5c\x2d\x9c\xd0\x0a\xd6\x39\x1a\x81\x16\xb8\x36\x50\x14\x30\x22\x7f\xd2\x15\x42\x59\xc2\x4a\x33\x94\x96\xc0\x5b\xaa\x60\x8e\xc0\x85\x74\x68\x90\xc1\xfc\x53\xd8\xf3\x09\x32\x6a\xe8\x0a\x1d\x1a\x4b\x02\xb4\x87\x8c\x97\x5b\x20\xbf\x51\xc5\x24\x9a\x04\x2e\x85\x75\xf1\x07\x58\x3a\x97\x91\x1b\xb4\x99\x56\x16\xef\x8d\x70\x68\x26\x60\xe0\x65\x6d\x5f\xe7\x68\x5d\x02\x45\x80\xf3\x6b\x0d\x27\x33\x58\x92\x85\x14\xa8\x1c\xe9\x22\x93\xbf\x7c\x0e\x71\xd2\xba\x16\xc5\x31\x18\xaa\x52\x84\x11\xfa\x5d\x23\x72\xc6\x52\xb4\xcd\xb9\x07\xdc\x64\xe5\x76\xaa\x94\x76\xd4\x73\x61\x49\x9d\xef\x39\x2a\xe2\x33\x3e\xa3\x29\x9a\x1e\x40\x03\x22\x38\xe0\xda\x83\x8c\xb0\xcd\xe9\x5e\xb8\x65\x51\x40\x46\xed\x82\x76\x3f\xc4\x49\x51\x00\x2a\x06\xc7\x3b\xd9\xec\x98\x6b\x53\x59\x1e\xb5\xa6\xe9\x14\xae\x69\x2a\x54\x48\xb2\xb5\x3e\x52\x03\x68\xc2\x9f\x36\xad\x35\xa3\x29\xc2\x0c\x5e\xb7\x06\xe1\x70\x65\xaf\xd1\x5c\x57\x1f\x7e\x7c\xb5\xc1\x15\x1c\x98\xe7\xc0\x90\x77\x37\x97\x0d\xa1\xe4\x1c\x5d\x1c\x75\x77\x45\xc9\x4f\xc0\xe0\xc5\x0c\xa2\xa8\x53\x9a\x3e\xf6\x24\x24\x33\x03\xeb\xcc\x42\xab\x47\x72\xea\xb4\x88\x59\xb2\xed\xcf\x83\xd3\x8b\x19\x28\x21\x7b\x58\x7e\xc9\xc0\xe0\xaf\x02\x25\xeb\xa5\x30\x01\x96\x90\x0b\xc5\x75\x1c\x85\xf3\x7a\xf1\x59\xa1\xd2\xbe\x14\x61\xdc\xdd\x36\x8e\x92\x9d\x18\x06\x15\x43\x43\xde\x50\x56\xeb\x2d\xfe\x30\x01\x33\x81\xad\x78\xb0\xca\xad\xf3\xaa\xa7\x90\x69\x2b\x9c\x78\x44\x10\xca\x61\x8a\x06\x52\x83\xd4\x47\xfa\x8c\x46\x0f\xe2\xbb\xdc\xa8\x2d\xf3\xa6\xb8\xe5\x93\xc8\xcf\x0e\x92\x9e\x7d\x0b\xb2\xb3\xe7\x91\x9c\x3d\x97\xdc\xec\x9b\x92\xda\xfc\xea\xcc\x8d\x19\xac\xc9\xa5\x58\x09\x17\x77\xeb\x9a\x90\x2b\xce\x2d\xba\x38\x0e\x09\x1d\xc3\xeb\x04\x5e\x6e\xc9\x38\xd9\x6a\xbb\x77\x16\xc1\x2d\x71\x67\xe0\x81\xd3\xf5\x40\xdc\x7c\x26\xe0\x34\xd3\x70\x0c\x0a\xad\x43\x56\x7f\xff\x79\x68\x40\xf1\x6a\xf2\x04\xee\x07\x27\xd4\xe8\xbd\xd5\x2a\x0c\x8f\x93\x19\x08\xc5\xf0\x23\xc4\x36\x93\xc2\x41\xec\x68\x7a\xa9\xf5\x43\x9e\xc1\x88\x93\x5b\x67\xf2\x85\xbb\xa3\x29\x44\x7e\x47\x94\x40\x34\x89\x12\x78\xd5\xc7\x14\x1c\xf8\x1e\xb1\xf9\xa1\xda\x46\x2b\x4b\xaf\x3b\x3e\xa8\x3b\xd8\x0c\xbe\x11\x27\x17\xf6\x8d\xd6\xb2\x1f\xa7\x59\x7e\x36\xcd\x61\xae\xb5\x1c\xfc\x1c\xd2\x99\xcd\x20\x72\x26\xc7\xa1\x38\xcd\x9a\xc3\x0c\xbc\xcf\xa0\x43\x09\x28\x2d\x6e\xc0\x38\x95\xf6\x8b\x68\xc1\xe9\x10\xdc\xfe\xed\x4b\x22\x75\x9a\xa2\x09\x7d\x73\xe6\x1b\x24\x46\x63\x92\x6e\x1b\xf5\xc9\x9c\x00\x4f\xc8\x2f\x38\xcf\xd3\x38\x5a\xe8\x5c\x32\x50\xda\x85\xb6\xda\xd1\xd4\x80\xea\x9b\xb5\xb7\xab\xc6\xbd\x78\xe3\xb6\xc5\xc6\x9e\xb5\x31\x68\x03\xe3\x70\xe2\xa1\x66\xdd\xc0\xef\x34\x57\xcb\xc9\xa0\xb5\xea\xae\xfb\x25\x1a\x8c\xc3\x9d\x7c\x4d\x17\x0f\xbe\x9f\xca\x92\x14\x45\x2b\xcb\xc0\x49\x59\xc6\xf3\x64\x37\xb6\xbf\xe5\xea\xe2\x05\x31\x5d\x28\xb7\x4f\x4b\xa2\x1a\x76\x27\xbd\x69\xc7\x87\x0f\xf4\xa5\xa9\xd7\xac\xef\xa9\x98\x54\x35\x73\xf2\x7f\xac\xa2\x78\x42\x15\x6f\x9d\xf1\xd7\xc5\x9e\x42\x3e\x33\x20\x7f\x42\xc0\x3b\x11\xa8\x1a\x0c\x37\x9d\x86\x81\x3c\x88\x31\xf0\x14\x3b\xf8\x02\x43\xdb\x8a\x70\x4d\x4e\xa5\x8c\x0d\x79\xab\x95\xc3\x8f\x2e\xee\x64\x79\x48\x7b\xfb\xf4\x56\xfd\xac\xef\xdb\xa0\x22\xcf\x20\xa3\x8e\xce\xa9\xc5\x28\x69\x8e\x01\xc7\x30\x47\xe7\x2f\x9c\xed\xf7\x1e\x6c\x24\x75\xa1\x1c\x1a\x45\xe5\x2d\x9a\x47\x34\x15\x70\xa5\x2d\x25\x64\xd2\xdb\xb1\x25\x96\xce\x49\x7d\x61\x52\xa3\xf3\xcc\x1e\x7c\x1d\xdf\x20\x65\xe7\x95\x5b\x87\x47\xb6\x69\xd5\x25\x1a\xc1\x39\xf9\x83\x1a\xbb\xa4\x32\xfe\xa1\x31\x5c\x65\x01\xab\xa8\x36\x9f\xc0\xdf\xff\xd8\x20\x9a\x62\xe7\x0e\xf4\x35\x4e\x77\x42\x74\x3d\xea\xdb\x34\x0d\x99\x56\xae\x65\x19\x15\xc5\x28\xf5\xdd\x7a\xe0\xc9\xed\x25\xd4\xb7\xfb\x15\x6d\xfe\xc3\xf8\x17\xac\xa2\x0f\x5e\x5c\x27\x06\x29\x8b\x76\xd2\xeb\x63\x97\xe5\x04\xd0\x7e\x15\x31\x58\x34\x82\x4a\xf1\x39\xd0\x5e\xd5\x3b\xea\xd7\xef\xeb\x55\x7c\x2b\x99\x7a\xf4\xd1\x95\xce\x95\x8b\x26\x20\x51\xc5\x68\x93\xe6\x59\xf8\x5e\xcf\x6d\x1d\x1c\x59\x27\xa7\x3a\x9f\xab\xdf\xeb\xf0\xf5\x53\xb4\x3c\x2a\x0a\x54\xac\x2c\xff\x0b\x00\x00\xff\xff\xec\x53\x27\x7a\x8e\x0e\x00\x00")

func handlerListTplBytes() ([]byte, error) {
	return bindataRead(
		_handlerListTpl,
		"handler/list.tpl",
	)
}

func handlerListTpl() (*asset, error) {
	bytes, err := handlerListTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handler/list.tpl", size: 3726, mode: os.FileMode(420), modTime: time.Unix(1604933885, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _handlerReadTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\xdf\x6f\xdb\x36\x10\x7e\xcf\x5f\x71\x13\x8c\x45\x0a\x1c\xfa\x3d\x40\x30\x74\x4b\x7f\x18\xeb\xda\xad\xc9\x90\x87\x61\x0f\xb4\x78\x92\xd8\xd2\xa4\x4a\x9e\x92\xb9\x9a\xfe\xf7\xe1\x28\xd9\x91\x6d\x65\x4d\x80\xad\x7a\xb2\xc9\xbb\x8f\xf7\xeb\xfb\xc8\xb6\x05\x85\x85\xb6\x08\x89\x47\xa9\x12\xe8\xba\x13\x00\x80\xc5\x02\x6e\x2a\x1d\xa0\x68\x6c\x4e\xda\x59\x28\x90\xf2\x0a\x03\x50\x85\xd0\xb6\x30\x13\xef\xe4\x1a\xa1\xeb\x60\xed\x14\x1a\xd0\x0a\x2d\xe9\x42\xa3\x82\xd5\x06\x24\x94\xfa\x0e\xa1\xf1\xe6\xbc\x96\x5e\xae\x91\xd0\x43\xe1\xdd\x7a\x8b\xad\x24\xc9\x95\x0c\x08\xd2\x2a\xf0\x48\x8d\xb7\x01\x34\x01\xb9\x78\x40\x6e\x34\x5a\x12\xd1\x9a\x23\x48\xab\xbd\x33\xdf\x48\xab\x0c\xfa\x0c\x3e\xa0\x54\xe9\x3d\x54\x44\xb5\xf8\x80\xa1\x76\x36\xe0\xad\xd7\x84\x7e\x0e\x1e\xce\x86\xf5\xcf\x0d\x06\xca\xa0\x8d\x70\xfc\x69\x55\xc3\xc5\x25\xe4\x95\x16\xbf\x7f\x78\xfb\x2b\x47\x98\xfa\x39\x24\x5a\x25\xd9\x83\x51\x11\xed\x2e\x2f\x21\x49\x46\xbe\xfc\x55\xc2\xb8\xb2\x44\x2f\x6e\x35\x55\xaf\x34\x1a\x95\xb2\xef\x9c\x1d\x32\xb1\xb4\x85\x4b\x13\x5c\xd7\xb4\x81\x53\xad\x4e\xb9\x0c\x10\xcb\x30\x42\xe7\xcf\xa3\x55\xe8\xc5\x8f\x52\x0d\x31\xa6\xf7\x73\xe8\xe3\x80\x5c\x5a\xeb\x08\x56\x08\xa7\xa7\x47\x6e\x5c\xae\xdd\x52\xb7\xfb\xd5\xb6\x1c\xf4\x4c\x2c\xaf\xc4\x1b\x19\x5e\xbb\x9b\x4d\x8d\x70\xde\x75\x7b\xde\x5a\x71\xea\xb1\x9a\xcb\x2b\xc1\x26\xe2\x9a\xbc\xb6\x25\x74\x5d\xca\xf1\x8f\xe1\xd0\x04\xdc\x61\x2e\xc3\x60\x38\x0d\xa9\x55\xfd\x2f\xae\x4b\x4b\x13\x7e\x73\x40\xef\xd9\x39\x90\xcf\x9d\xbd\x13\x2f\xc8\xe9\xfd\x28\x86\x56\xb0\xdd\x77\x97\x60\xb5\x39\xe8\xc5\x93\xfb\xe1\xbd\xf3\xdc\x86\xc0\x29\xec\x5a\x12\x27\x93\xbb\x74\x50\xe4\xaf\xf5\x67\xdd\x84\xd8\x1d\x09\xb5\x0b\x9a\x78\xda\xb5\x25\x2c\xd1\x43\xe9\x51\x32\xea\x17\xf4\x6e\x12\x75\xaf\x7d\x87\x2d\x3c\x07\xb4\xaa\xeb\x4e\x46\x4b\x8b\x33\x58\x16\xe0\x2c\x82\x2b\x22\x3d\x98\x5c\x16\xaa\x9e\x05\x50\x7a\xd7\xd4\x01\x74\x80\x80\x04\xce\x46\x13\x54\x25\x02\x4a\x8e\xe7\xa3\xd3\x16\x34\x89\xb3\xc5\xa8\xfe\x8b\x05\x90\x53\x0e\xce\xc1\x62\x20\x54\x83\xad\x71\x52\x69\x5b\xfe\xb0\xb3\xc3\x5d\x8b\x2a\x31\xb0\x72\xcc\x44\xf1\x5b\x83\x7e\x93\x66\xe2\xb6\x42\x8f\xe9\xc3\xd6\xdf\x10\xac\xfc\x14\x4d\x96\x57\xa9\x56\x59\x26\xf6\x92\xf4\xd2\x96\x08\x33\x64\xe4\x99\x78\xa9\x4a\x0c\x70\x30\x1e\x23\xb3\xb2\x37\x7b\xc1\x9c\x90\x2c\x47\x41\x0c\x1a\xf0\x1a\xad\x60\x15\x78\xdd\x17\xe1\x00\xe2\xf0\xb4\x88\x13\x6a\xa3\x09\x52\x92\xe5\x5b\xe7\x3e\x35\x35\xcc\x22\x05\x9a\x9c\x6e\x64\x09\x49\x5f\xce\x24\x83\x64\x9e\x4c\xe1\x6d\x31\x79\x28\x3f\x73\x68\x0c\xdb\x75\x3c\x7a\x6d\x0b\xb5\x0c\xb9\x34\x0c\x39\x54\x28\xcd\xb8\x60\x68\xd5\xd1\xf8\x8f\xfa\x3d\x95\xfa\xc1\xf2\x76\x69\x8c\xf2\xde\x9a\x4d\xea\xc5\x4f\xce\x12\xfe\x45\x69\xb6\x27\x5e\x8f\x32\x26\xdc\x6b\xca\x2b\xde\x17\x29\x6d\x6a\xcc\x26\x18\x95\xb3\x36\x9f\x71\xb7\xdf\x39\x7a\xe5\x1a\xab\x5e\x32\x7f\x2e\x26\xab\xb1\x47\xbf\x68\x97\xa2\xf7\xd9\x98\x8d\x7b\x33\xb3\x15\x9f\xe1\x7f\xe4\x69\x26\xae\x70\xd5\x94\x69\xf2\xd1\xad\x80\x95\xaf\xe0\x43\x27\xe8\x03\x0f\xc4\xdc\x86\x36\xd0\x92\xcf\x7c\xc4\xfc\x88\x71\x47\x39\x5e\x6b\x5b\x36\x46\xfa\xff\x3d\xcd\xde\x31\x51\x4d\x6d\x74\x2e\x09\x01\x2d\xf9\x0d\x14\xce\x83\xfe\x4a\xbe\x4b\x4b\xe8\xad\x34\xd7\xe8\xef\xb0\x8f\x74\x48\xdd\x6a\xf3\xac\xd4\x15\x16\xb2\x31\xf4\x0d\xf2\xec\x65\x37\x3e\x1e\x58\x77\xad\x53\x18\x1f\x02\xa0\x56\xdf\x22\xd9\x6e\x74\x4d\x8e\x6f\xa7\xd9\x20\x9a\xcf\x97\x95\xd1\x9d\x55\xa1\xd7\x45\x21\x7e\x91\x3e\x54\xd2\xa4\xdf\x6f\x17\xde\xd7\x11\xab\xed\x9d\x2f\xe0\x8f\x3f\x43\xbc\x38\xdb\x23\x8e\xf3\xfd\x58\x3e\x45\xb9\x7a\x01\xec\x4d\xbb\x2e\x69\xdb\x59\xc9\x95\x7e\x44\x59\xb6\xd7\xef\x94\xe2\x24\x53\x1a\x7d\x61\x74\xa0\x64\x52\x82\xc6\x18\x5d\x37\x07\x7c\x9a\xc8\xfc\xa7\x43\x14\xd0\x6b\x69\xf4\x97\xd8\x23\x88\x23\x35\xfd\x94\x7a\xc6\xd0\x1c\xbd\xa2\x4e\x26\x43\x3f\x8a\xf5\xa1\x68\xc9\x1c\x50\x2c\xaf\xb6\x0f\x8c\x29\x93\x21\x2e\x1c\x13\x7b\x08\xf5\xfd\xcf\x43\x64\xaa\xdf\xea\x4e\xda\x36\xde\xfc\xff\x04\x00\x00\xff\xff\xfe\xee\x79\x22\x92\x0b\x00\x00")

func handlerReadTplBytes() ([]byte, error) {
	return bindataRead(
		_handlerReadTpl,
		"handler/read.tpl",
	)
}

func handlerReadTpl() (*asset, error) {
	bytes, err := handlerReadTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "handler/read.tpl", size: 2962, mode: os.FileMode(420), modTime: time.Unix(1604933974, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _headerTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x8d\xb1\x0a\x83\x30\x14\x45\x77\xbf\xe2\x22\x19\x4b\xdc\x0b\x4e\xda\x42\x97\x5a\xa8\x3f\x10\xcd\x35\x06\x4b\x14\x75\x29\x8f\xfc\x7b\x41\xaa\x74\xe8\xf8\x38\xe7\x9d\x2b\x02\xcb\xce\x07\x22\xed\x69\x2c\xe7\x14\x31\x26\x00\x90\x65\x28\x46\x4b\x38\x06\xce\x66\xa5\x45\xf3\x06\xc3\xda\x9e\x50\x56\xb8\x57\x35\x2e\xe5\xad\xd6\xc9\x26\x8b\x40\x4d\x83\xc3\x39\x47\x63\x16\x42\xe9\x62\x0c\x9d\x77\xfa\x61\xda\xc1\x38\xee\x51\x11\xf8\x0e\xbd\x59\xae\x9e\x2f\x0b\x85\xf4\xd9\x8e\x13\x8f\xd1\xdf\x56\x0e\xa5\x37\xfa\x27\xc2\x60\xf7\x6b\xfa\xc2\xfd\x2d\xc6\xe4\x10\x3e\x01\x00\x00\xff\xff\x7b\x97\x4d\x15\xde\x00\x00\x00")

func headerTplBytes() ([]byte, error) {
	return bindataRead(
		_headerTpl,
		"header.tpl",
	)
}

func headerTpl() (*asset, error) {
	bytes, err := headerTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "header.tpl", size: 222, mode: os.FileMode(420), modTime: time.Unix(1604930027, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _sheriffTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\xdd\x69\xc4\x30\x10\xc4\xf1\x77\x57\x31\xb8\x00\xab\x8c\x14\x90\x34\x20\x47\xa3\x68\xb1\xbe\xd0\x2e\x21\x41\xa8\xf7\xe3\xc0\x77\xcf\xbf\x99\xff\x9c\x08\x8c\x52\x89\xbd\xb4\xc0\xec\xd4\x86\xd4\x1f\x8e\x1d\x6b\x6d\x00\xe0\x1c\x3e\x68\x18\x12\xd0\x22\x2c\x11\xb1\xd8\xf1\x79\xcf\x20\xa5\x67\x16\x56\xf3\x26\xad\x42\xa5\x7e\x13\x62\x38\x07\xfd\xa5\xc8\x22\xdd\x69\xe2\x90\x18\x8f\x57\xef\x2b\xc9\x53\x2a\x15\xc9\xff\x12\xd6\x70\x12\x89\x83\xf7\xdf\x58\x7a\xf6\x46\x67\xfc\x33\x84\x46\x85\x5e\xd2\xc1\xd2\xed\xff\xad\x7a\x6c\x73\x82\x35\x60\xad\x47\x00\x00\x00\xff\xff\x27\x7e\xb9\xc9\xc8\x00\x00\x00")

func sheriffTplBytes() ([]byte, error) {
	return bindataRead(
		_sheriffTpl,
		"sheriff.tpl",
	)
}

func sheriffTpl() (*asset, error) {
	bytes, err := sheriffTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "sheriff.tpl", size: 200, mode: os.FileMode(420), modTime: time.Unix(1604818390, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"flutter_models.tpl":  flutter_modelsTpl,
	"handler/create.tpl":  handlerCreateTpl,
	"handler/handler.tpl": handlerHandlerTpl,
	"handler/list.tpl":    handlerListTpl,
	"handler/read.tpl":    handlerReadTpl,
	"header.tpl":          headerTpl,
	"sheriff.tpl":         sheriffTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"flutter_models.tpl": &bintree{flutter_modelsTpl, map[string]*bintree{}},
	"handler": &bintree{nil, map[string]*bintree{
		"create.tpl":  &bintree{handlerCreateTpl, map[string]*bintree{}},
		"handler.tpl": &bintree{handlerHandlerTpl, map[string]*bintree{}},
		"list.tpl":    &bintree{handlerListTpl, map[string]*bintree{}},
		"read.tpl":    &bintree{handlerReadTpl, map[string]*bintree{}},
	}},
	"header.tpl":  &bintree{headerTpl, map[string]*bintree{}},
	"sheriff.tpl": &bintree{sheriffTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
