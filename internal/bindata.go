// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/http/create.tmpl
// template/http/handler.tmpl
// template/http/read.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateHttpCreateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\x31\xaa\xc3\x30\x10\x44\x7b\x9d\x62\x58\x7e\x65\xb0\xd5\xff\x0b\xa4\xcd\x15\x16\x7b\x22\x9b\x24\xb2\x10\x0b\x49\x58\x74\xf7\x20\x1c\x92\x62\x60\x8a\x37\x6f\xdc\xe3\x80\xb4\xdb\xab\xf0\x1f\xcc\x96\xf6\x69\xdb\x23\xb3\xf5\xcc\x31\x31\x4f\xa7\xaa\x65\xc5\x10\x5b\x0b\xc1\x1d\x0b\x2f\x5b\x26\x64\x35\x2b\x71\xae\x54\xa3\xa0\xb5\x00\x00\xee\x23\x1e\x9b\xad\xe0\xd3\x98\x17\xfc\x41\xce\x3a\x5f\x35\x51\x8e\x81\x60\xfc\xa0\x07\x0e\xe3\xbd\xdc\xd4\xba\x8f\xba\xb0\x0a\xa6\x9f\x0c\xdd\xd1\x6f\xc3\xb7\xbf\x03\x00\x00\xff\xff\xd6\x81\xc2\xe3\xb0\x00\x00\x00")

func templateHttpCreateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpCreateTmpl,
		"template/http/create.tmpl",
	)
}

func templateHttpCreateTmpl() (*asset, error) {
	bytes, err := templateHttpCreateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/create.tmpl", size: 176, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpHandlerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xcd\x6e\xab\x30\x10\x85\xf7\x3c\xc5\xb9\xe8\x2e\x20\x22\xa6\xeb\x4a\x59\x74\x55\x55\xea\x22\x8a\xd4\x07\xb0\x60\x00\xab\x64\xec\x4e\x86\xfe\xc8\xe2\xdd\x2b\x43\x4a\x62\xc9\x0b\x7b\xbe\xf3\x1d\x3b\xc6\x7a\x87\xde\xeb\x4f\xa0\x47\x10\x6b\xef\x8d\xf3\x35\xb1\xa6\xdd\xd4\x3d\xb1\x79\x16\x1b\x06\xec\xea\x79\xce\xb2\x18\xd1\x52\xe7\x98\x90\x0f\xaa\xa1\x1e\x2c\xb7\x23\x49\x8e\x79\xce\x00\x20\xc6\x3d\xbe\x9c\x0e\xa0\x6f\x25\x6e\xf1\x1f\xf9\xd1\x36\xef\xb6\xa7\x7c\x4d\xe4\xd8\x5f\xd1\x15\x87\xd2\x39\x8c\x56\x93\x90\x6c\x9b\x54\xe6\x26\x43\x72\xa4\xde\x74\xec\x26\x6e\xf0\x76\x7a\x3d\x5a\xb1\xe7\x17\xd6\x42\xb0\x4b\x4a\x73\xa2\x8f\x89\x2e\x5a\x21\xe0\xa2\xe2\xb8\x2f\x51\x38\xd6\x0a\x24\xe2\xa5\x44\xdc\xfa\x5c\xbb\x5c\xe2\x90\xc0\xc6\xf3\xa7\x79\x52\xef\x8a\x66\x70\xe6\x4f\x5c\x48\x85\x50\x96\xb7\x48\xb7\x24\xfe\x1d\xc0\x6e\xbc\x53\xa5\x25\xa4\x93\x30\x1e\x16\xe9\x36\xb9\x3e\xf7\x0e\x48\xb5\xec\xc6\x6c\x9d\x6e\xdf\xfa\x0d\x00\x00\xff\xff\xfd\x38\xf5\xe8\x7c\x01\x00\x00")

func templateHttpHandlerTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpHandlerTmpl,
		"template/http/handler.tmpl",
	)
}

func templateHttpHandlerTmpl() (*asset, error) {
	bytes, err := templateHttpHandlerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/handler.tmpl", size: 380, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpReadTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x57\x4d\x8f\x9b\x48\x13\xbe\xcf\xaf\xa8\x17\x8d\x22\xf0\xeb\xb4\xef\x96\x72\xc8\x8e\x67\x13\xb4\xb3\x93\xec\x4c\xa2\x1c\x56\x7b\x68\xd3\x05\xb4\xd2\xee\xc6\x45\x31\x8e\xe3\xe5\xbf\xaf\x1a\xfc\x85\xc1\x99\x78\x8e\x69\xc9\xc2\xd0\x55\xd5\xf5\xf1\x3c\x55\xb0\xd9\x4c\x46\x90\x39\x5e\x17\x38\x05\xb4\x9c\x39\xa1\xdd\x04\x2d\xfb\x5f\x32\xc9\xd0\x8a\x77\x24\x8b\x1c\x46\x93\xba\xbe\xba\xda\x6c\x40\x61\xaa\x2d\x42\x90\x33\x17\x13\x42\xa9\x02\xa8\xeb\x2b\x00\x80\xcd\xe6\x35\xac\x34\xe7\x80\xdf\x18\xad\x82\x6b\x08\x3e\xca\xe4\xab\xcc\x30\x68\xc5\x03\x78\xbd\x15\x6d\xc5\x81\x71\x51\x18\xc9\xde\x1a\x4a\x85\x14\x80\x38\x18\x03\x6f\xc3\x1f\xba\xbd\x25\x69\x33\x84\x6b\x0b\xd3\x37\x70\x2d\xee\x9d\xc2\x12\x8e\xcc\x4d\x26\x5e\xe8\xda\x8a\x7b\xb9\x40\xa8\xeb\xf7\xd2\x2a\x83\x04\x79\x73\x2d\xc1\x3b\x00\x09\x55\x0a\x5c\x81\x24\x59\x3b\x5b\x82\xb3\xc0\x39\x76\x15\x61\xe1\x14\x1a\xb1\x37\xec\x73\x33\x6c\xba\x64\xaa\x12\x86\xcd\x5e\xd4\xaf\xc4\x68\xb4\x0c\x23\xb4\x2c\x6e\x9a\xff\x9d\x6d\xe3\x32\x7f\x19\x7d\x97\x85\xb8\x73\x59\x86\xb4\xdf\xde\x86\xea\x57\x5a\xd9\x04\xee\x71\x35\x74\x6c\x98\x1c\x1b\x1f\x83\x39\x36\x16\xc1\x68\xd0\xd5\xae\x8f\x84\x5c\x91\x85\x57\x43\xa2\x5d\xc9\x43\x44\x53\x48\xc6\xbd\x2d\xe3\xb2\x29\x98\xee\xf3\x7a\x28\xa0\xc9\x04\x1e\x50\x2a\x48\x91\x93\x1c\xcb\x73\x59\x07\xad\xd0\xb2\x4e\x35\x2a\x98\xaf\x41\x42\xa6\x9f\xd0\x42\x45\xe6\x75\x21\x49\x2e\x90\x91\x20\x25\xb7\xf0\x06\x8e\x8d\x2b\xc9\x72\x2e\x4b\x04\x69\xd5\x36\xbc\x12\x34\x03\xbb\xe6\xa8\x36\x04\xd1\xcd\x6f\x98\x0f\x27\x2b\x6a\x5c\x0d\x57\x0d\x64\xc4\x03\x96\x85\xb3\x25\x7e\x21\xcd\x48\x63\x20\x18\x6d\x9f\x2f\x2b\x2c\x39\x3a\x49\xed\x64\x02\xf1\x0c\x74\x09\x9f\x1f\xee\x60\xef\xb3\xe8\xc8\x78\xa2\xe8\xd4\x1f\x1c\xcf\x44\x5c\xc6\x96\x8f\x81\xbc\x5b\x5a\x8d\x01\x89\x3c\xdc\x4b\xa6\xc4\xd9\x27\xf1\x96\x9d\x0e\x93\x5c\x8b\xcf\x0f\x77\x1f\xbd\xed\x90\xc6\x10\x68\x15\x44\x51\x5f\x3d\x6d\xb4\xff\xf7\x06\xac\x36\xd0\xaf\xaa\x5f\xb9\x30\x2e\x13\xb7\x44\x8e\xc2\x00\xfd\x05\x32\x64\xd6\x36\x03\xad\xda\x3c\x57\x64\x0e\x61\x04\x7d\x04\xec\x96\x87\xe0\x23\x93\xb6\x59\x18\x2c\x90\x73\xa7\x82\x31\x04\x4d\x7f\x88\x7e\x4e\x4b\x7b\x8d\xe1\xe0\x7e\x6c\xa0\xf5\x1f\x89\xce\xc8\xf5\x73\x03\x0d\x07\xac\x42\x12\xbf\x49\xb5\xad\x64\xb8\x1a\x43\x7b\x22\x2c\xaa\x92\x61\x8e\x20\xa1\x70\xa5\x66\xfd\x84\xa0\x2d\x63\x86\x04\x19\xa1\xf4\x20\xfc\x8e\xe4\x82\x73\x96\x3d\xfc\x7a\x5b\xf5\x09\x06\x00\x4d\x89\xc3\x85\xf7\x35\x1f\xcc\x44\xcf\x84\x55\x4d\x4f\x3d\x85\xe0\x4d\xe3\x65\x03\xfd\x65\x85\xb4\xf6\x3c\x68\xa8\xd7\x27\x5e\x47\x75\xe9\x4f\xce\xc5\x96\x2e\x1d\x39\xf1\x97\x37\x14\x46\xe2\x4b\x8e\x84\xe1\xd1\xde\xbf\x60\xdc\x0a\xc9\xcb\xc4\x33\xbf\xb1\xc7\xf6\x7b\x59\xbe\x73\x9f\x7c\xff\xac\xeb\x56\x21\x9e\x89\xed\x7d\xa8\x55\x74\x48\x82\x56\xfb\x86\x1f\x45\x57\x3d\xb6\xb4\x63\x45\x65\x58\x7e\x72\x77\x4e\x2a\x3f\x06\x82\xce\xf0\x39\x49\xc0\xad\xf4\xc5\x32\x5e\xb4\x51\x03\xce\x25\x83\x24\x04\xc2\x65\xa5\x09\x95\xef\xfd\xde\xc2\x61\x1c\x88\x9e\xa1\xcd\x06\xc4\x8d\x53\x08\xc1\xb2\x77\x90\x77\x6b\x3b\xa1\x8e\x1f\xe3\x9e\xb4\x4b\xf1\xc1\x9a\x75\x48\xe2\xc6\x59\xc6\x6f\x1c\x9e\x90\xf4\x39\x82\x96\x2b\xed\x0b\x86\x44\x22\xf4\x33\xe8\xb4\xd3\xec\x56\xe2\xdb\x5e\x33\x11\xee\x1d\xff\xee\x2a\xab\x1a\x42\x4c\xcf\x72\xa6\x65\xfd\x0c\xe7\x55\x16\x06\x9d\x3a\x7e\xc5\xb9\x9c\xfb\x66\x6c\x1d\x43\xea\x4d\xfd\x80\xf1\xf0\x62\xd6\xef\x34\x63\xcb\x3b\x07\xe2\xd9\x0e\x67\xc1\x18\xb4\xfa\x09\xe5\xe7\x58\x0f\x67\x99\x0f\x07\xf6\xef\x32\xb6\xe3\xfe\x73\xd9\xf8\x91\xc1\x41\xd2\xc3\x69\x81\x1e\xb5\xcd\x2a\x23\xe9\x92\x1a\xa9\xaa\x30\x3a\xf1\x84\x46\xcb\xb4\x86\xd4\x11\x0c\x7a\xfa\x8b\x57\xab\xdf\xab\x0f\x99\x19\xae\x5c\x9b\xaf\xa6\x7b\x68\x05\x01\xfc\x7f\x3f\x4a\x63\x76\xd2\xb7\xa0\x17\x55\x54\x61\x2a\x2b\xc3\xcf\x95\xaf\x33\x58\x9b\xf6\xeb\x27\xeb\xb0\xa7\xcd\xb0\x55\xf3\x5f\xbc\x82\xb1\x65\x24\x2b\xcd\x23\xd2\x13\xb6\x1c\xd8\x96\xd2\x6a\x73\x71\x29\xea\x33\xef\x9d\x7e\x1d\xbd\x3c\xe5\x48\x3a\x4d\xc5\x9f\x92\xca\x5c\x9a\xf0\xd5\xee\xc1\x87\xa2\xf9\x08\xe8\x77\xd5\xd8\x26\xa6\x52\x78\xbb\x28\x78\xfd\x49\x66\x53\x60\xaa\xb0\x1f\xf5\x3b\x72\x55\x51\x4e\xe1\xef\x7f\xca\xa6\x24\x9b\xc3\xa8\xba\x16\x6f\xad\x75\xdc\x7e\x65\x88\x5b\xf3\xf5\x31\xc9\x71\x21\x85\x7f\xb1\x6c\xd5\xfc\xb4\xf4\xa3\xe5\x30\x02\x87\x9b\x4f\x70\x98\xf2\x50\x9f\xbc\x68\x8f\x01\x2f\x1b\x29\x1d\x58\x96\x48\x5a\x1a\xfd\xbd\x71\x12\x1a\x90\x9e\x41\xdf\xe5\xa8\x7b\x11\xda\x9e\x43\x59\x1f\x1f\x2f\x43\xd5\x00\x9a\xba\xd8\x69\xd3\x14\xdb\xd4\x9d\x9b\x8f\xed\xc1\x38\x34\x1e\x2f\x4b\xd6\x45\x89\x8a\xae\x06\x82\xff\xf0\xc7\x36\x56\x15\x5d\x75\xc3\x39\x7c\x42\xef\xff\xfd\x17\x00\x00\xff\xff\x17\xfc\xaa\x85\xef\x0f\x00\x00")

func templateHttpReadTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpReadTmpl,
		"template/http/read.tmpl",
	)
}

func templateHttpReadTmpl() (*asset, error) {
	bytes, err := templateHttpReadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/read.tmpl", size: 4079, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/http/create.tmpl":  templateHttpCreateTmpl,
	"template/http/handler.tmpl": templateHttpHandlerTmpl,
	"template/http/read.tmpl":    templateHttpReadTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"http": &bintree{nil, map[string]*bintree{
			"create.tmpl":  &bintree{templateHttpCreateTmpl, map[string]*bintree{}},
			"handler.tmpl": &bintree{templateHttpHandlerTmpl, map[string]*bintree{}},
			"read.tmpl":    &bintree{templateHttpReadTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
