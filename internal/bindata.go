// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/http/create.tmpl
// template/http/delete.tmpl
// template/http/handler.tmpl
// template/http/helpers.tmpl
// template/http/list.tmpl
// template/http/read.tmpl
// template/http/relations.tmpl
// template/http/request.tmpl
// template/http/response.tmpl
// template/http/update.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateHttpCreateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\x4c\x05\x1f\xa4\xc0\x26\xdb\xeb\x02\x39\x14\x9b\x74\xd7\x40\x37\xdd\xae\xd3\xcd\x99\x36\x47\x12\x1b\x99\x94\x87\x23\x7b\x5d\xd7\xff\xbd\x20\x25\x7f\x48\x76\xd2\x5d\x01\x41\x64\x63\xe6\xbd\x79\x33\x8f\x43\xef\x76\xf2\x16\x0a\xc7\xdb\x1a\xdf\x01\x5a\x2e\x9c\x30\x4e\xa2\xe5\xf0\xb7\x90\x05\x5a\xf1\x81\x54\x5d\xc2\xad\xdc\xef\x6f\x6e\x76\x3b\xd0\x98\x1b\x8b\x90\x94\xcc\xb5\x5c\x10\x2a\xc6\x04\xf6\xfb\x1b\x00\x80\xdd\x6e\x02\x1b\xc3\x25\xe0\x37\x46\xab\x61\x04\xc9\x67\xb5\x78\x51\x05\x26\x6d\x42\x02\x93\x2e\xb4\x0d\x07\xc6\x65\x5d\x29\x0e\x78\xa8\x34\x52\x02\xe2\x04\x06\x01\xa3\xfb\x64\x96\xb5\x23\x86\xa4\x30\x5c\x36\x73\xb1\x70\x4b\x59\xb8\x49\x5d\xa9\x6d\x41\xae\xb1\x5a\xae\x55\x65\xb4\x62\x47\x72\xfd\xcb\xcf\x09\x44\x61\x4f\xa5\xf1\x60\x3c\x58\x44\x8d\x1a\x72\x47\xe0\xb9\xa9\x8d\x86\xd9\xf4\x2b\x50\x53\x61\xa7\xab\xe3\x1b\xd5\x2f\x05\xbc\xbb\x83\xb9\xf2\x08\x23\xf1\xde\xd9\xdc\x14\xa2\x93\x70\x56\x17\x29\x5b\x20\x8c\x6c\x88\x1d\x89\x47\xa7\xd1\xc3\x99\x2e\x29\xe1\x7d\x6c\x0c\xb4\xfd\xf1\xa0\xc0\xe2\xe6\xc8\xb0\xdf\x8b\xf0\x6a\xc5\xa3\x5a\x06\x58\x50\x56\x83\x67\x47\xe8\xc1\x30\x18\x0b\x5c\x22\x68\xc5\x2a\x14\x22\x8e\xb8\x79\x63\x17\x90\x96\xd0\x4b\xfe\xa8\xac\xae\x90\xb2\x8e\x32\xdd\x40\x68\xb4\xf8\x82\xbe\x76\xd6\xe3\x33\x19\x46\x1a\x03\xc1\x6d\xf7\xfd\xaa\x41\xcf\x19\xec\x8e\xb0\xe1\xa9\x82\x94\x52\x54\xae\x10\xcf\x86\xcb\xf4\x1f\x55\x8b\x19\x93\xb1\x45\x9a\x2c\x91\x4b\xa7\x93\x31\x24\x2d\x45\x92\x65\xbd\x5c\x29\xe1\x03\x72\xac\xb9\x76\x9e\x63\xe1\xa2\x17\xb1\x56\x04\xba\x5f\x76\x0b\xd5\x55\x73\xd3\x8b\x0e\x2e\x3a\xf7\x45\x55\x23\xc9\x68\x37\x8d\x0b\xa7\x71\x42\x6d\xd6\x64\xee\xf4\xb6\x75\xd4\x45\xbe\xc9\xe3\xd0\xfd\xd7\xd6\x15\xc6\xd9\x30\xae\xe4\xe4\xd7\x81\xf7\x4e\x1c\x9d\x8f\x86\x2c\x31\x23\xf8\xf1\x82\x4e\x4a\x98\xa9\x35\x1e\x67\xd6\x97\x3e\x6f\x1b\xbb\xa8\x0c\x5a\xee\x8f\x5d\x74\x13\xcb\x06\xd5\x1f\xec\x95\x47\x7b\x59\xf1\x9b\xc1\x4a\xfb\xde\xc9\x39\x3c\x26\x07\x1d\x41\xf3\x30\xad\x66\xc1\x31\x36\x58\xea\xa7\x3b\xb0\xa6\x1a\x4c\xf9\x58\x94\x98\x21\x5f\x4b\x4b\x6f\xaf\xc3\x65\x17\x30\xfb\x61\xd1\x87\xde\x5c\xd7\x82\x9d\x96\x07\x5d\xe0\xff\x48\xc1\x1f\x92\xd2\x0d\x7b\x84\xe2\x2f\x6b\x56\x0d\xc2\x15\xe8\x93\xec\x16\xff\x53\xc3\xd1\x12\x33\xe4\x33\xcd\x43\xde\x4b\xcd\x07\x3e\xac\xfc\x0f\xf1\xfc\xaa\x63\x6f\xaf\xd3\x08\x21\xde\x60\x3a\x2d\xc0\xf3\xe7\xbb\x9a\x8f\x63\x40\xa2\xb8\xce\x44\x30\x68\x4a\x61\xa1\x31\x7e\xe3\x74\x70\x80\x4d\x1e\x23\x5f\xed\x73\x25\x1e\x88\x1c\xa5\x09\x86\x7f\xe0\xd5\xda\xd8\xe2\xfc\x38\xff\x0b\x2f\x38\x57\x73\xd8\xef\x93\x31\x84\xd5\xd1\xc6\x23\x51\x76\xa9\x8d\xd0\x6a\x24\x31\xb5\x8c\x64\x55\x35\x43\x5a\x23\xb5\x09\x9b\x31\xd0\x38\x14\x71\x2d\x8b\x1b\xb2\x37\xaf\x77\x41\x4a\xf8\x82\x95\x53\x3a\x5c\x63\xb4\xed\x9f\xc2\xd5\x1b\xa7\xf0\xcf\x06\x69\x9b\x66\xe2\xb9\x44\xc2\xb4\xa7\xaa\x72\x1b\xa4\x10\x33\xbd\x4f\xb1\x4b\x9b\xde\x0f\x7d\x92\x5d\xae\x9f\xf6\x12\x0c\x5e\x7f\x72\xbf\x87\x9a\xfa\xcb\xe7\x42\x9d\x94\xf0\xa0\x0a\x24\x68\x05\xc4\x43\xc2\xa5\x62\x50\x84\x10\x16\x91\x21\xd4\xe0\x6c\x77\xa1\x80\xab\x91\xa2\xb5\xc4\x05\xd4\x6a\xb7\x03\xf1\x60\x39\xca\x1a\x72\xbd\xe2\xa9\xce\x2a\x77\xb0\x12\x7f\xd8\x6a\xdb\x77\xca\x77\xee\x66\x8a\xcd\x97\xd1\x22\x93\x32\x5c\x4a\xc6\x16\xe1\x3a\xbf\x58\x98\x95\x98\xda\xdc\xa5\xc9\x55\x03\x75\xf6\x40\xdd\x39\x69\x6a\xf9\x10\x39\xbd\x3f\xcc\x2c\x19\xc3\x5b\xe3\xe8\x49\x53\x7e\xfb\xb7\x77\x56\x7c\x52\xe4\x4b\x55\x3d\xb9\x8f\x4f\x4f\x9f\xfb\xb7\x63\xfa\x88\x9b\xab\x97\x53\x1b\x94\x62\x36\x86\xcd\x09\x76\xf8\xf3\xe4\xf8\xf6\x5f\x00\x00\x00\xff\xff\x0e\xe0\xf9\x70\x4d\x09\x00\x00")

func templateHttpCreateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpCreateTmpl,
		"template/http/create.tmpl",
	)
}

func templateHttpCreateTmpl() (*asset, error) {
	bytes, err := templateHttpCreateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/create.tmpl", size: 2381, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x54\x41\x6f\xf3\x36\x0c\xbd\xe7\x57\x70\x42\x0e\x76\x90\xc8\xa7\x5d\x3a\xf4\xb4\x74\x6d\x2e\xdd\xb0\x16\xeb\x59\xb1\x68\x5b\xa8\x2c\x79\x34\xdd\xb4\xf3\xf2\xdf\x07\xda\x86\x9b\x34\x29\x76\xf9\x04\x18\xb1\x94\xc7\x47\xbe\x47\x5a\x7d\x9f\xad\xa0\x8c\xfc\xd1\xe0\x0d\x60\xe0\x32\x6a\x17\x33\x0c\x2c\x4f\x9e\x95\x18\xf4\x3d\x99\xa6\x82\x55\x76\x3c\x2e\x16\x7d\x0f\x16\x0b\x17\x10\x54\xc5\xdc\x64\x16\x3d\x32\x2a\x38\x1e\x17\x00\x00\x7d\xbf\x81\x83\xe3\x0a\xf0\x9d\x31\x58\x58\x82\xfa\xc3\xe4\xaf\xa6\x44\x35\x06\x28\xd8\x4c\xd0\x11\x0e\x8c\x75\xe3\x0d\x0b\x1f\x1a\x8b\xa4\x40\x7f\x92\x81\x70\x4c\x3b\x57\x37\x91\x18\x54\xe9\xb8\xea\xf6\x3a\x8f\x75\x56\xc6\x4d\x5e\xb9\x4c\x9e\xb7\x9f\x15\x0c\x52\x9e\x2b\xd7\x82\x6b\x21\x20\x5a\xb4\x50\x44\x82\x96\xbb\xc6\x59\x78\xda\xfd\x05\xd4\x79\x9c\x94\x4c\x19\x96\xcd\x6b\x09\x37\xb7\xb0\x37\x2d\xc2\x52\xff\x1a\x43\xe1\x4a\x3d\x15\x7d\x52\x09\x99\x50\x22\x2c\x83\x60\x97\xfa\x31\x5a\x6c\xe1\x44\x49\x96\xc1\x76\xb0\x02\x08\xeb\xf8\x86\x2d\x98\x99\xfd\x78\xd4\xf2\x1a\xf4\xa3\xa9\x85\x12\x0a\x8a\x35\x70\x85\x60\x0d\x1b\x49\xac\x67\x9e\xa2\x0b\x39\x24\x15\x9c\x05\x3c\x98\x60\x3d\x52\x3a\xa5\x48\x0e\x20\x56\xea\x3f\xb1\x6d\x62\x68\xf1\x85\x1c\x23\xad\x81\x60\x35\x9d\xff\xdd\x61\xcb\x29\xf4\x33\xad\x2c\x2f\xa5\x57\xda\xc7\x52\xbf\x38\xae\x92\x7f\x4c\xa3\x9f\x98\x5c\x28\x13\x55\x23\x57\xd1\xaa\x35\xa8\x31\x85\x4a\xd3\xb3\x58\xe9\xeb\x69\xa7\x7c\x83\x94\x0d\x03\xe0\xec\x46\xe4\x6c\x3a\xf2\x4a\xec\x39\x6d\xef\xd0\xb6\x02\x90\x68\x4c\x9d\x7b\x87\x81\xcf\xcd\xd0\x63\xc2\xdf\x03\xee\xb6\x49\xdf\x0b\x7e\x19\xf4\x6e\xab\x1f\x4c\x7b\x1f\x9f\x3f\x1a\x01\x8d\x11\xbb\xad\x9e\xf6\x89\xb3\xa9\x4c\x87\x6f\x65\xe7\xec\x3c\x29\xa9\xbe\x7b\xc7\x3c\x21\xe9\x23\xe3\x3b\x27\x69\xfa\xcb\x90\xff\xa7\x5b\x08\xce\x7f\x71\x44\x56\x7b\x70\x9c\x57\x82\xd1\x89\x7c\x04\x5f\x5d\x93\x95\xcb\x6c\xac\xa4\xf4\xc7\xc8\xbf\xc5\x2e\xd8\x3b\xa2\x48\x37\x17\x40\x59\x75\x3b\xcc\x53\xcb\xe4\x9a\xbb\xc0\x03\x32\x41\xa2\xf4\x2a\xda\xeb\x5d\x28\x62\x52\xb7\xe5\x1a\xa4\x21\xbb\xc0\x89\x9a\xe5\x4e\x1e\xa9\x35\x38\x9b\x8e\x80\x4f\xbe\xeb\x84\x84\xc1\x22\xcd\x85\x26\x87\x35\xd0\x1a\xd4\x89\xe7\xff\xc2\x2b\xee\xcd\x5e\x06\x31\x44\x86\x42\x60\xea\x92\xcc\x62\x61\x3a\xcf\xd7\x45\xfa\xa9\x0e\x85\xf2\x03\xc3\x2d\xe0\x42\x09\xd7\xd3\x0c\xf3\x6e\xf7\xea\xc7\x4a\xdc\x05\x46\x0a\xc6\x3f\x21\xbd\x21\x8d\x41\xa3\xda\xe0\xfc\x65\xe4\xf1\xe2\x84\x90\x3b\x0a\x8b\xef\x41\x53\x73\xbe\x31\x6f\xbc\xfa\xec\xff\xab\x3a\xaf\x65\x6e\xd0\x30\xa2\x81\x93\xc3\xe7\xff\x5f\xef\xbd\xf9\xed\xbf\x00\x00\x00\xff\xff\x6e\x33\x49\x6d\xa6\x05\x00\x00")

func templateHttpDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpDeleteTmpl,
		"template/http/delete.tmpl",
	)
}

func templateHttpDeleteTmpl() (*asset, error) {
	bytes, err := templateHttpDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/delete.tmpl", size: 1446, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpHandlerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x41\x6f\xe3\x36\x13\xbd\xfb\x57\xbc\x4f\x08\x16\xb2\xe1\x50\x9b\xaf\xe8\xc5\x48\x2e\x4d\x83\x6d\x81\x6d\x10\x64\xb7\xdb\x33\x23\x8d\x29\x22\x32\x29\x90\x94\xb3\x5b\x55\xff\xbd\x20\x45\xcb\x92\x23\xa7\xc8\x41\x10\xa9\x99\x79\x33\x9c\x79\x7c\x76\xdb\x66\x2b\x08\xed\x7e\xd4\xb4\x01\x29\x27\x34\x93\x3a\x23\xe5\xfc\x93\x67\x82\x14\xfb\x64\x78\x5d\x62\x95\x75\xdd\x62\xd1\xb6\x28\x68\x2b\x15\x21\x29\x9d\xab\xb3\x92\xab\xa2\x22\x93\xa0\xeb\x16\x00\xd0\xb6\x97\x78\x91\xae\x04\x7d\x77\xa4\x0a\x5c\x20\x79\xe0\xf9\x33\x17\x94\xf4\x11\x09\x2e\xa3\x6b\xef\x0e\x47\xbb\xba\xe2\xce\x03\x12\x2f\x3c\x14\x3b\x82\xc1\x63\xc4\x9d\xdc\xd5\xda\x38\xa4\x08\x25\x7f\x2d\xa5\x85\xb4\x50\x44\x05\x15\xd8\x6a\x03\xeb\x9a\x5a\x16\xf8\xf2\xfb\x37\x98\xa6\xa2\xbe\xe2\x43\xa6\x44\x48\x57\x36\x4f\x2c\xd7\xbb\x4c\xe8\xcb\xbc\x94\x99\x7f\xf6\x3f\x27\xe7\x5c\xea\x8a\xff\x10\x46\x37\xaa\xc8\xf6\xbc\x92\x05\x77\xda\x64\xfb\xab\x8f\x7d\xc0\x72\x11\x5e\x59\x86\xd8\x02\x94\xdc\xc2\xea\x1d\x21\xd7\x6a\x4f\x4a\x92\xca\x09\x3b\x72\xa5\x2e\x2c\x1a\x4b\x05\xb4\x82\xd2\x05\x5d\xc6\x08\xcb\x02\x84\x6f\xfd\x00\x62\x9d\x69\x72\x87\xb6\x1b\xe0\x7f\x91\x6e\xc7\xed\x33\x9c\xf6\xc0\x5b\x29\x1a\x43\x78\x29\x65\x5e\xc2\xe8\xc6\x91\xf5\x16\x43\x42\x5a\x47\x66\x84\xf8\xd8\x1b\x1b\xa9\xdc\x4f\xff\xef\xd1\xb6\x8d\xca\x91\x1a\x1b\x6d\x4b\x5f\x72\x6a\x86\xdd\x93\xd6\x15\x5a\x18\x72\x8d\x51\x30\xf6\x83\xc1\xff\x6e\xf0\x11\xb1\x96\xb6\xc5\x45\xfd\x2c\xb0\xb9\xc1\x13\xb7\x84\x0b\x76\x1b\xea\x61\x71\xc0\xa3\xa9\x19\xae\x04\xe1\x42\x79\xdf\x0b\x76\xaf\x0b\xb2\x18\xcd\x22\xd7\xca\x3a\xa4\xc3\xfe\x80\xae\xd8\x3d\xdf\x79\x9c\x5b\x43\x9e\x11\xf1\x08\x37\xb8\xc2\xf5\x35\xa4\x76\xfc\x7c\xc8\x23\xf1\xe2\xbc\xf5\xcf\xba\xe0\x8e\xce\xdb\x7f\xa5\x8a\xde\xb2\x7f\x96\xd6\x9d\x5a\xe3\x21\x29\x1c\x52\xb1\xbb\x42\x90\x9d\x90\x7b\x16\xc9\x6f\xa8\xdf\xfc\x83\x9a\xdb\x9c\x57\x38\x89\x89\xb4\x3f\x85\x9a\x1e\x77\x68\xcd\xf5\xb5\x6f\x0c\x2e\x71\x35\x78\x47\x6e\x46\x02\x4d\xe2\x7e\x1b\xc8\xea\xdf\x16\xfe\x4a\x22\x37\x4d\x01\x5d\x93\xe1\x4e\x6a\x65\x3d\x4f\x0f\xc3\xee\x3a\x36\x89\x67\x03\x72\x20\xd9\x2c\xf6\x81\xc3\x93\xea\x23\xc1\x17\x93\x8f\x79\x25\x49\x39\xbf\x5a\x91\x72\xec\x36\x6c\x27\x1e\x95\x16\x71\xb5\xfa\x9b\xd7\xec\xb3\x16\x82\xcc\xc4\x63\xb8\x9b\x58\x0d\x4b\xf6\xad\x5f\x1d\x27\xda\x1d\x13\x87\x5b\x70\x4f\x2f\x73\xb5\xa7\xf9\xb8\x92\x35\xaa\x71\xda\x35\xf6\x73\x39\x96\x58\xcd\xb6\x61\x7a\xfe\x78\xab\x3e\xcc\xb9\xb6\xaf\x28\xd3\x37\x66\x13\x96\xeb\x57\xd6\x4a\x8b\xcd\x61\xc9\xfe\x92\xae\x4c\x7d\x91\x5f\x9c\x91\x4a\xa4\xc9\x41\x92\xd7\x48\xe6\x92\x25\xcb\xe5\x6b\xc4\xe1\x54\x1b\xec\xa7\xd6\x6e\xae\x85\x59\x86\xc7\xa8\x38\x11\xd5\x0e\x12\x64\xe1\x4a\x82\x20\xe5\xe9\x44\xc5\x61\xf0\x81\x55\xc1\x22\xf7\xa4\x90\x97\xb2\x97\x2f\xc3\xa6\x83\x49\xcb\xf9\x76\x2e\xf1\x87\x6e\x94\x4b\x8d\x0f\x65\x81\xfe\x66\x8d\x91\x96\x4d\x9b\x28\xb7\x30\x96\x79\x7d\x9b\x11\x96\x53\xe7\x30\x1f\xf6\xa0\xad\x4b\x93\x2c\x59\xa3\x64\xd1\xef\x4c\x27\xde\x48\xe0\x65\x68\x1e\xfe\x13\x79\xf4\x56\x16\x5d\xc8\x10\x1c\xdf\x8f\xdf\x0b\xd9\x99\x03\x70\x97\x97\xe3\x1c\xd1\xf9\xfd\x59\x7a\x39\x9c\xcf\xd2\xdb\xc6\x69\xa2\xf7\xfb\xd3\x78\x55\x7d\xab\x59\x01\x3d\x38\xbd\x81\xfd\x1e\x25\x3e\x53\xc7\xbc\x26\xcf\x55\x86\x93\x51\x66\xa3\xd0\xae\xef\xc6\x19\xb0\x57\x50\xff\xa9\xf9\xa7\xff\x81\x8e\x3f\xe1\xd6\x19\x59\xdf\x29\x77\x67\x8c\x36\x29\x19\x03\xf2\xab\x65\x30\x28\x31\xaa\x3b\xaa\x4e\xff\xdd\xb2\xaf\x46\xee\x1e\x0c\x6d\xe5\x77\x1f\xc5\xfa\xf8\xe5\x1a\x49\x10\x9b\xa4\x2f\xb2\x5b\x1c\x73\xfe\x1b\x00\x00\xff\xff\x4f\xa3\x81\x4a\x1e\x0a\x00\x00")

func templateHttpHandlerTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpHandlerTmpl,
		"template/http/handler.tmpl",
	)
}

func templateHttpHandlerTmpl() (*asset, error) {
	bytes, err := templateHttpHandlerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/handler.tmpl", size: 2590, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpHelpersTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x95\xdf\x6f\xdb\x36\x10\xc7\xdf\xfd\x57\xdc\x84\x61\xa5\x03\x9b\x5e\xb1\xb7\x04\x7d\x68\x97\x66\x10\x10\x64\x59\xb2\xec\x9d\x36\x4f\x12\x57\x8a\x54\x8e\x54\x32\x57\xd5\xff\x3e\x90\x92\x7f\xc8\x76\x53\xc3\xcb\x1a\x20\x08\xa4\xdc\xcf\xcf\xf7\xee\xd4\x34\xb3\x33\xc8\xad\x5f\x56\x78\x0e\x68\x7c\x6e\xb9\xb2\x33\x34\x3e\xfc\x2e\x66\x39\x1a\xfe\xe7\xb2\x42\x38\x9b\xb5\xed\x68\xd4\x34\x20\x31\x53\x06\x21\x29\x50\x57\x48\xb3\xc2\xfb\x6a\x26\x71\x61\x25\x4e\x09\x1f\x6b\x74\x7e\x3a\xb7\x72\x99\x40\xdb\x8e\x62\x70\x00\x50\x19\x20\x11\x9c\xbf\x83\xbf\x9d\x35\xfc\x06\x9f\x2f\xa3\x07\x31\xe2\x1f\xac\x5c\x8e\x79\xf7\xcc\x7e\x92\xe3\x8b\x68\xfa\xc3\x3b\x30\x4a\x43\x13\xd3\xae\xc2\x84\x1f\xcd\x3f\x12\x59\x62\x09\x86\x3f\x10\x33\x2b\x93\xc7\xc0\xc9\x04\x3e\x8b\xaa\x37\x40\xa2\xf1\x78\xcf\x9d\xd0\x48\x24\xfe\x41\xc8\xbb\xae\x58\xf6\x3c\x01\x9a\x40\xa2\xcc\x93\xd0\x4a\xc6\x38\xe0\x3c\x29\x93\x27\x87\xdc\x7d\x4d\x66\xf0\xba\x8d\x4f\xc3\x2e\x51\xb8\x65\xec\xf4\xc1\x94\x82\x5c\x21\xf4\x15\xd9\xf2\x0e\xc5\xa6\xe5\x09\xec\xf5\x3a\x3a\xad\xc7\xd1\x69\xbd\x8d\x86\x3d\xc5\xc7\xd0\x15\xa0\x91\xf0\x82\xd6\x31\x94\xf0\xbb\x6a\x4f\x7b\x08\xb3\x19\xfc\xd5\x5b\x80\x2f\x10\xa4\xf0\x82\xef\xe0\x29\x78\x1f\xc4\x12\xbf\xf7\x54\x2f\x3c\xfb\x2a\x8b\xce\x6b\x02\xf6\x53\x04\x4b\xc4\xd9\xd9\xc6\x3b\xed\x3a\xeb\x33\x2a\x6b\x22\x97\xf1\x45\x30\xdf\xc4\x38\xc0\xb4\x0f\x11\xa8\xf6\x7d\xc4\x4a\x5f\xa0\xbb\x45\x38\x35\x1e\xc9\x08\x7d\x8f\xf4\x84\xd4\x19\x77\xa8\x8d\xd2\xbb\x1e\x6b\xb8\x1d\xe0\x4d\x3d\xa9\xc9\x2c\x4b\x9e\xd6\xa5\x43\x26\x94\x46\x79\x82\xc0\xc1\xea\x54\x39\x95\x9c\x66\x64\xcb\x69\x4d\x3a\xae\x6c\xaf\x61\x7a\x09\xca\xc1\xc3\xdd\x35\x54\x82\x44\x89\x1e\xa9\x53\xb1\x69\xa6\x41\x93\x1f\x79\x7a\xc9\x53\x97\x1a\xbf\x72\x8a\x62\xc9\xc9\x4a\x63\xe7\x69\x61\xcd\x13\x7f\xef\xad\x62\x8b\x42\xf1\x87\xbb\xeb\xdb\x10\x8a\xc5\x89\x94\xc9\x56\x5f\xfd\x64\xec\x69\x7f\x40\xb7\x1c\x7d\x14\x4d\x49\x08\x65\x43\x4d\x7a\x53\x61\x8f\xee\x3e\x4e\x38\x0b\x49\x26\x70\x38\xf5\x51\x32\x1f\x58\x24\x09\x65\xed\x3c\xcc\x11\x84\x01\x65\x3c\xe6\x48\x90\x13\x0a\x8f\x04\x9f\x91\x6c\x72\x84\xfc\x41\x14\xed\x70\x08\x2e\x30\x3b\x58\xeb\xda\xc5\xc8\xb8\x64\xdf\x96\x94\x50\x5b\x21\x67\x11\xd8\xb4\x10\x46\xea\xb0\xf0\x30\xbc\x52\x7b\xb0\xdd\xb3\xf2\x8b\x62\xeb\xc5\x42\x38\x0c\x5f\x04\x9e\xba\x1b\xeb\xaf\x6c\x6d\x64\x64\x75\x3e\xe8\xb0\x74\x79\x2f\xb7\xaa\x3e\x1a\xbf\x41\xba\xa3\x62\x9c\xf6\xd2\xe5\x1d\xf9\xd4\x78\x96\x34\x4d\x37\x46\x37\xa2\x0c\x30\x92\x09\x20\x5f\xbd\xeb\xce\xc2\x95\x42\x2d\xdb\xf6\x38\xb9\xd6\x45\x76\x62\x95\x2e\xdf\x98\x49\xcc\x44\xad\xfd\xf9\x4b\xa3\x95\xa1\x5f\x14\x61\xb6\x62\x0d\xb1\xa8\x2f\xf0\x09\xe7\x62\x0e\x6d\xdb\x4d\x9b\x9c\x27\xff\x5f\xfd\x47\x5e\x95\xf6\xd4\x4d\xaf\x44\xae\x4c\xbc\x34\xeb\x59\xa8\x44\x8e\x41\xbd\xb7\xab\xc9\x88\x63\x48\x61\x08\xf9\x1f\x35\xd2\x92\x8d\xf9\x6f\xe8\x59\x12\x0c\x93\xf1\x05\xc8\x30\x37\x49\xb2\x35\x25\xe1\x3f\xdd\xd2\xef\xec\xbc\x3c\x76\xbf\xbb\x3b\xd8\x69\x50\x09\x72\x41\x82\xc7\x90\x7c\xb3\xd8\xf0\x26\xa4\x79\xb3\xb3\xdf\xb1\xa8\x09\xc8\x53\xb7\x39\x76\xff\x0a\xfb\xdc\xef\x95\xc7\xd2\xdd\x22\xdd\xf6\x4c\x7f\xf9\xf9\x5b\x50\xb7\x3d\x0e\xc3\xdd\xb6\xf8\x0e\x90\xb7\xd3\xed\xc2\x1e\x14\xfb\x1f\xa0\x0f\x30\xbd\x1a\x7c\x74\xeb\x0f\xcf\x23\xbf\x56\xa5\xf2\x6c\x3b\xd1\x98\xff\x9e\x65\x0e\x3d\x63\x51\xf3\x29\xbc\x1d\xc3\x19\x0c\x2d\xde\x6b\xcd\x88\xff\x6a\x8d\xc7\x7f\x3c\xeb\xdb\xf9\x1a\xd4\xe3\x4f\xc7\x17\xa8\x74\x4d\x42\xef\x9d\x90\x17\x3e\xf0\x47\x5e\x82\xc3\xfb\xff\x6f\x00\x00\x00\xff\xff\x0b\x8c\xb8\x75\xd1\x0b\x00\x00")

func templateHttpHelpersTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpHelpersTmpl,
		"template/http/helpers.tmpl",
	)
}

func templateHttpHelpersTmpl() (*asset, error) {
	bytes, err := templateHttpHelpersTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/helpers.tmpl", size: 3025, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpListTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x53\x51\x6f\xe2\x3c\x10\x7c\xef\xaf\x18\x59\x3c\x04\x04\xce\x7b\xa5\xef\xe9\x53\xf5\xb5\x52\xbf\xaa\xd7\x43\xea\xf3\x82\x97\xc4\xd7\xb0\x0e\x9b\x4d\x39\x2e\xe5\xbf\x9f\x4c\x29\x85\xd6\x92\x25\xc7\x9a\x9d\xd9\xec\x8c\x87\xa1\x9c\xa0\x4a\xb6\x6b\xf9\x1a\x2c\x56\x25\x1f\x53\xc9\x62\x79\x2f\xcb\x8a\xc5\xff\xa7\xd4\xd6\x98\x94\xfb\xfd\xd5\xd5\x30\x20\xf0\x2a\x0a\xc3\xd5\x66\x6d\xd9\xc4\xce\x1c\xf6\xfb\x2b\x00\x18\x86\x19\xb6\xd1\x6a\xf0\x6f\x63\x09\x18\xc1\x3d\xd2\xf2\x85\x2a\x76\xef\x70\x87\xd9\x11\xfa\x0e\x87\xf1\xba\x6d\xc8\x32\x1b\x53\x60\x75\xf0\x9f\x64\xc8\x1c\x59\xf4\xf8\x39\x6a\x5f\x2a\x5c\xff\x83\x05\x75\x8c\x91\xff\x37\xc9\x2a\x56\xfe\xa8\x70\x56\xa6\x24\x15\x63\x24\x19\x3b\xf2\x0f\x29\x70\x87\x33\xd9\xb2\xc4\x13\x53\xc0\x8a\x6d\x59\x73\x07\xab\xf9\xc4\xbe\xdf\xfb\x7c\x14\xff\x40\xeb\x4c\x89\x18\x58\x2c\xae\x22\x07\x2c\x76\x20\x54\xf1\x95\x05\xbd\x36\xb3\x96\x94\xd6\x6c\xac\x58\x69\x5a\x67\x96\x73\x85\x40\x46\x87\x3e\x49\x02\x94\xad\x57\xe9\x10\x0d\x96\x0e\x7a\xcb\x26\xb2\x98\x3f\x55\xac\x7a\x59\xa2\xa8\x31\xb9\x50\xbf\x25\x09\x0d\xeb\x18\xf7\xb1\xb3\x62\x8b\x3c\x42\xff\xc4\x5d\x9b\xa4\xe3\x67\x8d\xc6\x3a\x85\x62\x72\xbc\xdf\xf4\xdc\xd9\x18\xc3\x89\x35\xaf\x26\x4f\xa1\xf6\x4d\xaa\xfc\x73\xb4\xba\xf8\x43\xad\xff\x69\x1a\xa5\x2a\xdc\x9a\xad\x4e\xc1\x4d\xe1\xb2\x80\x1b\x8f\x2f\x2a\x37\xef\x95\xc7\x56\x2f\x1a\xf3\x3f\x7a\xd6\x5d\x71\x89\xff\x74\x3f\x54\xdc\xcd\xd3\x7d\xa2\x90\x5d\x70\x17\x19\x39\x5f\x65\x89\x1b\xaa\x58\xd1\x64\xe8\xa1\x0c\x56\x93\x81\x94\xa1\xbc\xe9\xa3\x72\x40\x12\x64\x06\xa4\x96\x95\x2c\x26\xf1\xdf\x88\x36\xc3\x00\x7f\x23\x76\x68\xeb\xab\x52\xee\xeb\x98\xa4\xf3\xeb\x57\x52\xb0\x1e\x76\xd2\x6f\x05\xe7\xc1\x6c\x5a\xd6\xf2\x90\xf6\x96\xaa\x28\x87\x1e\x5c\xfe\xb3\xd9\x47\x38\x4f\xc3\xf6\x77\xb2\x4a\x85\x3b\x1b\xd6\x1b\x5e\x78\x41\x0b\xbc\xa1\x6d\x7a\xa5\x26\x87\x4a\x59\x02\x2b\xe7\xc9\x67\x3b\xee\xc4\x0a\x47\xeb\xd4\x8b\xb9\x29\x1a\x96\x82\xbb\xf1\x17\x33\x98\xba\xdd\xaf\x2e\x89\xff\x9f\xb4\xab\xa9\x99\xa7\xdb\xf9\xfc\xf1\x32\x0b\xc5\x03\x6f\x2f\x6c\xca\xae\x7e\x40\x32\xe7\x14\xdb\x4f\xd6\xaf\xaf\xec\x74\xfa\x1b\x00\x00\xff\xff\x5b\x47\x55\x19\x12\x04\x00\x00")

func templateHttpListTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpListTmpl,
		"template/http/list.tmpl",
	)
}

func templateHttpListTmpl() (*asset, error) {
	bytes, err := templateHttpListTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/list.tmpl", size: 1042, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpReadTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x55\x4d\x6f\xe3\x36\x10\xbd\xe7\x57\x4c\x09\x1f\xa4\xc0\xa6\x4e\xbd\x04\xd8\x4b\x37\xe9\xc6\x40\x9b\x6e\x37\x46\x73\xa6\xcd\x91\xc4\x86\x26\xe5\xe1\x28\x5e\xd7\xf5\x7f\x2f\x46\x52\x1c\xcb\x4e\xdb\x4b\x08\x08\x16\xcd\x37\x6f\xe6\xcd\x07\xb5\xdf\x17\xd7\x50\x45\xde\x35\x78\x03\x18\xb8\x8a\xda\xc5\x02\x03\xcb\xb3\x2a\x2a\x0c\xfa\x0b\x99\xa6\x86\xeb\xe2\x70\xb8\xba\xda\xef\xc1\x62\xe9\x02\x82\xaa\x99\x9b\x82\xd0\x58\x05\x87\xc3\x15\x00\xc0\x7e\x3f\x83\xad\xe3\x1a\xf0\x3b\x63\xb0\x30\x01\xf5\xd5\xac\x9e\x4d\x85\xaa\x87\x2b\x98\x0d\xd0\x1e\x0e\x8c\xeb\xc6\x1b\x16\x36\x34\x16\x49\x81\x7e\x23\x03\xe1\x18\x76\x6e\xdd\x44\x62\x50\x95\xe3\xba\x5d\xea\x55\x5c\x17\x55\x9c\xad\x6a\x57\xc8\xf3\xf2\xa3\x82\x4e\xc8\xa2\x76\x09\x5c\x82\x80\x68\xd1\x42\x19\x09\x12\xb7\x8d\xb3\xf0\x38\xff\x03\xa8\xf5\x38\xe8\x18\x3c\x4c\x9a\xe7\x0a\x6e\x3e\xc1\xd2\x24\x84\x89\xfe\x1c\x43\xe9\x2a\x3d\x04\x7d\x12\x09\x99\x50\x21\x4c\x82\x60\x27\xfa\x21\x5a\x4c\x70\xa2\xa4\x28\xe0\x1b\x1a\x0b\x25\xf2\xaa\xc6\x04\x5c\xe3\x91\xfd\x70\xd0\xf2\x1a\xf4\x83\x59\x0b\x25\x38\x8b\x81\x5d\xe9\xd0\xc2\x72\x07\x06\x2a\xf7\x82\x01\x5a\xf2\xb3\xc6\x90\x59\x23\x23\x41\x49\x71\x2d\x2c\xa7\x1e\xac\x61\xd3\xc5\x69\x82\x05\xc2\x60\x91\x12\x38\x06\x8e\x9d\xbf\x95\x77\x18\x58\x1f\x2d\xca\x36\xac\x20\xab\xe1\x7a\xe4\xfd\xde\x04\xeb\x91\xf2\x2e\xde\x6c\x0b\x52\x15\xfd\x0d\x53\x13\x43\xc2\x27\x72\x8c\x34\x05\x82\xeb\xe1\xff\x4d\x8b\x89\x73\xd8\x1f\x59\x65\x79\xc9\x42\xad\x7d\xac\xf4\x93\xe3\x3a\xfb\xcb\x34\xfa\x91\xc9\x85\x2a\x53\x6b\xe4\x3a\x5a\x35\x05\x25\x0e\x54\x9e\x8f\x2c\xa5\x41\x4e\x4b\xee\x1b\xa4\xa2\xeb\x23\x67\x67\xa2\x79\xd6\x92\x57\x92\xe7\xd9\x6b\x91\x4e\x12\xf0\x99\x50\xec\x44\xec\xa6\x45\xda\x89\xf2\x2e\xe3\xc7\x7c\x1f\x65\x8e\x4c\x37\x7d\xbc\x43\x82\x46\x38\xfd\xbb\x10\x65\xb9\x7e\xaa\x91\x30\x3b\x39\xfb\x1b\x7c\xdc\x22\x09\x66\x7e\x2b\x07\xae\x94\xb3\xf9\xad\xbe\x37\xe9\x4b\x5c\xec\x1a\xb1\xef\x0d\xe6\xb7\x7a\xd8\x67\xce\xe6\xd2\xb8\x3e\xc9\xce\xd9\x63\x13\xe7\xf9\xd5\x45\x26\xfa\x51\xb1\x15\xa6\x45\xfc\x25\x1a\x2b\xba\xd5\x68\xa0\xce\x12\x70\x67\x2a\x24\xf0\x02\xed\xcc\x80\x6b\xc3\x60\x08\x81\x70\xd3\x3a\x42\x0b\x31\x80\x30\x40\x6c\x90\x0c\xbb\x18\xf4\x05\xd1\x66\xbf\x07\x7d\x17\xb8\x93\x7e\xee\x49\xe2\x3a\x19\xbb\xd7\x85\x53\x40\x22\xc9\xe3\x46\xff\x16\xfc\x2e\x23\x99\x15\xc6\xef\x9c\x9d\x95\xd8\x95\x1d\xf2\x87\x4f\x10\x9c\x3f\x6b\x1c\x59\x69\xeb\xa4\x62\x97\x07\x2b\x69\x6d\x29\xd0\x3c\x3d\x44\xfe\x39\xb6\xc1\x66\x48\x94\xdf\x5c\x20\x65\xad\x53\x37\xb7\x89\xc9\x35\x77\x81\xef\x88\x22\x75\xf0\x77\xd1\x5e\xcf\x43\x19\xb3\x75\xaa\xa6\x20\xdd\x3a\x0f\x9c\xa9\x63\xed\x86\x5e\x50\x53\x70\x36\xef\x01\x6f\x7c\xef\x13\xf6\xe3\xa7\x8f\x81\x6e\xa7\x40\x53\x09\xea\x12\x3e\xd6\xf5\xe8\x42\xd5\x7a\x43\x1f\x28\xad\x07\x7c\xb8\xb6\x9f\x8c\x1d\xe6\xff\xbf\xd4\x59\x2c\x4d\xeb\xf9\x7d\x25\xaf\xb1\x29\x94\x9f\x7e\x56\x5d\xa8\x60\x34\x66\xcf\xb8\x34\x4b\xb9\x17\xbb\x3b\xcf\x2e\xd5\xc7\xca\x98\x07\x46\x0a\xc6\x3f\x22\xbd\x20\xf5\x46\xbd\x9e\xe0\xfc\xa5\xe5\xe5\xdc\x11\x72\x4b\xe1\xea\xdf\x41\x43\x73\xa9\xf7\x55\xf5\x61\xa0\xfd\x7f\x59\xe3\x60\xd0\xa4\xdd\x9f\x29\x06\xfd\xab\xa1\x54\x1b\xbf\x88\xf7\x8b\xc5\xd7\xf1\x4d\x9d\x3d\xe0\x76\x74\x9d\xc9\x9d\xfb\x0a\xc9\x30\x9f\xc2\xf6\x8d\xf4\xfc\xab\x7a\x7c\xfb\x27\x00\x00\xff\xff\x60\xc0\x0a\x6b\x02\x08\x00\x00")

func templateHttpReadTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpReadTmpl,
		"template/http/read.tmpl",
	)
}

func templateHttpReadTmpl() (*asset, error) {
	bytes, err := templateHttpReadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/read.tmpl", size: 2050, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpRelationsTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\xc1\x6e\xe3\x36\x10\xbd\xe7\x2b\xa6\x42\x0e\x52\x60\xd3\xf7\x00\x7b\xe9\x26\xdb\x35\xb0\x4d\xd3\x8d\x8b\x9c\x19\x73\x24\xb1\xa1\x87\xf2\x70\xb4\x8e\xeb\xd5\xbf\x17\x94\x64\xc7\x8e\x65\xa3\x28\x12\x02\x41\xe2\xf0\xcd\x9b\xe1\x9b\xc7\xa1\x37\x9b\xc9\x15\x14\x5e\xd6\x15\x5e\x03\x92\x14\x5e\x59\x3f\x41\x92\xf8\x33\x9f\x14\x48\xea\x37\xd6\x55\x09\x57\x93\xa6\xb9\xb8\xd8\x6c\xc0\x60\x6e\x09\x21\x29\x45\xaa\x09\xa3\xd3\x62\x3d\x85\x04\x9a\xe6\x02\x00\x60\xb3\x19\xc3\xca\x4a\x09\xf8\x22\x48\x06\x2e\x21\xb9\xd7\xf3\x67\x5d\x60\xd2\xc5\x24\x30\xee\xa1\x1d\x1c\x04\x17\x95\xd3\x12\x29\x51\x1b\xe4\x04\xd4\x2b\x19\x44\x8e\x98\xb9\xff\x78\x59\x3d\x17\x70\xfd\x09\x9e\x74\x40\xb8\x54\x9f\x3d\xe5\xb6\x50\x7d\x86\xbd\x30\xd6\x54\x20\x5c\x52\xc4\x5e\xaa\x3b\x6f\x30\xc0\x61\xda\x1e\x81\x2d\x82\xd4\xad\x29\x0e\x21\x71\x4d\x26\x6d\x4e\x54\x77\x7a\x81\xf0\x13\x2a\x1d\xe6\xda\x41\xd3\x40\x8e\x32\x2f\x31\x80\x94\xb8\x2b\xab\x69\xd4\x1e\xba\x69\x40\x8b\xe8\x79\x89\x06\xc4\x0f\x01\x69\x0b\x7c\x9b\xd3\x1a\x24\xb1\xb9\x45\x03\x4f\x6b\xd0\x50\xd8\x1f\x48\x50\xb3\x1b\x57\x9a\xf5\x02\x05\x19\x72\xf6\x8b\x96\xd4\x68\xd1\xad\x1a\x9a\x0c\x30\x92\x41\x0e\x60\x65\x9b\x73\xee\x2c\x92\xa8\x83\x14\x79\x4d\x73\x48\x4b\x38\x28\xe2\xab\x26\xe3\x90\xb3\x13\x27\x4e\x57\x10\xbb\xa7\xbe\x63\xa8\x3c\x05\x7c\x64\x2b\xc8\x23\x60\xb8\xea\xff\xbf\xac\x31\x48\x06\x9b\x83\x54\x71\xb9\x28\x71\xa9\x9c\x2f\xd4\xa3\x95\x32\xfd\x47\x57\xea\x41\xd8\x52\x91\x26\x0b\x94\xd2\x9b\x64\x04\xc9\x70\xda\x24\xcb\x8e\xf8\xa2\xc5\xf6\x4d\xe3\x2a\xe4\x49\x6b\x47\x6b\xc6\x51\x97\x71\xcd\x2e\x89\xcd\x1f\x6f\x9d\xf3\x46\xe0\xcf\x8c\x31\x36\xea\xb3\xac\x91\xd7\x51\xac\xb6\xa3\xbb\x36\xed\x2a\x79\xc6\x27\xfd\x74\xdc\x4c\x1b\xf6\xd5\x7b\x85\x1d\x65\x5b\x76\x87\xef\xdb\x70\xa0\xb8\xfa\x33\xe6\x4e\x33\xf5\x58\x22\x63\x7a\xc0\xe7\xfc\x0a\x39\x62\xa6\x37\xa9\x35\x59\xd6\x61\x4f\xb4\x66\x58\x22\x9b\x47\xf0\x5f\x64\x97\xf5\x91\xc9\xf6\x71\xdd\x6d\x8d\xf6\x9f\xf9\x6f\x5e\x9b\x18\x35\x5b\x57\x08\x09\xa3\x36\xc9\xa9\xd0\x5e\xca\x5b\x5d\x20\x83\x8b\x71\x2d\x07\x48\xa9\x05\x34\x23\x30\x2e\x6b\xcb\x68\xc0\x13\x44\x26\xf0\x15\x72\x3b\x2d\xd4\x49\xc2\xe5\x66\x03\xea\x96\xa4\x3d\xed\xb9\xa2\xfb\xb1\x30\xb4\x8d\x23\x40\xe6\x28\xfb\x52\xfd\x41\x6e\x9d\x72\x1c\x13\x82\x2f\x92\x0e\x98\x29\x2e\x9b\xb7\x11\xbf\x7c\x02\xb2\x6e\xc0\xc0\xdb\x15\x56\x36\x7a\xe4\x34\x60\x1e\xef\x61\xec\xf3\x34\xdc\x79\xf9\xe2\x6b\x32\x29\x32\x67\xd7\x27\x23\xe2\x5a\x84\x76\xa4\x05\x61\x5b\xdd\x92\xdc\x32\x7b\x6e\xc3\xce\x46\x39\x35\xa5\xdc\xa7\x8b\x50\x8c\x20\xde\xa8\x29\x49\x9a\x74\x1e\x9a\xde\x6c\x2d\x96\x8c\xc0\x9a\xac\x03\xbc\xf2\x9e\x27\xee\x66\x88\xda\x1d\x60\x35\x02\x1e\xb5\xd5\x51\x11\xd4\x8c\xed\xe2\x9e\x31\xb7\x2f\x91\xaa\x27\xcd\x46\x90\x20\xc9\x35\x0c\x5d\xd7\x61\x71\x1e\x2c\x15\xb5\xd3\xfc\x81\xfa\x74\xc0\x0f\x13\xe8\x57\x6d\xfa\xa1\xf7\x6e\x12\x19\xcc\x75\xed\xe4\xbc\x1c\xdb\x83\x25\x18\x7f\x75\x73\xcb\x52\xd1\x8f\xad\x78\x73\x8f\x66\x57\xfb\x58\x98\xa7\xe4\x48\x88\x37\x40\xf5\x8e\xf2\x4c\x49\x90\x49\xbb\x07\xe4\x1f\xc8\x5d\x70\xa7\x13\x59\x77\x9a\xe1\xf4\xb0\x61\x94\x9a\x69\x70\x7b\x38\xa8\xbf\x21\xc9\x19\x61\xba\x5a\xd1\x1c\x2b\x73\xa0\x01\xaa\x3d\x8e\xe9\x4d\x7c\xbd\xea\xb9\x7c\xb1\xe8\xe2\x14\x3a\xa1\x07\xea\xb0\xfe\x3b\x78\x52\xbf\x6b\x0e\xa5\x76\x33\xff\x75\x36\xbb\x3f\x7c\x3f\xd3\x3b\x5c\xbd\x2d\xaf\x69\xbe\x63\xb4\x56\x87\x4b\x31\x1b\xc1\x6a\x78\xc2\xa3\x0b\xff\x73\xb2\x3b\x1b\xe4\x7d\x26\x7b\x64\xfa\x88\xc9\x7e\x72\x7f\xf8\xe5\xaf\x74\x61\xa9\x2d\x21\xd9\x9d\x72\xf0\xf5\x87\xff\x60\x8c\x9f\x50\xb9\x9a\xbb\x2f\x7a\x43\x0e\xd1\x0b\x5f\x93\x24\x23\x70\x48\x29\x86\xec\xdd\x0d\xf0\xcd\x06\x79\x35\x40\x38\xe3\x80\xe3\x67\xf0\xe0\x4b\xee\xde\xfe\xeb\xa7\xdd\x5f\xff\x06\x00\x00\xff\xff\x51\x9e\x8a\x17\xfd\x0b\x00\x00")

func templateHttpRelationsTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpRelationsTmpl,
		"template/http/relations.tmpl",
	)
}

func templateHttpRelationsTmpl() (*asset, error) {
	bytes, err := templateHttpRelationsTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/relations.tmpl", size: 3069, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpRequestTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x94\x4f\x6f\xdb\x30\x0c\xc5\xef\xfd\x14\x0f\x82\x0f\x49\xb0\xca\x3b\x07\xd8\xa1\x58\xbb\xad\xc0\xb6\x16\x6b\x76\x1a\x06\x94\xb1\x69\x5b\x8b\x23\xb9\x92\xd2\x36\xf0\xf4\xdd\x07\xd9\xce\x9f\xa6\x29\xd0\x61\x3b\x04\x88\x08\xf1\xf1\xf1\x47\xca\x6d\x8b\x9c\x0b\xa5\x19\xa2\xf2\xbe\x49\x2d\xdf\xad\xd8\x79\x81\xd3\x10\x4e\x00\xa0\x6d\xd3\x09\x4a\xe3\xd7\x0d\x4f\xc1\xda\x97\x46\x2a\x93\xb2\xf6\xf1\x97\xa5\x25\x6b\xf9\xd1\x52\x53\x61\x92\x6e\x33\x4e\xf1\xa0\x7c\x05\x7e\xf4\xac\x73\x24\x10\xd7\x94\x2d\xa8\x64\xd1\x17\xd9\x89\xf7\xd7\xe1\x79\xd9\xd4\xe4\xa3\x07\xa6\x9c\xad\x80\xc4\x56\x0c\x51\x23\x84\x93\xcd\xd1\x92\x2e\x19\x89\xc6\xf4\x1d\x12\xf9\xd5\xe4\xec\xf0\xb2\x5c\xdd\xb0\x4d\x9f\x76\xb6\xb1\xa5\x21\xce\x32\xaf\x8c\x16\x10\x99\x65\xf2\x2c\xfe\x5d\x68\xd5\xe4\xfb\x42\x91\xc5\xe0\x7f\xaf\x93\x7d\xe8\xc7\x84\x5f\x8f\x7e\xb6\x6e\x78\x47\x3e\x4d\x71\x4d\xeb\xda\x50\x0e\x53\x80\x62\x0b\x73\x72\x8c\x44\xbe\x37\xba\x50\xa5\x1c\xe6\x80\x10\x64\xdb\x46\x7a\xb4\x8c\x07\x74\x87\x9b\xcc\x34\x2c\xfb\x4e\x62\x70\xb0\x23\x3b\xe9\x68\x02\xfb\x39\xcf\x53\x7e\xa3\x21\x97\x51\x8d\x10\xbe\xf5\xa9\x70\xde\xae\x32\x8f\x76\x0f\x6a\x3a\xc1\xec\xea\xfc\x6a\x8a\x4f\x74\xaf\x74\x09\xaa\x6b\x34\x46\x69\xcf\xd6\xa1\x62\xcb\x70\xcc\x4b\x07\x6d\x3c\xac\x2a\x2b\x2f\xf1\x85\xd6\x73\x86\xaf\x94\x43\x46\x1a\x73\x46\x6e\x34\x43\x69\x90\x36\xbe\x62\x8b\x07\x5a\x43\x4a\xb9\x23\xb1\x61\x3f\x2c\x4b\xd1\x2f\xcb\x07\xc5\x75\xfe\x64\x5b\x36\xf7\x54\x01\x63\x31\xd2\x7c\xd8\xd4\x66\xa0\x63\x8c\xa2\xa3\xa4\x90\x97\xcb\xe5\xca\xd3\xbc\xe6\xf1\xa1\xd0\xb0\x35\x49\x21\x6f\xba\xbe\xbb\x72\x91\xe4\xa4\x8f\x76\xc3\x0a\x01\xb7\xbf\x9c\xd1\x53\xd1\xb6\x50\x3a\xe7\x47\x8c\x5c\x53\x2b\x8f\x91\xa7\xf2\xb3\x31\x8b\x55\xb3\x93\x98\x51\x09\x11\xaf\x8b\x31\xc4\x1b\x31\xc6\x5b\x84\x20\x8e\x54\x1d\x9e\xdc\x3d\xd5\x2a\xa7\xe8\x7c\x46\xa5\x8b\x3a\x67\x5a\x1b\xdf\x45\x9c\xbc\xa8\x17\x47\xe6\x3c\xe4\x70\xe7\x28\x3e\x3c\xb1\x5d\xd5\xdb\x67\xa0\x86\x15\x3e\x0c\x9d\x1e\xe7\xce\x3d\xf7\x8b\xbc\xe4\x23\xd8\x91\xf0\x01\xa9\x88\xa4\x88\xe1\xef\x5a\xdd\xad\x22\xac\x88\x8e\x6b\x17\xff\xfe\xf8\xb9\xf5\xd5\xe7\x46\x9e\xf2\xf2\xfc\x6f\xb8\xf2\xeb\xb9\xbe\xc8\x94\xff\x17\xd3\x03\x9e\xfb\x9f\x88\x3f\x01\x00\x00\xff\xff\x91\x47\x47\x12\x97\x05\x00\x00")

func templateHttpRequestTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpRequestTmpl,
		"template/http/request.tmpl",
	)
}

func templateHttpRequestTmpl() (*asset, error) {
	bytes, err := templateHttpRequestTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/request.tmpl", size: 1431, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpResponseTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x51\x6f\xdb\x36\x10\x7e\xef\xaf\x38\x08\xee\xe0\x04\xb1\x84\xbe\x06\xc8\x43\xb1\x76\x45\x81\xa2\x18\x9a\x6c\x2f\x46\x80\x31\xd2\x49\x26\x22\x53\x8a\x48\x37\xd9\x14\xfd\xf7\x81\xa4\x44\x53\x12\x25\x4b\xb6\x83\x3d\xec\x21\x40\x68\x91\x47\xde\xf7\x7d\x77\xbc\x63\x59\x42\x84\x31\x65\x08\xde\x46\x88\x3c\x28\x90\xe7\x19\xe3\xe8\xc1\xaa\xaa\xde\x01\x00\x94\x65\x70\x09\x49\x26\xfe\xce\xf1\x1a\x90\x89\x24\xf3\x69\x16\x20\x13\xf2\x2f\x0c\x12\x64\xfe\x97\x82\xe4\x1b\xb8\x0c\xcc\x8a\x15\x3c\x53\xb1\x01\x7c\x11\xc8\x22\x58\x80\xf7\x3b\x09\x1f\x49\x82\x9e\xde\x65\x6f\x5c\x4f\x07\x81\xdb\x3c\x25\x42\x1e\x02\x49\x84\x85\x07\x3e\x18\x63\x20\x6d\x54\xd5\xbb\x66\x58\x10\x96\x20\x2c\x18\x5c\xdf\xc0\xc2\xff\x9e\x45\xc8\x61\xd8\x5c\x9a\x63\x11\x74\x5c\x6b\xce\xc5\xc0\xfb\x18\x0a\x9a\x31\x0f\xbc\xb0\x40\x22\xd0\x3b\x83\xa5\x02\x49\x74\x0e\x3b\xbb\x3c\x3a\xd3\x89\x52\xca\x85\x07\x16\x3b\x35\xa2\x16\xb6\xb6\x0e\x9c\x76\x67\xc8\x41\x7e\xbb\x0d\xb3\x1c\xf7\x92\x08\x02\xf8\x51\x9b\x82\x2c\x06\x22\x3d\x79\x20\x1c\x61\xe1\xff\x9a\xb1\x98\x26\x7e\xad\x10\xa8\x2a\xbf\x2c\x25\xaf\x64\x2b\x07\xa0\x06\xca\x9a\xaf\xfd\x91\x3f\x16\xf8\xb4\x43\x2e\x7c\x65\x5b\x6e\x07\xf6\x9a\xfe\x92\x57\xc8\x09\x0f\x49\x0a\x55\x65\x8e\x51\x96\x40\x63\xc0\xa7\xee\x5c\x83\xd6\xfa\xde\xe0\xc3\x45\xb1\x0b\x05\x94\x16\x11\xab\x03\x4c\x04\x31\xc5\x34\xe2\x1e\x2c\xda\x04\xae\x6a\xfd\x62\x94\x20\xbf\xcb\xbe\x65\x24\x82\x85\x7f\x27\x7d\xe8\xf9\x69\x96\x4d\xdc\x52\xd9\xb4\x62\xa7\x43\xb7\x1c\x9a\x30\x5a\xc1\x42\x3a\x2a\x83\x68\x04\x03\x35\x39\xde\xb1\x10\xbe\xe3\xf3\x6c\x8c\x97\x0d\xca\x7a\xab\x16\xa4\x97\x53\x15\x70\x51\xdb\x60\x99\x30\x76\x2e\x8d\x99\x23\x78\x6f\x41\xb3\x40\x91\x2a\x0c\xe6\xd0\x21\x17\x5a\x5e\xb5\x68\x2a\xa4\xb5\x2d\x79\xc4\xe5\xec\xa3\x5d\x41\x8a\x6c\x89\x17\x17\x2d\x83\x71\x56\x00\x95\x46\x6b\xdd\x58\x0e\xf4\x55\xa5\xdc\xe9\x9c\x68\xae\x80\x02\x8e\x42\xc8\x1c\xfc\x52\xe7\x12\x5f\xa6\x92\x10\x39\xcf\x0a\x0f\x3c\x5c\xd3\x7b\xff\xb3\x56\x9a\xf7\x0d\x7f\x62\xea\xc1\x07\xd7\x9e\x1d\xe5\xb5\x40\x5a\xd3\x7b\xb8\x01\x1d\x56\x7d\x7f\x4e\x89\x30\x37\x2e\xb3\xa3\xed\x18\xe0\x3a\x91\x37\x11\x8b\x6a\xd0\xff\xc1\x03\x4d\xc2\xa5\xa1\x71\xd0\x4a\x73\x53\x0c\x4e\xf0\xbe\x14\xd9\x2e\x97\x00\xd7\x50\xe9\xf1\xf0\xfc\x8e\x4a\xdc\x5b\x1f\xe4\x6a\x4c\xc3\x7a\x26\x28\xfd\xf9\xb7\x4a\x3e\xbf\x49\x6f\xa1\xaa\xae\xdd\x1f\x5e\x21\xcd\x9e\xb1\x80\xaa\xfa\x70\x35\x9b\x9a\x77\xc3\xa3\x02\xc5\xae\x60\x50\xb4\x13\x6d\xca\xd1\x95\xb7\xc7\x1d\x3b\x57\x60\x1e\x8c\xca\x01\x57\x6b\x57\x7e\x99\x9d\xb0\x9c\x99\xc8\x09\xf2\xe9\x8a\x1d\x55\xeb\x1c\xa5\xb6\x20\xeb\xef\x35\xc0\xcf\x94\xf4\x7a\x36\x59\x0e\xf0\x34\x72\xa9\x4f\xaf\xe4\x02\x5d\x9e\xce\x28\xe7\x54\xb6\xb4\x8a\xfb\xc9\x25\x68\xaf\x26\xb6\x68\xfa\xc8\x58\x26\x88\xfc\xca\xfd\xcf\xe9\xe3\x6d\xb8\xc1\x2d\xf1\x7f\x20\x89\xf4\x9c\x79\xe5\xa9\xb9\x0a\x4e\x70\x6b\x05\x0b\x41\x12\xdd\x54\x7c\xfd\x54\x93\x75\x47\x12\x1d\x0c\xaa\x9f\x91\x13\xb8\x9e\x61\x9f\x5f\x31\xca\x9d\x2b\x28\x8b\xf0\xa5\x5e\xa7\xcc\x5a\xe1\x25\x77\xbb\x51\x57\x86\x5d\xcd\x58\xb4\xd6\x75\x0f\x62\xc4\x6f\xb1\xa0\x24\xa5\xff\xa8\x1d\xb5\xa5\x0e\x82\xb0\x6c\x6b\x1f\x5e\xe5\xf5\x4a\x59\x72\x9b\xd2\x10\x2f\x9a\x90\x36\x9e\x35\xfa\x6c\x2a\x34\x75\x38\x9a\xa6\xe4\x21\xc5\x3f\x49\xba\xc3\x7e\x99\xf5\xf5\x93\x06\xcd\x2c\x52\x25\x99\x32\x89\x8c\x53\x41\x7f\xca\x6f\x7f\x35\xbe\xe9\x7f\xdd\x8e\x99\x80\x8a\x35\x9c\x1a\xc2\x6e\x8d\x65\x08\x89\xdf\x82\x8e\x78\x16\x19\xe3\x84\xc4\xc7\xd1\x11\x0f\x90\x11\x1f\xa0\x22\x76\x11\x11\x1f\x43\xc3\xec\x4e\xb0\x29\x75\x9c\x91\x96\x50\xb1\xd9\x3d\xf8\x61\xb6\x0d\xb6\x84\x73\xc4\x34\xdc\x04\x98\x3e\xaa\xfc\x57\x97\x5f\xed\x90\x73\xa5\xcc\x96\xba\xd4\xf7\x3f\x18\x7d\x52\x30\x9c\xa9\x27\x6b\x32\x94\xb6\xae\xb0\x34\xb9\xc9\xdf\x27\x20\xc7\x05\xa0\xef\xd8\xda\x95\xb7\xe9\xd0\xc0\xe8\xdb\x06\xe7\xce\x50\xe9\xb7\x28\x9d\x9f\x25\x4d\x19\x71\x52\xb2\x3c\x67\x66\xb2\x03\xcc\x91\xa2\xae\xdb\x8f\x00\xfa\xf6\x36\x6d\x62\x6f\xfa\x55\x57\xdc\x73\x52\xce\xf9\xe2\xbb\x23\x8d\x7e\xb0\x8f\xba\xd5\x9d\x7c\x35\x24\x97\x66\xb8\x3a\x22\x8a\xc7\x95\x30\x18\xcc\x68\x82\xb9\xf3\xca\xd3\xf4\xc5\x9d\xa0\x6d\xd3\x3b\x52\x0a\x59\x78\xa8\x12\x56\xe6\x82\xeb\xa6\x4d\xec\xf4\xbd\x6f\x17\xed\x33\x22\xfe\x84\xa8\x77\x50\x09\xfd\x6e\xd0\x55\x4f\x9f\x56\x4b\xf7\xc1\xe8\x4d\xe9\x82\xd3\x9f\xb0\x2f\xa1\x97\x79\x41\x99\x88\xc1\x7b\xcf\xfd\xf7\x56\x01\x6e\xf4\xdc\x27\xbc\xfd\xbc\x61\xfb\xbe\x17\x74\xa7\x8f\x3a\x52\x38\xea\x19\x66\x7d\xff\xbf\xd2\x8f\x7e\x44\x1a\x4b\x98\x8e\x1b\xd7\x7a\x72\x52\xcf\x4d\x03\x78\x6a\x8f\x66\xda\x76\xe0\x3e\x1d\x99\x63\x9a\xc9\x56\x6a\x73\x1a\x30\xfd\xf3\xa1\x06\xb1\xad\xee\x35\x7d\x1f\x99\xa7\xaf\x09\x42\x6f\x63\x78\xe1\xde\xac\xee\xd5\x97\x24\xea\xcc\x87\x0f\xfd\x15\xd3\xfa\xf9\x23\xa2\x65\xed\xa2\x7c\xff\x44\x37\xf0\xe6\xf8\x76\xf1\x03\xf3\x94\x32\xf1\x40\x63\xaf\x74\x43\x3d\xf7\x7f\xf1\xc6\x31\x92\x9b\x61\x4a\x7e\x86\x83\x2a\x3e\x8b\x7e\xcf\xc1\xd9\x71\x6f\x26\x65\x09\x8e\x78\x69\x95\x49\xf6\x89\x46\xdf\x52\x46\xca\xa8\x7f\x03\x00\x00\xff\xff\xdd\x31\xe9\xb8\x1d\x1d\x00\x00")

func templateHttpResponseTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpResponseTmpl,
		"template/http/response.tmpl",
	)
}

func templateHttpResponseTmpl() (*asset, error) {
	bytes, err := templateHttpResponseTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/response.tmpl", size: 7453, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5f\x6f\xdb\x36\x10\x7f\xcf\xa7\xb8\x09\x7e\x90\x32\x9b\xda\x1e\xf6\x52\xa0\x18\xb6\x26\x6d\x0d\xac\x69\x57\xa7\xed\x33\x2d\x9e\x24\xae\x34\xa9\x50\x27\xbb\x9e\x97\xef\x3e\x1c\x29\x3b\x96\x23\xb7\xe9\xc3\x46\xc0\x88\xa5\x1c\xef\x7e\xf7\xbb\xbf\xde\xed\xf2\x4b\xa8\x1c\x6d\x1b\x7c\x06\x68\xa9\x72\x42\xbb\x1c\x2d\xf1\xa7\xc8\x2b\xb4\xe2\x95\x97\x4d\x0d\x97\xf9\xfd\xfd\xc5\xc5\x6e\x07\x0a\x4b\x6d\x11\x92\x9a\xa8\xc9\xbb\x46\x49\xc2\x04\xee\xef\x2f\x00\x00\x76\xbb\x19\x6c\x34\xd5\x80\x5f\x08\xad\x82\x09\x24\xef\x64\xf1\x59\x56\x98\xc4\x0b\x09\xcc\x7a\xd1\x28\x0e\x84\xab\xc6\x48\x62\x7d\x28\x15\xfa\x04\xc4\x83\x32\x60\x1d\xfd\x93\x5e\x35\xce\x13\xa4\x10\x10\xdf\xd6\xba\x05\xdd\x82\x45\x54\xa8\xa0\x74\x1e\x5a\xea\x1a\xad\x60\x31\xff\x08\xbe\x33\x18\x01\xef\x2d\x25\x95\xa6\xba\x5b\x8a\xc2\xad\xf2\xca\xcd\x8a\x5a\xe7\xfc\x59\xff\x92\x9c\x13\x69\x8c\xdc\x56\xde\x75\x56\xe5\x6b\x69\xb4\x92\xe4\x7c\xbe\xfe\xf9\xa7\x78\x21\xbb\xd8\x43\x9c\x34\x9f\x2b\x78\xf6\x1c\x96\xb2\x45\x98\x88\x17\xce\x96\xba\x12\xbd\xd7\x47\xae\x78\x69\x2b\x84\x89\x65\xd9\x89\xb8\x71\x0a\x5b\x38\x02\x98\xe7\xf0\x21\x70\x09\x91\xd2\x16\x24\x54\x7a\x8d\xf6\x60\xe3\xfe\x5e\xf0\x57\x2b\x6e\xe4\x8a\x15\x83\xb4\x0a\x5a\xb9\xc6\x16\xa8\x46\x28\x6a\x36\xd0\x02\xb9\xf0\xa8\x24\x49\x86\x24\x0e\x16\xca\xce\x16\x90\xd6\x30\x50\xf2\x5a\x5a\x65\xd0\x67\xbd\xf1\x74\x03\x1c\x25\xf1\x1e\xdb\xc6\xd9\x16\x3f\x79\x4d\xe8\xa7\xe0\xe1\xb2\x7f\x7f\xd7\x61\x4b\x19\xec\x0e\x6a\xf9\x18\x76\xaa\x16\xc6\x55\xe2\x93\xa6\x3a\xfd\x5b\x36\x62\x41\x5e\xdb\x2a\x4d\x56\x48\xb5\x53\xc9\x14\x92\x68\x22\xc9\xb2\xc1\x5d\x4e\x99\xe3\x24\x30\x0d\xfa\x3c\xe4\x96\x56\xb3\xd2\xbb\xd5\xac\xf3\x26\x61\xe2\x38\x73\x06\x57\xf3\x1c\x5e\x21\x05\x77\x1b\xd7\x52\xf0\x59\x0c\x24\xd6\xd2\x83\x1a\x7a\x1c\x51\xf4\x8e\x5c\x3c\x11\x8a\xc2\xc2\x29\x9c\xf9\x78\x6b\xb6\x74\x6a\x9b\x3c\xc6\xc3\xf7\x75\x19\x72\xb2\xfd\x18\x73\x46\x3b\xcb\xd0\x93\x87\x3a\x39\xc9\xf9\x07\x1b\x7d\x96\x9d\x5a\x09\x37\xb8\x0e\xc6\xdc\x5f\xc8\x35\x1e\xc2\x3d\x74\x7d\x19\x63\x52\x18\x8d\x96\x86\x99\x23\x22\x07\x6f\x2d\xce\xaf\xd2\xdd\x8e\x31\x4f\xac\x98\x5f\x89\xd7\xb2\x7d\xe5\x6e\xb7\x0d\x46\xab\xf1\x65\xff\x9c\x6a\x95\x31\x12\xd3\xf2\x93\x56\x87\xea\x3c\x0d\xe7\x3e\xd3\xcb\x90\xe9\x56\xbc\xd4\x68\x54\x3b\xa8\xfb\x23\x61\xe6\xcb\x11\x4c\x4a\x31\x5f\xad\x3a\x92\x4b\x83\xa3\xa2\x7c\x74\x09\x2a\x78\x52\x72\x76\x75\x05\x05\xd5\x5c\x0a\x3f\x3c\x07\xab\xcd\x49\x56\x0e\xd8\x10\x0b\xa4\xb1\xab\xe9\xe5\xb8\xca\x2c\xf6\x19\x72\xca\xc1\x0c\x36\xb5\x24\x90\x4b\xd7\x11\xb4\x46\x17\x08\x65\x74\x8a\xf8\x7d\xcd\x41\x28\xba\x96\xdc\x0a\x56\xd2\xb7\xb5\x34\x06\x7d\xfb\xeb\xb0\x03\x1d\x9f\x51\x26\xf6\x31\x7e\xda\xeb\x9e\x64\xec\x49\xbe\x56\x5c\xfb\x63\xc4\x1d\x48\xc3\xef\x22\xad\x4f\x0b\x14\x1f\xac\xbe\xeb\xce\xc7\x24\x92\x1b\xf5\xbf\xe9\x28\x64\xfc\x02\xe9\x88\xd9\x53\xbb\xd9\x39\x7b\x21\xb5\xbe\xc7\xce\x0b\x83\xd2\xb3\xa5\xec\xe4\x1f\xbf\xa9\x10\xda\x71\xfb\x42\x88\x73\x10\x66\xc7\x03\xe7\xf8\x3c\x29\x2a\x5c\x8f\xe4\x3c\x82\xb6\x23\xed\x97\x0f\x4e\x01\xbd\x0f\xd3\x42\x70\xe9\xa6\x9e\xe7\x05\xe1\x17\x4a\x4f\xba\xa2\x2e\x83\xe4\xd9\x10\xb5\x1b\x4d\x45\xcd\x32\x22\xe5\xd9\x7d\xda\x91\xf7\xa7\xe0\xa9\x74\xc9\x1d\xe0\xc6\xd1\x4b\x9e\x66\xd7\xde\x3b\xff\xec\x2c\xc7\x46\xcc\x6d\xe9\xd2\xe4\xa8\x61\xfc\x03\x9f\x71\x29\x97\x9c\x32\x5c\xaa\x25\x6b\x49\xa6\xc0\x4d\x7e\x6e\x69\x2f\x3a\xbf\xda\xb7\x97\x64\x0a\x5a\x65\x51\x20\x58\x4b\xd1\xfb\x6c\x9c\x73\x3e\x1e\xad\x42\x7f\x00\x98\x6e\xa6\xe0\xa7\xf0\x4d\x04\xe3\x0a\x07\x0e\x2f\xb4\xad\x3a\x23\xfd\x37\x7d\x8e\x30\x13\xd5\x35\x46\x17\xdc\x99\xd1\x92\xdf\x86\xb5\x62\x14\xc6\x7f\xe0\xfe\xef\x52\xf5\x43\x69\x4f\xc0\x03\x9a\x71\x2a\x22\xc6\xb0\x6e\x69\x05\x09\xfc\x08\x2d\xf9\xc2\xd9\xb5\x98\x93\x93\x29\x8a\x03\xb2\x93\x02\x1c\xc7\xa2\xb0\x94\x9d\xa1\x27\xd0\x84\xfc\x87\x57\x0f\x6d\xab\xff\x8d\x9f\xb9\x25\xf4\x56\x9a\x05\xfa\x35\xc6\x88\xf6\x44\x59\x6d\x1e\xdf\x7e\x5c\xc3\x1e\xa9\xf3\xf6\xe2\xbc\x50\x9e\xc3\x7b\x34\x4e\xaa\xc8\xec\xb0\x74\xef\xbe\x32\x4e\xff\xec\xd0\x6f\xd3\x4c\x7c\xaa\xd1\x63\x3a\x20\xc4\xb8\x0d\x72\x8b\x12\xf3\xab\xaf\x06\xe4\xd1\x1e\x11\xb7\x68\xee\xea\xb7\xee\x0f\xc6\xc4\x5b\x44\xe1\xf1\x78\xdb\x3e\x01\x7f\x2d\x2b\xf4\x10\x1d\x08\xe3\x20\x4c\x27\xe9\x11\x78\xa3\xd0\x1e\x15\x38\xdb\xaf\x97\xe0\x1a\xf4\xa1\x57\x8a\x47\xaa\xee\x76\x3b\x10\xd7\x96\x82\x5b\xa7\xb6\xce\x34\xc9\xbe\xb3\x3d\x87\x3b\xf1\xd6\x9a\xed\xb0\xb1\x3d\x71\xc9\xf2\x81\xfc\x3c\x64\xd7\xac\xe6\xc5\x54\xdb\x8a\x7f\x0f\x3c\xda\x7c\xbe\xde\xa4\x62\xc2\xe0\xb7\x7a\xd4\x53\xeb\x03\x65\xbb\xfd\xab\x75\x56\xbc\x89\xb3\xfd\xd6\xbd\xbe\xbd\x7d\x37\xdc\x90\xd3\x1b\xdc\x8c\x6e\x99\x51\x28\xc5\x6c\x0a\x9b\x07\xb5\xa7\xbf\x6f\x0e\xdf\xfe\x0d\x00\x00\xff\xff\x8f\xd0\x16\x2a\x8e\x0d\x00\x00")

func templateHttpUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpUpdateTmpl,
		"template/http/update.tmpl",
	)
}

func templateHttpUpdateTmpl() (*asset, error) {
	bytes, err := templateHttpUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/update.tmpl", size: 3470, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/http/create.tmpl":    templateHttpCreateTmpl,
	"template/http/delete.tmpl":    templateHttpDeleteTmpl,
	"template/http/handler.tmpl":   templateHttpHandlerTmpl,
	"template/http/helpers.tmpl":   templateHttpHelpersTmpl,
	"template/http/list.tmpl":      templateHttpListTmpl,
	"template/http/read.tmpl":      templateHttpReadTmpl,
	"template/http/relations.tmpl": templateHttpRelationsTmpl,
	"template/http/request.tmpl":   templateHttpRequestTmpl,
	"template/http/response.tmpl":  templateHttpResponseTmpl,
	"template/http/update.tmpl":    templateHttpUpdateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"http": &bintree{nil, map[string]*bintree{
			"create.tmpl":    &bintree{templateHttpCreateTmpl, map[string]*bintree{}},
			"delete.tmpl":    &bintree{templateHttpDeleteTmpl, map[string]*bintree{}},
			"handler.tmpl":   &bintree{templateHttpHandlerTmpl, map[string]*bintree{}},
			"helpers.tmpl":   &bintree{templateHttpHelpersTmpl, map[string]*bintree{}},
			"list.tmpl":      &bintree{templateHttpListTmpl, map[string]*bintree{}},
			"read.tmpl":      &bintree{templateHttpReadTmpl, map[string]*bintree{}},
			"relations.tmpl": &bintree{templateHttpRelationsTmpl, map[string]*bintree{}},
			"request.tmpl":   &bintree{templateHttpRequestTmpl, map[string]*bintree{}},
			"response.tmpl":  &bintree{templateHttpResponseTmpl, map[string]*bintree{}},
			"update.tmpl":    &bintree{templateHttpUpdateTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
