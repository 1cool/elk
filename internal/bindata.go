// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/http/create.tmpl
// template/http/handler.tmpl
// template/http/list.tmpl
// template/http/read.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateHttpCreateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x6f\x6f\x13\x3d\x12\x7f\xdf\x4f\x31\xb7\x8a\xd0\xa6\x97\x3a\xdc\xdb\x20\x74\x02\x5a\x20\x3a\x68\x39\xd2\x07\x5e\x20\x24\x9c\xf5\xec\xae\xa9\x63\x6f\x6d\x6f\x42\xc8\xb3\xdf\xfd\x91\xed\x4d\xb6\xbb\xf9\x43\x08\x82\x95\x10\xad\x3b\x33\x9e\xf9\xcd\xfc\x66\xc6\xab\xd5\xf0\x1c\x32\x65\x97\x05\x8e\x00\xa5\xcd\x14\xe1\x6a\x88\xd2\xba\x7f\xc9\x30\x43\x49\x5e\x69\x5a\xe4\x70\x3e\xac\xaa\xb3\xb3\xd5\x0a\x18\xa6\x5c\x22\x44\xb9\xb5\xc5\x30\xd1\x48\x2d\x46\x50\x55\x67\x00\x00\xab\xd5\x05\x2c\xb8\xcd\x01\xbf\x59\x94\x0c\x7a\x10\xbd\xa3\xc9\x1d\xcd\x30\x0a\x0a\x11\x5c\xd4\xa2\x41\x1c\x2c\xce\x0a\x41\xad\xb3\x87\x94\xa1\x8e\x80\x34\xc6\xc0\xd9\xa8\x7f\xe3\xb3\x42\x69\x0b\x51\xc6\x6d\x5e\x4e\x49\xa2\x66\xc3\x4c\x5d\x14\x82\x2e\x33\xad\x4a\xc9\x86\x73\x2a\x38\xa3\x56\xe9\xe1\xfc\x3f\x8f\x23\xf0\x81\xdd\xe6\xdc\x00\x37\x20\x11\x19\x32\x48\x95\x06\x63\xcb\x82\x33\x98\x8c\x3f\x80\x2e\x05\xd6\x71\xd5\xf7\x69\x2a\x33\x84\x9e\x84\xd1\x53\xe8\x91\x6b\xc5\xd0\xc0\x03\x7f\x87\x43\x78\x47\x97\x42\x51\x06\x2a\x05\xea\x34\x7a\x92\x5c\xd3\x19\x42\x55\x41\xc0\x02\x34\xde\x97\x68\x2c\xd9\x68\x39\x6c\xdb\xa2\x2f\xbc\xe4\xfb\x20\x08\xc6\xea\x32\xb1\xb0\xda\x28\x04\x67\x9c\xfb\x37\x97\x37\x23\x78\x4d\xe7\x5c\x66\x40\x85\x80\x42\x71\x69\x51\x1b\xc8\x51\x23\x18\xc4\x99\x01\xa9\x2c\x68\x9e\xe5\x96\xc0\x5b\xba\x9c\x22\x58\x17\x74\x42\x25\x4c\x11\x98\x92\x08\x5c\x02\x95\xca\xe6\xa8\x61\x41\x97\x40\x08\x09\x51\xb7\xef\x5b\x07\x9f\xfa\xe0\x25\x79\xc9\x51\x30\xd3\xca\xd7\x03\xe1\x5e\x4a\x26\xde\x6f\x2f\xe6\xc2\x3f\x0f\xa7\xb7\xcb\x02\xdd\x9f\x9c\xcb\x55\x05\x5f\xbe\x1a\x25\x47\xd1\x6a\x05\x5c\x32\xfc\x06\xb1\x29\x04\xb7\x10\x5b\x9a\xbd\x51\xea\xae\x2c\x1a\x4b\xb7\x34\x83\xc8\x89\x47\x7d\x88\x06\x51\x1f\x1e\x43\x55\x39\x4d\x5f\x51\xbd\x94\x3c\x93\x52\x59\x6a\xb9\x92\x86\x5c\x89\x3b\x12\x60\xfc\x10\xf2\xce\x95\x74\xf7\xd5\x55\x80\xfe\x4a\x52\x1b\x08\x65\xf4\xa5\x1b\xb0\x3b\xee\x86\xd7\xe0\x80\x35\x0e\x57\x2c\xc3\xfd\x30\x60\x07\x06\x17\x68\xea\x8e\xff\x92\xfc\xbe\x74\xc9\x76\xb8\xa0\x30\xee\xc7\x4f\x9f\x37\xce\x04\x5d\x0f\xd6\xf8\xf2\x04\xd0\xf0\x38\xd0\xf0\xb7\x80\xf6\x00\x8b\x9a\x3b\x35\x3b\x82\xf1\x9a\x09\x06\x28\x48\x5c\x74\x58\x42\x25\x03\x63\x95\x46\x03\xdc\xba\xd2\xb4\x39\x02\xa3\x96\x4e\xa9\xc1\x86\x34\x69\x29\x13\x88\xf3\xb6\xf2\x6b\x2a\x99\x40\xdd\xaf\xef\x89\x17\xe0\x7a\x0a\x79\x8f\xa6\x50\xd2\xe0\x47\xcd\x2d\xea\x01\x68\x38\xaf\xcf\x3d\xc1\xfa\x1d\x6a\x09\x97\xd8\x9c\x08\x95\x91\x8f\xdc\xe6\xf1\x77\x5a\xd4\xd8\xc7\xd1\x0c\x6d\xae\x58\x34\x80\x28\x5c\x11\xf5\xfb\x2d\xdd\xe1\x10\x5e\xa1\xf5\x3e\x17\xca\x58\xef\x38\x69\x49\xcc\xa9\x06\x76\x80\xee\x2d\x61\x9e\x02\x6a\xed\xfc\x71\x29\x24\xd7\xb8\xb8\xc4\x44\x31\xd4\xb1\x26\xcf\x15\x5b\xf6\x49\xf8\x3d\x7e\xc4\xfa\x4f\xbc\xe8\xbf\x9e\x82\xe4\xa2\x13\x91\x8f\x8a\x5c\x69\xad\x74\x1c\xa1\xfb\x0f\x98\xd3\x73\xe5\xe4\x6b\x63\x00\x2e\xc8\x20\x80\x5a\x77\x82\x72\x9f\x46\xc9\x50\x93\xe7\x94\xd5\x7e\xc6\x8b\x01\xe8\x01\x44\x5c\xfa\xea\xf0\x76\x5c\xab\xe2\x32\x8b\x76\xa9\xdb\x52\xcb\xd6\x71\xd5\x05\xae\xae\x39\xdc\x64\x9c\xec\xc1\x22\x27\x9b\x5e\x5e\x57\x79\xfc\xc3\xf0\x83\xf6\x00\xd4\x9d\xb3\x80\x5a\x93\xf8\xbc\xb1\x32\x0e\x41\x34\x55\xef\xa1\xe8\x3f\x71\xe2\xdb\xb6\x76\xc0\x59\x9b\x72\x80\xd6\xfd\xdd\x47\x70\x04\xb0\x0f\xc0\x1d\xbb\xde\x2d\xa9\x98\xa0\x9e\xa3\x0e\x4a\x01\x65\xc9\xc5\x3e\xcd\x2d\x5c\xb7\xb1\x0d\xfe\x8e\x65\xaa\xe2\x68\xde\x10\x3b\xa5\x5c\x20\xfb\x85\xdc\x3b\xe9\x93\x32\x3d\xa1\xf3\x7d\x59\x9e\x86\x04\x27\x82\xa3\xb4\xa4\x45\x93\xba\x35\xc5\x5b\x8c\x0b\x63\x70\x91\x53\x0b\x74\xaa\x4a\x0b\x46\xf0\x04\x21\x0d\x03\xca\xba\xf3\xdc\xdd\x98\x94\xc6\xaa\x19\xcc\xa8\x36\x39\x15\x02\xb5\xf9\xef\xe9\x33\x8e\xa7\xc0\xc8\xce\x41\xb7\xb7\x06\x7d\x7c\x64\x82\x76\x97\x5a\x7c\xbe\xdb\xdc\x36\xc2\x5b\x03\xe9\x57\xe7\xd4\x26\x94\xee\xb0\x3a\x1c\x4a\x77\x94\xed\x32\xdd\x84\x1d\xec\xbf\x2d\xc3\xac\x99\xa0\x7d\x10\x73\xf7\xde\xdd\xb5\xbe\x9e\x93\x3f\x73\xcf\x33\xe6\xb1\xdd\x7d\x0d\x21\x64\xdf\x4d\x17\xdd\x39\xb6\xfe\x8e\x02\xdf\x95\xb8\x1b\x61\x6e\x7c\x6d\x8f\x2e\xf7\xe1\x60\xdd\xcc\xa6\xc4\xb1\x21\xd6\xe4\x85\x92\x16\xbf\xd9\xb8\x43\xc0\xba\xed\x1d\xdb\xd7\x4d\x58\x06\x1f\x10\xe7\x6f\xb8\xc3\x29\x9d\xba\xa9\x7d\x34\xd5\x7f\xb2\x13\x1d\xc3\xf9\xf7\xe8\xf7\x62\x94\x56\x2f\xdb\x58\xdc\x1f\xa0\xfc\xff\x4b\xd4\xcb\xb8\x4f\x3e\xba\x85\x36\x6e\x45\x25\xd4\x02\xb5\x93\x19\x5f\xc6\x58\xab\x8d\x2f\xbb\x95\xd4\x3f\xeb\x26\x36\xbc\x3f\x1c\x19\x6e\xd5\x1b\xe7\x52\x4f\x42\xd4\x79\xa7\x74\x7c\xbf\xa2\x19\x6a\x08\xfe\x7b\x16\xf9\x9e\x42\x75\x58\xe6\xb9\x46\x06\x4a\xae\xf7\x7b\x55\xa0\xf6\xb5\x47\x76\x2d\x84\xe4\x85\x62\x08\xd1\xfd\xd6\x55\x7b\x6a\xae\x2e\x94\xa7\x70\x4f\x6e\xa4\x58\x9e\x5e\x27\x66\xc1\x6d\x92\x87\xc9\xe7\x5e\x1c\xdd\xad\x67\xfd\x25\xd4\x20\x9c\xbb\x4c\x5c\x2b\xfb\xd2\xbd\x9c\x7c\xfa\x47\x7b\x29\xb7\x9e\x2c\x3b\x4b\xce\xbf\x3e\x52\x67\xa5\x2e\xbe\xb1\xb4\x6b\xd1\xf1\xe5\x3a\xcd\xd1\x00\xf6\x67\xf0\xb8\x11\x0a\x4d\xf1\xae\xfd\x5e\x6f\x28\x3f\x72\xec\x90\xc1\x9d\xd3\x75\x0b\xa6\x09\x97\x59\x29\xa8\xfe\x21\x52\x35\x55\x59\x59\x08\x9e\xb8\x62\xf1\x74\xf0\xef\xce\x43\x8c\xfd\x03\xa0\x6d\x2f\x76\x8d\x93\xbb\x01\x0c\xae\x7b\x36\x71\x06\x11\xfc\xdb\x6d\x7f\x89\x92\x73\x32\xb6\x8a\x1e\x4d\xc9\x23\xf1\x66\x98\xd2\x52\xd8\x23\xc0\x0d\x7d\x30\x45\x9b\xe4\x7b\x3b\x21\xa4\x5a\xcd\x80\x4d\xff\x1c\xbe\x27\xec\x76\x07\x10\xa9\x0e\xf4\xda\xaf\x9b\xd1\x62\x72\xd4\x3c\x4d\xc9\xdb\xb0\xf0\xc4\x8f\xd6\x07\x37\x85\x7f\xef\x6d\x37\x80\xb1\x4c\x44\xc9\xf0\x6a\x56\xd8\xe5\x2d\xcd\x46\x60\x75\x89\x83\x2d\xb1\x57\x5a\x95\x85\x19\xc1\xa7\xcf\x61\xe1\x5f\x35\x8d\xb5\xd7\x7d\x50\x4e\x92\x1c\x67\xb4\xde\xdd\x82\xa2\xdf\xe5\x14\xc3\xe6\xe1\xbb\x9b\xa3\x51\x33\x5e\xa1\x6a\x7b\x51\x0d\x00\x4f\x9c\x93\x06\x35\xa7\x82\x7f\x0f\x4b\xb0\xaf\x96\xdf\x58\x06\xbf\x69\xa0\x1e\x6e\xba\xe1\x52\x3c\xbd\xe7\xb6\x3d\xaa\x63\xb8\xf9\x5f\xed\xf2\xd7\xfe\x59\xdb\xab\xe6\xd9\xbf\xf9\xe9\x9f\x00\x00\x00\xff\xff\x9d\xaa\x78\x88\x38\x14\x00\x00")

func templateHttpCreateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpCreateTmpl,
		"template/http/create.tmpl",
	)
}

func templateHttpCreateTmpl() (*asset, error) {
	bytes, err := templateHttpCreateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/create.tmpl", size: 5176, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpHandlerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x41\x8b\xdb\x3e\x10\xc5\xef\xf9\x14\x0f\x11\xfe\x24\x26\x91\xfe\xbd\x06\x7a\xea\xa1\x2d\x94\x50\xd8\xb2\x3d\xab\xd6\x44\x16\x95\x25\x23\x8f\xb3\xdd\x1a\x7f\xf7\xa2\xd8\xeb\xc4\xac\x05\x82\x27\xf4\xd3\x9b\x79\x83\xfa\x5e\x15\xb0\x91\x5f\x1b\x3a\x81\x02\xdb\x28\x5d\x54\x14\x38\xef\x52\x59\x0a\xf2\x73\xd2\x4d\x85\x42\x0d\xc3\x66\xd3\xf7\x30\x74\x71\x81\x20\x2a\xe6\x46\x55\x3a\x18\x4f\x49\x60\x18\x36\x00\xd0\xf7\x47\xbc\x38\xae\x40\x7f\x98\x82\xc1\x16\xe2\xbb\x2e\x7f\x6b\x4b\x62\x7c\x21\x70\x9c\xd0\x11\x07\x53\xdd\x78\xcd\xd9\x90\xb4\xc9\x56\xf2\x6e\x86\xec\x31\x9d\x5c\xdd\xc4\xc4\x10\xd6\x71\xd5\xfd\x92\x65\xac\x95\x8d\xc7\xc6\xeb\x57\x9b\x62\x17\x8c\xba\x6a\xef\x8c\xe6\x98\xd4\xf5\xc3\xff\x02\xb7\x64\x3f\x2a\xd7\xc2\xb5\x08\x44\x86\x0c\x2e\x31\xa1\xe5\xae\x71\x06\x4f\x5f\x9f\x91\x3a\x4f\x53\xb0\xa9\x5e\xd2\xc1\x12\xb6\x01\xa7\x8f\xd8\xca\x73\x34\xd4\xe2\xa1\x5f\xa5\x32\xb4\x0d\xf2\xac\x6b\xc2\x30\x7c\x19\xe3\x63\x1c\x43\x8b\x9c\x10\x65\xea\x0c\x62\x43\x49\xb3\x8b\xa1\x45\x0c\xe0\x8a\x96\x0f\x51\x47\x43\x5e\xce\xc6\x79\xfe\xeb\xd6\x2d\xa7\xae\x64\xf4\x33\x9a\x57\xe9\x1d\x05\xce\xaa\xa0\xc0\xf2\xd3\xed\xb8\x20\x7c\xb4\x93\x2a\xfe\xea\x46\x7e\x8b\xd6\x52\x5a\x10\xf3\xb8\x50\xcc\x52\x3e\x8f\x8a\x66\x72\x1a\x4d\x5e\x97\x2e\x94\x38\xd3\xcb\x5a\x9b\xbb\xf2\xb1\x93\x03\xfc\x63\xd9\x03\xae\x6b\x35\xf6\x28\x56\x13\x2f\xa3\x26\xe2\x2e\x05\xfc\xb7\x86\x2e\xc9\xfb\x60\x4e\x37\x79\x78\x77\xeb\xa3\x3d\xbd\x49\xf9\xd3\x71\xb5\xcb\x4d\x3e\x71\x72\xc1\xee\xc4\xdb\x5f\x3e\x40\xac\x15\x13\xfb\xfd\x7b\xc7\x39\xd5\x09\xd7\xe5\xed\xb0\x59\xaa\xfb\x67\x9e\xd5\xbf\x00\x00\x00\xff\xff\xee\x48\x80\xb8\x7c\x03\x00\x00")

func templateHttpHandlerTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpHandlerTmpl,
		"template/http/handler.tmpl",
	)
}

func templateHttpHandlerTmpl() (*asset, error) {
	bytes, err := templateHttpHandlerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/handler.tmpl", size: 892, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpListTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x41\x6f\xdc\x36\x13\xbd\xfb\x57\x4c\x08\xe3\x8b\x64\xc8\xdc\x2f\xe8\xcd\xc5\x1e\xdc\xc0\x70\x8d\xba\xb1\x6b\xa7\xc8\xa1\xe8\x81\xbb\x1c\x49\x84\x29\x52\x3b\x1c\xd9\xb1\x15\xfd\xf7\x82\x92\x6c\x4b\xbb\x8e\x1b\xf4\x90\x10\x58\x60\x45\xcd\xbc\x79\x33\x6f\xc4\x61\xdb\x2e\x0e\xa0\xf0\x7c\x5f\xe3\x11\xa0\xe3\xc2\x4b\xe3\x17\xe8\x38\xfe\xd6\x8b\x02\x9d\x3c\x25\x55\x97\x70\xb0\xe8\xba\xbd\xbd\xb6\x05\x8d\xb9\x71\x08\xa2\x64\xae\x17\xd6\x04\x16\xd0\x75\x7b\x00\x00\x6d\x7b\x08\x77\x86\x4b\xc0\xcf\x8c\x4e\xc3\x3e\x88\x4b\xb5\xbe\x51\x05\x8a\xc1\x5c\xc0\xe1\x68\x3a\x98\x03\x63\x55\x5b\xc5\x11\x0d\x95\x46\x12\x20\x9f\xc1\x20\x62\xc4\xa0\xe3\x23\x29\x57\x20\xec\x3b\x38\x5a\xc2\xbe\xfc\xe0\x35\x06\x98\xc0\x2d\x16\x70\x85\x4a\x43\x8e\xbc\x2e\x31\x00\x97\x18\xbd\xf6\x9d\xfc\xa0\x2a\x84\xae\x83\xca\x6b\xb4\x60\x34\x3a\x36\xb9\x41\x0d\xab\x7b\x50\x50\x98\x5b\x74\xd0\x90\x3d\xac\x15\xa9\x0a\x19\x09\x72\xf2\x55\x04\x98\x82\x6b\xc5\x6a\xa5\x02\x82\x72\x1a\x08\xb9\x21\x17\xc0\x30\xb0\xef\x43\xad\xad\x41\xc7\xf2\xc9\x23\x6f\xdc\x1a\x92\x12\x0e\x66\x1c\x7e\x55\x4e\x5b\xa4\x14\xce\x4d\xe0\xe4\x0e\x62\x55\xe4\x15\x86\xda\xbb\x80\x9f\xc8\x30\x52\x06\x04\x07\xe3\xfe\xa6\xc1\xc0\x29\xb4\x4f\xa8\x71\xd9\x58\x80\x52\x5a\x5f\xc8\x4f\x86\xcb\xe4\x41\xd5\xf2\x9a\xc9\xb8\x22\x11\x15\x72\xe9\xb5\xc8\x40\xc4\x00\x22\x4d\x67\x9e\x9b\xc1\x73\xa4\x3a\x23\x26\xff\x68\x90\xee\x93\xb9\xfd\xb3\xa0\xba\xc0\xf0\xd1\x9f\x7b\xa5\xa3\x00\x62\x26\xfb\x74\x2d\x16\x70\xa2\x0a\x24\xb0\xd1\xb4\x77\x03\x2e\x15\x83\x22\x04\xc2\x4d\x63\x08\x35\x78\x07\x11\x01\x7c\x8d\xa4\xd8\x78\x27\x77\x80\xda\x16\xe4\x7b\xaf\x11\xc4\x66\x27\x50\xa4\x35\xf6\xc6\x74\xfb\x56\x11\x20\xf5\x3f\x4f\xb3\x37\xb5\x2a\x30\xa6\xfe\x6e\xb6\x6b\x72\xd0\x71\x97\xe4\x9f\x57\xe7\x8f\xf9\xcb\x53\xe4\x44\x44\x07\x91\xfe\x0c\x1a\xde\x2c\x41\x88\x2d\x01\x1e\x21\xb3\x3e\xdc\x12\x02\xd3\xda\xbb\x5b\x79\xcc\xde\x24\x3a\xdd\xb1\x35\x79\x6f\xf8\x66\x09\xce\xd8\x17\xb0\x7a\x51\xe5\x99\xcb\x7d\x22\x7a\xf2\x50\x2b\x0a\xc6\x15\xb0\x89\xa4\xe0\xb9\x2f\xdf\xc6\xb0\x6f\x45\xf6\x22\x44\x5c\xd3\x5e\xe8\x93\xc8\x40\xa7\xaf\x9b\x9f\xc4\x88\x09\x12\x7d\xc5\x6e\x37\x9f\xb8\x08\x9d\x46\x92\xbf\x28\x3d\x76\x69\x72\x97\x01\x65\xd0\x47\x85\xaa\x09\x0c\xab\xf8\xa9\x80\x71\x8c\xb1\x21\x0a\x42\x15\x53\x78\x40\xf2\xe2\x6b\x98\xf1\xa3\xda\x79\x35\x57\x79\xfe\x64\x18\xab\x70\x89\x74\x39\x2a\xfc\xd3\xff\xbf\x55\xe2\xa9\xe7\xeb\x52\x4f\x2d\x7f\x80\xe4\xd3\xf0\xdf\x2a\xfd\x2c\xb9\xef\xde\x02\x33\x51\xbe\x5b\x2b\x60\x18\xc4\x39\x5a\xc2\x46\x9e\x9b\xca\x70\x32\x25\x92\xca\x8b\x3c\x0f\xc8\x49\xd2\x77\xe8\x21\xbc\x4b\xe1\x00\xe6\x16\xc7\xd6\x26\x24\xdf\x7b\xc7\xf8\x99\x93\xad\xc3\xf3\xdf\x24\xb5\x63\x19\x47\x3d\xfb\x31\x14\x05\x9d\x1c\xb3\x5f\xe0\x06\x57\x6a\x05\x5f\xa0\xb6\x0d\x29\xdb\x75\xc3\xa4\xd1\x2b\x91\x6d\x09\xb1\x5b\x96\xb1\xdc\x67\x8e\x91\x9c\xb2\xd7\x48\xb7\x48\x83\xc3\x50\x77\x67\xec\x4b\x5e\x3b\x85\x9c\x97\x4d\x3f\x55\x2d\x94\x48\x26\xcf\xe5\xef\x8a\x42\xa9\x6c\xf2\xbf\xc7\x8d\x8b\x3a\x9e\xd1\x61\x37\xe5\x33\xb7\xb6\x8d\xc6\x93\xaa\xe6\xfb\x8f\xaa\x38\x02\xa6\x06\x77\x5b\xe8\x94\x7c\x53\x87\x23\xf8\xeb\xef\xd0\xf7\x67\xfb\x3c\x58\xf6\xe5\xb1\x73\x9e\xfb\x21\x10\xe4\x89\xbd\xb9\x5e\x97\x58\x29\x19\x27\xf9\xe0\x16\x67\x53\x1c\x04\xf1\x3e\x60\x43\x1c\x55\xe2\x85\x8a\x0e\xbb\x71\x28\x1c\x76\x1d\x74\x73\x0e\x5d\x06\x18\xfe\xa3\x98\x01\xc9\x28\x6b\x1e\x7a\x86\xc3\x68\xf9\x71\x5a\x3d\x9e\x18\xaf\xb4\x54\xbc\xe7\x0c\xd1\x51\x8f\x44\xcf\x1c\x27\x42\x55\xbe\x71\x2c\x32\xb0\xe8\x12\x0c\xe9\x16\xe9\x91\xf0\xc5\x6f\x23\xbf\xc9\x91\xb6\x7d\x1d\x7b\xfa\xf7\x4f\x00\x00\x00\xff\xff\x5c\x19\xbc\xab\x3b\x0a\x00\x00")

func templateHttpListTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpListTmpl,
		"template/http/list.tmpl",
	)
}

func templateHttpListTmpl() (*asset, error) {
	bytes, err := templateHttpListTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/list.tmpl", size: 2619, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpReadTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x6f\xdb\x46\x10\xbd\xfb\x57\x4c\x09\xa3\xa0\x5c\x79\x75\xea\xc5\x40\x0e\x69\xec\x26\x44\xd3\x24\xb5\x9d\xe6\x50\xf4\xb0\xe2\x0e\xc9\x85\x57\xbb\xd4\xec\xd0\x8e\xac\xea\xbf\x17\x43\x52\x1f\x94\xd4\xd8\x09\x9a\x05\x04\x9b\xe2\xcc\xec\xdb\x37\xf3\xde\x6a\xb9\x9c\x9c\x41\x19\x78\x51\xe3\x05\xa0\xe7\x32\x28\x1b\x26\xe8\x59\x3e\xf9\xa4\x44\xaf\x5e\x93\xae\x2b\x38\x9b\xac\x56\x27\x27\xcb\x25\x18\x2c\xac\x47\x48\x2a\xe6\x7a\x42\xa8\x4d\x02\xab\xd5\x09\x00\xc0\x72\x79\x0e\x0f\x96\x2b\xc0\xcf\x8c\xde\xc0\x29\x24\x1f\x74\x7e\xa7\x4b\x4c\xba\xf0\x04\xce\xfb\xd0\x2e\x1c\x18\x67\xb5\xd3\x2c\xd5\x50\x1b\xa4\x04\xd4\xb6\x18\x48\x8d\xfe\xc9\xce\xea\x40\x0c\x49\x69\xb9\x6a\xa6\x2a\x0f\xb3\x49\x19\xce\xf3\xca\x4e\xe4\x73\xff\x73\x02\xed\x41\x6e\x2b\x1b\xc1\x46\xf0\x88\x06\x0d\x14\x81\x20\x72\x53\x5b\x03\x37\xd9\x9f\x40\x8d\xc3\xfe\x1c\xfd\x0e\xa4\x7d\x89\x70\xea\xe1\xe2\x05\x9c\xaa\x77\xc1\x60\x84\x1d\x84\x93\x09\x5c\xa3\x36\x50\x20\xe7\x15\x46\xe0\x0a\x25\xeb\xd4\xab\x77\x7a\x86\xb0\x5a\xc1\x2c\x18\x74\x60\x0d\x7a\xb6\x85\x45\x03\xd3\x05\x68\x28\xed\x3d\x7a\x68\xc8\x9d\xd7\x9a\xf4\x0c\x19\x09\x0a\x0a\x33\x29\xb0\x5b\xdc\x68\xd6\x53\x1d\x11\xb4\x37\x40\xc8\x0d\xf9\x08\x96\x81\x43\xbb\x55\xee\x2c\x7a\x56\x9b\x8c\xa2\xf1\x39\xa4\x15\x9c\x0d\x30\xbc\xd1\xde\x38\xa4\x51\x0b\x35\x7d\x00\x21\x5a\x5d\x63\xac\x83\x8f\xf8\x89\x2c\x23\x8d\x81\xe0\xac\xff\x7e\xde\x60\xe4\x11\x2c\x37\x55\x65\x39\x21\xa0\x52\x2e\x94\xea\x93\xe5\x2a\x7d\xd4\xb5\xba\x61\xb2\xbe\x4c\x93\x19\x72\x15\x4c\x32\x86\x44\x36\x48\x46\xa3\x41\xe6\x64\x02\xd9\xa5\x50\xfe\xf1\xfa\x2d\x6c\x4e\xab\x06\x31\x32\x17\xb6\x10\xc8\xd9\xa5\xca\x62\xe6\x79\x97\xe4\xf5\xb2\x66\x0c\x48\x24\x48\x22\x53\x1e\xfc\xbd\x7a\xc9\xc1\xa6\x79\x65\xd5\xc7\xeb\xb7\x1f\xa4\x76\x4a\x63\x48\xec\x01\x88\x36\xbd\x68\xb3\x7f\x78\x01\xde\xba\xbd\xe3\x6d\x8e\xa9\xae\x88\x02\xa5\x09\xca\x1f\x28\x91\xd9\xfa\x12\xac\xe9\xba\xd3\x90\xdb\x1e\x21\x19\xc3\x2e\x0b\x56\x18\x38\x0e\xa5\x0b\xec\x2a\x23\xd1\x11\x6c\xb2\x08\xbd\x41\x52\xbf\x68\xd3\xf7\x20\x7d\x18\x43\x57\x03\x66\x4d\x64\x98\xca\x18\x80\xf5\x8c\x25\x12\x94\x84\x5a\xc6\xe6\x11\x29\x24\xff\x55\x51\x06\xe6\xe0\xd5\x6a\x8f\x7b\x40\x17\xf1\x38\xe1\xc2\xf5\xd1\x33\x1d\x94\xf0\xa6\x95\xee\x7e\xeb\x5f\xb5\x28\xdb\x61\x9d\x37\x48\x0b\x99\xdc\x56\x2c\x87\x52\x19\xa4\xce\xbb\x79\xeb\x07\x7c\x10\xa7\xfe\x90\x42\xe9\x48\x7d\xaa\x90\x30\xdd\x79\xf7\x0f\xb8\xf0\x80\x24\x31\xd9\xa5\xbc\xd8\xcc\xd4\x1b\x1d\x5f\x87\xdb\x45\x2d\xf9\x5d\x42\x76\xa9\xfa\xe7\xd4\x9a\xd1\x96\x04\x6b\x36\xbe\x32\x1a\x9d\x1c\x4c\x69\xe7\x5e\xa6\xc4\x78\x1b\xde\x06\x6d\xc4\x1a\x92\x81\xc7\xed\x11\x70\xa5\xa5\x59\x4e\x42\xdb\x34\xe0\x4a\x33\x68\x42\x20\x9c\x37\x96\xd0\x40\xf0\x20\x15\x20\xd4\x48\x9a\x6d\xf0\xea\xa0\xd0\x72\x09\xea\x55\x30\x08\xc9\xfc\x60\x23\x81\xb5\x63\x84\xeb\x85\x1b\xb1\xcc\xd5\x7b\xef\x16\x29\xa9\x57\xc1\x33\x7e\xe6\x74\x6f\x00\x9f\x12\x46\x7c\xb0\xd2\x30\x24\x52\xa9\x5c\x03\xfb\xde\xb0\x5e\xb9\x18\xd5\x99\xf4\xeb\x5d\xe0\x5f\x43\xe3\x4d\x3b\xf2\x17\x47\x83\xa1\x55\x5b\xe6\x8b\x90\x26\x83\x16\xde\xe1\x54\x4f\xc5\x39\x7d\x60\x28\xa4\x4a\x2f\xb4\xcc\xf3\x3a\x34\xbb\x5c\x0f\x43\x32\x06\x6b\x9e\x29\x30\xd8\x8a\x6c\x0d\x70\x2d\xb1\xa7\x10\x7c\xa9\xe0\x51\x8d\x1d\xf0\x71\x63\x7d\xd9\x38\x4d\x4f\x52\xd2\x1b\x90\x69\x6a\x67\x73\xd1\x0e\x7a\xa6\x45\x7b\x53\x1d\x45\xf9\x1d\xd8\x39\xb4\xa0\x2d\x9a\xe3\x4c\x75\x18\x5b\x71\x58\x03\x09\xfc\xb4\x71\xe8\x8c\x83\x16\x85\x7d\x13\x83\x06\x0b\xdd\x38\x7e\x06\x5d\x9d\x5f\xb7\xce\x22\x86\x7d\x1c\x65\xeb\xe1\x66\xfa\x1d\x18\xcb\x3c\x23\x79\xed\x6e\x90\xee\xb1\xeb\x71\x4f\x9d\xb7\xee\xab\x8f\x3e\x14\xf2\xf0\x69\xe7\x0e\xac\x90\x6c\x51\xa8\xdf\x35\xc5\x4a\xbb\xf4\xc7\xf5\x17\xef\x6b\x31\x91\x78\x28\xd2\xcc\xe7\xae\x31\x78\x35\xab\x79\x71\xab\xcb\x0b\x60\x6a\x70\x7c\x10\xf6\x9a\x42\x53\xc7\x0b\xf8\xeb\xef\xd8\xde\x6d\xcb\xad\xf3\x9d\xaa\x97\xde\x07\x6e\x5d\x2a\xaa\x2b\x77\x77\x93\x57\x38\xd3\x4a\x2e\xfe\x2e\x4d\xcc\x57\x9c\x6a\xeb\xa8\xc7\xc5\x95\x6c\x2f\x0d\x58\x0d\x31\xac\xc6\x80\x5f\xe7\x50\x9b\x31\x88\x48\x56\x3b\xfb\xd8\x02\x84\x76\x28\xfe\x8f\x6e\x7f\x5b\x97\x8f\x74\x77\xd8\xcb\x2f\xfb\x5f\xb7\x29\x3e\xc3\xfe\x86\x5b\xf7\x60\xdf\xff\xd6\x63\x33\xdb\xd7\xfb\x3f\x9c\x37\xff\xfd\x1b\x00\x00\xff\xff\x02\x93\x2d\xa2\xe5\x0b\x00\x00")

func templateHttpReadTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpReadTmpl,
		"template/http/read.tmpl",
	)
}

func templateHttpReadTmpl() (*asset, error) {
	bytes, err := templateHttpReadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/read.tmpl", size: 3045, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/http/create.tmpl":  templateHttpCreateTmpl,
	"template/http/handler.tmpl": templateHttpHandlerTmpl,
	"template/http/list.tmpl":    templateHttpListTmpl,
	"template/http/read.tmpl":    templateHttpReadTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"http": &bintree{nil, map[string]*bintree{
			"create.tmpl":  &bintree{templateHttpCreateTmpl, map[string]*bintree{}},
			"handler.tmpl": &bintree{templateHttpHandlerTmpl, map[string]*bintree{}},
			"list.tmpl":    &bintree{templateHttpListTmpl, map[string]*bintree{}},
			"read.tmpl":    &bintree{templateHttpReadTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
