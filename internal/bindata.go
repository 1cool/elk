// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/http/create.tmpl
// template/http/handler.tmpl
// template/http/list.tmpl
// template/http/read.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateHttpCreateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\x31\xaa\xc3\x30\x10\x44\x7b\x9d\x62\x58\x7e\x65\xb0\xd5\xff\x0b\xa4\xcd\x15\x16\x7b\x22\x9b\x24\xb2\x10\x0b\x49\x58\x74\xf7\x20\x1c\x92\x62\x60\x8a\x37\x6f\xdc\xe3\x80\xb4\xdb\xab\xf0\x1f\xcc\x96\xf6\x69\xdb\x23\xb3\xf5\xcc\x31\x31\x4f\xa7\xaa\x65\xc5\x10\x5b\x0b\xc1\x1d\x0b\x2f\x5b\x26\x64\x35\x2b\x71\xae\x54\xa3\xa0\xb5\x00\x00\xee\x23\x1e\x9b\xad\xe0\xd3\x98\x17\xfc\x41\xce\x3a\x5f\x35\x51\x8e\x81\x60\xfc\xa0\x07\x0e\xe3\xbd\xdc\xd4\xba\x8f\xba\xb0\x0a\xa6\x9f\x0c\xdd\xd1\x6f\xc3\xb7\xbf\x03\x00\x00\xff\xff\xd6\x81\xc2\xe3\xb0\x00\x00\x00")

func templateHttpCreateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpCreateTmpl,
		"template/http/create.tmpl",
	)
}

func templateHttpCreateTmpl() (*asset, error) {
	bytes, err := templateHttpCreateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/create.tmpl", size: 176, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpHandlerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x41\x6b\xe3\x30\x10\x85\xef\xfe\x15\x0f\x61\x96\xc4\x24\xf2\xdd\xb0\xa7\x3d\xec\x1e\x96\x50\xe8\xa1\x67\x21\x4f\x64\x53\x65\x64\xe4\x31\x69\x6b\xfc\xdf\x8b\xea\xd4\x89\xa9\x07\x8c\xc7\xcc\x9b\x6f\xde\x58\x1a\xc7\xb2\x80\x0b\xf2\xde\x51\x05\x62\x71\x41\xb7\xa1\x24\x96\xf4\xd8\xd2\x11\xeb\xbf\xd1\x74\x0d\x8a\x72\x9a\xb2\x6c\x1c\x51\xd3\xb9\x65\x82\x6a\x44\xba\xb2\x31\x5c\x7b\x8a\x0a\xd3\x94\x01\xc0\x38\x1e\x71\x6d\xa5\x01\xbd\x09\x71\x8d\x1c\xea\xc9\xd8\x57\xe3\x48\xcd\x1d\x0a\xc7\x9b\x74\x96\x43\xe8\xd2\x79\x23\x09\x48\xa6\x4e\x28\x7d\x87\x21\x31\xd2\xdc\xdb\x67\x34\xec\x08\x39\xa3\xfa\x8d\x5c\x9f\x42\x4d\x3d\x1e\x70\x65\x99\x44\x39\xeb\x93\xb9\x10\xa6\xe9\xdf\xec\x0e\xb3\xcb\x1e\xc9\x00\x6c\x1c\x6a\x84\x8e\xa2\x91\x36\x70\x8f\xc0\x90\x86\xd6\x8d\xb8\x84\x9a\xbc\x5e\xc0\xe9\xf7\x6c\xa3\x7b\x89\x83\x15\x8c\x8b\x34\x85\xf5\x2d\xb1\xa0\x20\x16\xfd\xe7\x2b\x5f\x95\x7d\x70\xe9\x55\x7c\x98\x4e\xff\x0f\xce\x51\x5c\xca\xb7\x55\x53\x9c\x07\xb6\x38\xd1\x75\x6b\xec\xce\x3e\xc2\x0f\xf0\x8f\xb0\x3d\x8a\x4d\xab\x6b\x8f\x91\x64\x88\x8c\x5f\x5b\xd2\xb5\xf2\xbe\x51\x05\x7b\xf8\x51\xf2\xc1\x55\xf0\xfa\xa5\x95\x66\x97\x4c\x3c\x4b\x6c\xd9\xed\xd4\xf7\xd5\x38\x40\x6d\xcd\x50\xfb\xfd\x9a\x35\x65\xeb\xec\x7e\xfa\x4b\xf6\x19\x00\x00\xff\xff\xd6\x39\x86\x94\xad\x02\x00\x00")

func templateHttpHandlerTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpHandlerTmpl,
		"template/http/handler.tmpl",
	)
}

func templateHttpHandlerTmpl() (*asset, error) {
	bytes, err := templateHttpHandlerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/handler.tmpl", size: 685, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpListTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x41\x6f\xdc\x36\x13\xbd\xfb\x57\x4c\x08\xe3\x8b\x64\xc8\xdc\x2f\xe8\xcd\xc5\x1e\xdc\xc0\x70\x8d\xba\xb1\x6b\xa7\xc8\xa1\xe8\x81\xbb\x1c\x49\x84\x29\x52\x3b\x1c\xd9\xb1\x15\xfd\xf7\x82\x92\x6c\x4b\xbb\x8e\x1b\xf4\x90\x10\x58\x60\x45\xcd\xbc\x79\x33\x6f\xc4\x61\xdb\x2e\x0e\xa0\xf0\x7c\x5f\xe3\x11\xa0\xe3\xc2\x4b\xe3\x17\xe8\x38\xfe\xd6\x8b\x02\x9d\x3c\x25\x55\x97\x70\xb0\xe8\xba\xbd\xbd\xb6\x05\x8d\xb9\x71\x08\xa2\x64\xae\x17\xd6\x04\x16\xd0\x75\x7b\x00\x00\x6d\x7b\x08\x77\x86\x4b\xc0\xcf\x8c\x4e\xc3\x3e\x88\x4b\xb5\xbe\x51\x05\x8a\xc1\x5c\xc0\xe1\x68\x3a\x98\x03\x63\x55\x5b\xc5\x11\x0d\x95\x46\x12\x20\x9f\xc1\x20\x62\xc4\xa0\xe3\x23\x29\x57\x20\xec\x3b\x38\x5a\xc2\xbe\xfc\xe0\x35\x06\x98\xc0\x2d\x16\x70\x85\x4a\x43\x8e\xbc\x2e\x31\x00\x97\x18\xbd\xf6\x9d\xfc\xa0\x2a\x84\xae\x83\xca\x6b\xb4\x60\x34\x3a\x36\xb9\x41\x0d\xab\x7b\x50\x50\x98\x5b\x74\xd0\x90\x3d\xac\x15\xa9\x0a\x19\x09\x72\xf2\x55\x04\x98\x82\x6b\xc5\x6a\xa5\x02\x82\x72\x1a\x08\xb9\x21\x17\xc0\x30\xb0\xef\x43\xad\xad\x41\xc7\xf2\xc9\x23\x6f\xdc\x1a\x92\x12\x0e\x66\x1c\x7e\x55\x4e\x5b\xa4\x14\xce\x4d\xe0\xe4\x0e\x62\x55\xe4\x15\x86\xda\xbb\x80\x9f\xc8\x30\x52\x06\x04\x07\xe3\xfe\xa6\xc1\xc0\x29\xb4\x4f\xa8\x71\xd9\x58\x80\x52\x5a\x5f\xc8\x4f\x86\xcb\xe4\x41\xd5\xf2\x9a\xc9\xb8\x22\x11\x15\x72\xe9\xb5\xc8\x40\xc4\x00\x22\x4d\x67\x9e\x9b\xc1\x73\xa4\x3a\x23\x26\xff\x68\x90\xee\x93\xb9\xfd\xb3\xa0\xba\xc0\xf0\xd1\x9f\x7b\xa5\xa3\x00\x62\x26\xfb\x74\x2d\x16\x70\xa2\x0a\x24\xb0\xd1\xb4\x77\x03\x2e\x15\x83\x22\x04\xc2\x4d\x63\x08\x35\x78\x07\x11\x01\x7c\x8d\xa4\xd8\x78\x27\x77\x80\xda\x16\xe4\x7b\xaf\x11\xc4\x66\x27\x50\xa4\x35\xf6\xc6\x74\xfb\x56\x11\x20\xf5\x3f\x4f\xb3\x37\xb5\x2a\x30\xa6\xfe\x6e\xb6\x6b\x72\xd0\x71\x97\xe4\x9f\x57\xe7\x8f\xf9\xcb\x53\xe4\x44\x44\x07\x91\xfe\x0c\x1a\xde\x2c\x41\x88\x2d\x01\x1e\x21\xb3\x3e\xdc\x12\x02\xd3\xda\xbb\x5b\x79\xcc\xde\x24\x3a\xdd\xb1\x35\x79\x6f\xf8\x66\x09\xce\xd8\x17\xb0\x7a\x51\xe5\x99\xcb\x7d\x22\x7a\xf2\x50\x2b\x0a\xc6\x15\xb0\x89\xa4\xe0\xb9\x2f\xdf\xc6\xb0\x6f\x45\xf6\x22\x44\x5c\xd3\x5e\xe8\x93\xc8\x40\xa7\xaf\x9b\x9f\xc4\x88\x09\x12\x7d\xc5\x6e\x37\x9f\xb8\x08\x9d\x46\x92\xbf\x28\x3d\x76\x69\x72\x97\x01\x65\xd0\x47\x85\xaa\x09\x0c\xab\xf8\xa9\x80\x71\x8c\xb1\x21\x0a\x42\x15\x53\x78\x40\xf2\xe2\x6b\x98\xf1\xa3\xda\x79\x35\x57\x79\xfe\x64\x18\xab\x70\x89\x74\x39\x2a\xfc\xd3\xff\xbf\x55\xe2\xa9\xe7\xeb\x52\x4f\x2d\x7f\x80\xe4\xd3\xf0\xdf\x2a\xfd\x2c\xb9\xef\xde\x02\x33\x51\xbe\x5b\x2b\x60\x18\xc4\x39\x5a\xc2\x46\x9e\x9b\xca\x70\x32\x25\x92\xca\x8b\x3c\x0f\xc8\x49\xd2\x77\xe8\x21\xbc\x4b\xe1\x00\xe6\x16\xc7\xd6\x26\x24\xdf\x7b\xc7\xf8\x99\x93\xad\xc3\xf3\xdf\x24\xb5\x63\x19\x47\x3d\xfb\x31\x14\x05\x9d\x1c\xb3\x5f\xe0\x06\x57\x6a\x05\x5f\xa0\xb6\x0d\x29\xdb\x75\xc3\xa4\xd1\x2b\x91\x6d\x09\xb1\x5b\x96\xb1\xdc\x67\x8e\x91\x9c\xb2\xd7\x48\xb7\x48\x83\xc3\x50\x77\x67\xec\x4b\x5e\x3b\x85\x9c\x97\x4d\x3f\x55\x2d\x94\x48\x26\xcf\xe5\xef\x8a\x42\xa9\x6c\xf2\xbf\xc7\x8d\x8b\x3a\x9e\xd1\x61\x37\xe5\x33\xb7\xb6\x8d\xc6\x93\xaa\xe6\xfb\x8f\xaa\x38\x02\xa6\x06\x77\x5b\xe8\x94\x7c\x53\x87\x23\xf8\xeb\xef\xd0\xf7\x67\xfb\x3c\x58\xf6\xe5\xb1\x73\x9e\xfb\x21\x10\xe4\x89\xbd\xb9\x5e\x97\x58\x29\x19\x27\xf9\xe0\x16\x67\x53\x1c\x04\xf1\x3e\x60\x43\x1c\x55\xe2\x85\x8a\x0e\xbb\x71\x28\x1c\x76\x1d\x74\x73\x0e\x5d\x06\x18\xfe\xa3\x98\x01\xc9\x28\x6b\x1e\x7a\x86\xc3\x68\xf9\x71\x5a\x3d\x9e\x18\xaf\xb4\x54\xbc\xe7\x0c\xd1\x51\x8f\x44\xcf\x1c\x27\x42\x55\xbe\x71\x2c\x32\xb0\xe8\x12\x0c\xe9\x16\xe9\x91\xf0\xc5\x6f\x23\xbf\xc9\x91\xb6\x7d\x1d\x7b\xfa\xf7\x4f\x00\x00\x00\xff\xff\x5c\x19\xbc\xab\x3b\x0a\x00\x00")

func templateHttpListTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpListTmpl,
		"template/http/list.tmpl",
	)
}

func templateHttpListTmpl() (*asset, error) {
	bytes, err := templateHttpListTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/list.tmpl", size: 2619, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpReadTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x57\x4d\x6f\xdb\x46\x10\xbd\xfb\x57\x4c\x09\xa3\xa0\x5c\x65\x75\x37\x90\x43\x1a\xb9\x09\x51\xd7\x4e\x6d\x07\x3e\x14\x3d\xac\xb4\x43\x72\xe1\xd5\x2e\x35\x1c\xda\x91\x55\xfd\xf7\x62\x48\xea\x83\xa2\x64\x27\xbe\x85\x80\x61\x93\xdc\x79\x3b\x1f\xef\xbd\xa5\x97\xcb\xd1\x19\x64\x81\x17\x05\x9e\x03\x7a\xce\x82\xb2\x61\x84\x9e\xe5\x67\x3a\xca\xd0\xab\x4f\xa4\x8b\x1c\xce\x46\xab\xd5\xc9\xc9\x72\x09\x06\x53\xeb\x11\xa2\x9c\xb9\x18\x11\x6a\x13\xc1\x6a\x75\x02\x00\xb0\x5c\xbe\x83\x27\xcb\x39\xe0\x37\x46\x6f\xe0\x14\xa2\x2f\x7a\xfa\xa0\x33\x8c\x9a\xe5\x11\xbc\x6b\x97\x36\xcb\x81\x71\x56\x38\xcd\x82\x86\xda\x20\x45\xa0\xb6\x60\x20\x18\xb2\x69\x7b\x4b\xda\x67\x08\xa7\x1e\xce\xdf\xc3\xa9\xba\x0a\x06\x4b\xd8\x81\x1b\x8d\xe0\x06\xb5\x81\x14\x79\x9a\x63\x09\x9c\xa3\x44\x9d\x7a\x75\xa5\x67\x08\xab\x15\xcc\x82\x41\x07\xd6\xa0\x67\x9b\x5a\x34\x30\x59\x80\x86\xcc\x3e\xa2\x87\x8a\xdc\xbb\x42\x93\x9e\x21\x23\x41\x4a\x61\x26\x00\xbb\xe0\x46\xb3\x9e\xe8\x12\x41\x7b\x03\x84\x5c\x91\x2f\xc1\x32\x70\xa8\xb7\x9a\x3a\x8b\x9e\xd5\x26\x22\xad\xfc\x14\xe2\x1c\xce\x3a\x39\x7c\xd6\xde\x38\xa4\x41\x9d\x6a\xfc\x04\xd2\x15\x75\x83\x65\x11\x7c\x89\xf7\x64\x19\x69\x08\x04\x67\xed\xf3\x79\x85\x25\x0f\x60\xb9\x41\x95\xcb\x49\x03\x72\xe5\x42\xa6\xee\x2d\xe7\xf1\xb3\x2e\xd4\x2d\x93\xf5\x59\x1c\xcd\x90\xf3\x60\xa2\x21\x44\xb2\x41\x34\x18\x74\x22\x47\x23\x48\xc6\x60\x4b\xf8\x7a\x73\x09\x9b\x6a\x55\x67\x8d\x0c\xd1\xa6\x92\x72\x32\x56\x49\x99\x78\xde\x6d\xf2\xfa\xb2\x66\x08\x48\x24\x99\x94\x4c\xd3\xe0\x1f\xd5\x07\x0e\x36\x9e\xe6\x56\x7d\xbd\xb9\xfc\x22\xd8\x31\x0d\x21\xb2\xbd\x24\xea\xf0\xb4\x8e\xfe\xe5\x3d\x78\xeb\xf6\xca\xdb\x94\xa9\x2e\x88\x02\xc5\x11\xca\x2f\xc8\x90\xd9\xfa\x0c\xac\x69\xa6\x53\x91\xdb\x96\x10\x0d\x0f\x42\xc8\xb5\xdb\x1d\x2b\x9d\x39\x9c\xe2\xcb\x00\x4d\x26\x48\x74\x64\x5d\xbf\x42\xb9\x08\xbd\x41\x52\xbf\x6b\xd3\x4e\x32\x7e\x1a\x42\xb3\x23\xcc\xaa\x92\x61\x22\x64\x02\xeb\x19\x33\x24\xc8\x08\xb5\x90\xef\x19\x29\x44\xc7\x10\x85\x76\xbd\x57\xab\xbd\x09\x02\xba\x12\x0f\x8f\x4d\x26\x76\xb0\x03\x3d\x08\x6f\x6a\xb5\xee\x13\xe8\x63\x9d\x65\x4d\xf9\x79\x85\xb4\x10\xfe\xd7\x92\xeb\x0b\xae\x13\x3a\x6f\x58\xdb\xca\xa4\xb3\x4e\xfd\x2d\x40\xf1\x40\xdd\xe7\x48\x18\xef\xbc\xfb\x0f\x5c\x78\x42\x92\x35\xc9\x58\x5e\x6c\x98\xf9\x59\x97\x9f\xc2\xdd\xa2\x90\xf8\x26\x20\x19\xab\xf6\x3e\xb6\x66\xb0\x6d\x82\x35\x1b\x2b\x19\x0c\x4e\x7a\x5c\x6f\x0c\xcb\x64\x58\xde\x85\xcb\xa0\x8d\x18\x4c\xd4\xb1\xb5\xbd\x06\x5c\x68\x19\x96\x93\xa5\x75\x18\x70\xae\x19\x34\x21\x10\xce\x2b\x4b\x68\x20\x78\x10\x04\x08\x05\x92\x66\x1b\xbc\xea\x01\x2d\x97\xa0\x3e\x06\x83\x10\xcd\x7b\x1b\x49\x5a\xad\xf7\xed\x3e\xc6\x8d\xe4\xe6\xea\xda\xbb\x45\x4c\xea\x63\xf0\x8c\xdf\x38\xde\x93\xd8\x6b\xf2\x2a\x9f\xac\x0c\x0c\x89\x54\x2c\xce\xbf\xef\x30\xeb\x6b\x2a\x76\x77\x26\xf3\xba\x0a\xfc\x47\xa8\xbc\xa9\x85\x70\x7e\x54\x2b\x4e\x8d\x71\x52\x65\x71\xd4\x99\xe1\x03\x4e\xf4\x44\x0c\xd8\x07\x86\x54\x60\x5e\xd0\x2b\xb4\x92\x4b\x3c\xaf\x61\x92\xf1\x9a\x29\xd1\x10\xac\x79\x41\xab\xf0\x9d\x7a\x85\xa3\x9a\x85\xad\x6e\xd7\x35\xaf\x55\xfb\x5a\x4d\x2f\x01\x1e\x94\x2d\xec\xb7\xf8\xd6\xfa\xac\x72\x9a\xbe\xb7\xcb\xa6\x2a\x9c\x9d\x8a\x1c\xd1\x33\x2d\x20\x0d\x04\x07\xb3\xfc\x29\xfa\xdd\xf7\xc9\x6d\x7d\x87\x7b\xdf\x54\x5d\x2b\xd8\x1a\x88\xe0\xb7\xcd\x61\x94\x70\xd0\x62\x03\x6f\x9a\x89\xc1\x54\x57\x8e\x5f\x1a\x40\xe7\x68\xaa\xed\x4f\xce\xa6\xc3\x59\xd6\xc7\x95\x99\xfc\x14\x33\x48\x3c\x23\x79\xed\x6e\x91\x1e\xb1\xe1\x61\x3b\x0c\x6f\xdd\x0f\x37\xb3\xeb\x5f\xdd\xbb\x9d\x0f\x88\x1c\xc9\xa6\xa9\xfa\x4b\x53\x99\x6b\x17\xff\xba\x7e\x70\x5d\x88\x77\x96\x7d\x6f\x4a\xfc\xd4\x55\x06\x2f\x66\x05\x2f\xee\x74\x76\x0e\x4c\x15\xf6\xab\xfe\x44\xa1\x2a\xca\x73\xf8\xe7\xdf\xb2\xfe\x00\x58\x6e\x0d\xff\x54\x7d\xf0\x3e\x70\x6d\xce\xa5\xba\x70\x0f\xb7\xd3\x1c\x67\x5a\xc9\x57\x53\x13\x26\x67\x8e\x18\xf4\xf6\x20\x39\x6c\x00\xd1\xf6\xac\x84\x55\x37\x87\xd5\x10\xf0\xc7\x8c\x79\x43\xac\x12\xc9\x6a\x67\x9f\xeb\x04\xa1\xa6\xd9\x11\xfe\xbc\x89\x37\xaf\xf1\xa5\x3f\xe9\xb7\xf1\xe3\x00\x2f\xba\x2c\x70\x2a\xf1\x69\x38\x76\x5e\x34\x9b\xa2\x7c\xb5\xbd\x52\x66\x77\xeb\x36\xd9\xeb\x3f\xdb\xdc\xcc\xf6\xf5\xfe\x3f\x17\x9b\xbf\xfe\x0f\x00\x00\xff\xff\xe0\x3f\x74\x57\x09\x0d\x00\x00")

func templateHttpReadTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpReadTmpl,
		"template/http/read.tmpl",
	)
}

func templateHttpReadTmpl() (*asset, error) {
	bytes, err := templateHttpReadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/read.tmpl", size: 3337, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/http/create.tmpl":  templateHttpCreateTmpl,
	"template/http/handler.tmpl": templateHttpHandlerTmpl,
	"template/http/list.tmpl":    templateHttpListTmpl,
	"template/http/read.tmpl":    templateHttpReadTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"http": &bintree{nil, map[string]*bintree{
			"create.tmpl":  &bintree{templateHttpCreateTmpl, map[string]*bintree{}},
			"handler.tmpl": &bintree{templateHttpHandlerTmpl, map[string]*bintree{}},
			"list.tmpl":    &bintree{templateHttpListTmpl, map[string]*bintree{}},
			"read.tmpl":    &bintree{templateHttpReadTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
