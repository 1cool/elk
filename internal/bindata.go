// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/flutter/client.tmpl
// template/flutter/header.tmpl
// template/flutter/model.tmpl
// template/http/create.tmpl
// template/http/delete.tmpl
// template/http/handler.tmpl
// template/http/list.tmpl
// template/http/read.tmpl
// template/http/update.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateFlutterClientTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xca\xc1\x09\x80\x30\x0c\x05\xd0\xbb\x53\x7c\xba\x80\x33\x15\xf3\x8b\x85\x18\xa4\xc4\xd3\x27\xbb\x0b\x9e\xbc\x3f\x09\xc6\x31\x83\x68\xc3\x9f\x4c\xae\xfd\xf0\xc9\xc8\x86\xaa\x0d\x00\x24\x24\xaf\xdb\x7b\xfe\xcc\xc9\x6e\x5c\x9f\x91\xc0\x30\x54\xbd\x01\x00\x00\xff\xff\xd7\x85\x85\xf4\x4b\x00\x00\x00")

func templateFlutterClientTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateFlutterClientTmpl,
		"template/flutter/client.tmpl",
	)
}

func templateFlutterClientTmpl() (*asset, error) {
	bytes, err := templateFlutterClientTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/flutter/client.tmpl", size: 75, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateFlutterHeaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\xbd\x0a\xc2\x40\x0c\xc0\xf1\xbd\x4f\xf1\xa7\xbb\xdc\x33\x54\x13\x3f\x06\x2f\x20\x5d\x3a\x0a\x97\xa2\x20\x1d\xca\x39\x85\xbc\x7b\x7f\x11\x34\x5f\xbf\x9b\x33\xae\xbf\x7f\xef\xbe\x97\x8f\xbf\x9b\xef\x23\x99\x03\x40\x29\xdc\xb4\xea\x6b\x9a\x55\xb8\x98\x28\x27\xc4\xa8\x36\xf3\x34\x79\x5c\x17\xce\x0b\xf7\xa9\xca\x10\x81\x6f\x8d\xcc\x23\x00\x00\xff\xff\x24\xaa\x34\xa3\x55\x00\x00\x00")

func templateFlutterHeaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateFlutterHeaderTmpl,
		"template/flutter/header.tmpl",
	)
}

func templateFlutterHeaderTmpl() (*asset, error) {
	bytes, err := templateFlutterHeaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/flutter/header.tmpl", size: 85, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateFlutterModelTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x92\xcd\x8e\x9b\x40\x10\x84\xef\x3c\x45\x09\xad\x64\xb0\x22\xc8\x99\x55\x94\x48\xf1\xc5\x49\x94\x3d\xac\xef\x51\x07\xda\x78\x62\xe8\x41\x33\xed\x24\x0e\x3b\xef\x1e\x0d\xb0\xd8\xc9\x01\x89\x9f\xee\xfa\xaa\x8a\x19\xc7\x72\x8b\xd6\xea\x75\xe0\x0a\x2c\xda\xda\xc2\xd8\x92\x45\xe3\x55\x97\x2d\x4b\x71\xb8\x0e\x8c\x6d\x19\x42\x92\x8c\x23\x1a\x3e\x1a\x61\xa4\xc7\xee\xa2\xca\xae\xec\x6d\xc3\x5d\x8a\x10\x12\x00\x18\x47\x28\xf7\x43\x47\x7a\x37\x72\x62\x6a\xd8\xad\x33\xa6\x1f\xac\x53\x6c\x06\xaa\xcf\xd4\x72\xf5\xc3\x5b\xf9\x46\x22\x56\x49\x8d\x95\xf2\xbf\xe7\xa2\x21\xa7\x9b\xc7\x08\x2f\xb7\x71\xff\xf0\xb4\x7b\xaa\xb0\x9f\x55\x7e\x9d\x48\x61\x3c\x84\x6b\xf6\x9e\xdc\x75\x71\x3a\x9b\x29\xb7\x98\xd4\x3c\x3b\x43\x9d\xf9\x43\xdf\x3b\xc6\xc2\xc5\x70\x51\x0f\x3d\x31\x5a\x16\x76\xa4\xdc\xa0\xb6\x0d\xc3\x08\xf4\x64\x3c\x8e\xa6\x5b\x72\x47\xb1\x81\xa2\xe7\x71\xc4\x43\xf1\x95\x7a\xc6\x0b\xbc\xd0\x99\x11\x42\xd1\xae\x16\xe3\xe0\x87\x4f\xde\xca\xf3\x1d\x30\xcb\x57\xeb\x37\xfb\x1f\xad\xfc\x64\xa7\xec\x3c\x48\x1a\x18\xf5\x4b\x2f\xfe\x86\xac\x3b\xf2\x1e\x37\x64\x08\x18\x93\x57\x99\xfb\xd7\x59\xbe\xb0\xd7\xd4\xfb\x1d\xec\x71\x0a\x37\xfd\x9f\x9b\xe6\xeb\x6a\xac\x05\xd5\x3b\x58\x87\xcc\x48\xc3\xbf\x91\xf9\xa1\x33\x8a\x4c\xa9\xfd\x62\xed\xf9\x32\xe0\xa1\xd8\xef\x8a\x67\x75\x97\x5a\x0f\xd4\x22\x8d\x3b\x69\x8e\xf4\x4d\x9a\xe3\x6d\x8e\x6c\x2e\x60\x9a\x8a\x46\x72\xdc\x31\xa6\x16\x3e\xf3\x35\x13\xea\xb9\x9a\x8b\x9b\x98\x21\x6c\xf2\x7f\x43\xec\x77\xf3\x11\x7b\x41\xac\x71\xba\x0d\xe1\xfd\xfa\x6d\xc9\xf8\x38\x2d\x85\x78\x04\x59\x9a\x88\x4a\xfe\x06\x00\x00\xff\xff\x39\xe5\xf3\x1d\xbc\x02\x00\x00")

func templateFlutterModelTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateFlutterModelTmpl,
		"template/flutter/model.tmpl",
	)
}

func templateFlutterModelTmpl() (*asset, error) {
	bytes, err := templateFlutterModelTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/flutter/model.tmpl", size: 700, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpCreateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x51\x6f\x13\x39\x10\x7e\xef\xaf\x98\xb3\x2a\xb4\xe9\xa5\x0e\xf7\x5a\x84\x4e\x40\x0b\x44\x07\x2d\x47\x7a\xf0\x80\x90\x70\xd6\xb3\xbb\xa6\x8e\xbd\xb5\xbd\x0d\x21\x97\xff\x7e\xb2\xbd\x9b\x34\x9b\x4d\x08\xe1\x60\x25\x44\xeb\xce\x8c\x67\xbe\x99\x6f\x66\x3c\x9f\x0f\x4e\x20\xd7\x6e\x56\xe2\x19\xa0\x72\xb9\xa6\x42\x0f\x50\x39\xff\x2f\x1d\xe4\xa8\xe8\x0b\xc3\xca\x02\x4e\x06\x8b\xc5\xd1\xd1\x7c\x0e\x1c\x33\xa1\x10\x48\xe1\x5c\x39\x48\x0d\x32\x87\x04\x16\x8b\x23\x00\x80\xf9\xfc\x14\xa6\xc2\x15\x80\x5f\x1c\x2a\x0e\xc7\x40\xde\xb0\xf4\x86\xe5\x48\xa2\x02\x81\xd3\x5a\x34\x8a\x83\xc3\x49\x29\x99\xf3\xf6\x90\x71\x34\x04\xe8\xca\x18\x78\x1b\xf5\x6f\x62\x52\x6a\xe3\x80\xe4\xc2\x15\xd5\x98\xa6\x7a\x32\xc8\xf5\x69\x29\xd9\x2c\x37\xba\x52\x7c\x70\xc7\xa4\xe0\xcc\x69\x33\xb8\xfb\xe3\x21\x81\x10\xd8\x75\x21\x2c\x08\x0b\x0a\x91\x23\x87\x4c\x1b\xb0\xae\x2a\x05\x87\xd1\xf0\x1d\x98\x4a\x62\x1d\x57\x7d\x9f\x61\x2a\x47\x38\x56\x70\xf6\x18\x8e\xe9\xa5\xe6\x68\xe1\x9e\xbf\x83\x01\xbc\x61\x33\xa9\x19\x07\x9d\x01\xf3\x1a\xc7\x8a\x5e\xb2\x09\xc2\x62\x01\x11\x0b\x30\x78\x5b\xa1\x75\x74\xa9\xe5\xb1\x5d\x17\x7d\x16\x24\xdf\x46\x41\xb0\xce\x54\xa9\x83\xf9\x52\x21\x3a\xe3\xdd\xbf\x3a\xbf\x3a\x83\x97\xec\x4e\xa8\x1c\x98\x94\x50\x6a\xa1\x1c\x1a\x0b\x05\x1a\x04\x8b\x38\xb1\xa0\xb4\x03\x23\xf2\xc2\x51\x78\xcd\x66\x63\x04\xe7\x83\x4e\x99\x82\x31\x02\xd7\x0a\x41\x28\x60\x4a\xbb\x02\x0d\x4c\xd9\x0c\x28\xa5\x31\xea\xf5\xfb\x9a\xe0\xb3\x10\xbc\xa2\xcf\x05\x4a\x6e\xd7\xf2\x75\x4f\xf8\x38\xa3\xa3\xe0\x77\x10\xf3\xe1\x9f\xc4\xd3\xeb\x59\x89\xfe\x4f\xde\xe5\xc5\x02\x3e\x7d\xb6\x5a\x9d\x91\xf9\x1c\x84\xe2\xf8\x05\x12\x5b\x4a\xe1\x20\x71\x2c\x7f\xa5\xf5\x4d\x55\xae\x2c\x5d\xb3\x1c\x88\x17\x27\x3d\x20\x7d\xd2\x83\x87\xb0\x58\x90\x8e\xcb\xeb\x1a\xab\x13\x2e\xb4\xba\x66\xb9\xf5\x76\x9e\x28\xa5\x5d\x38\xb1\xf4\x42\xde\x00\x59\x95\x67\x23\x8d\xc1\x17\x5f\x63\x64\x59\x5f\x9f\xda\x48\xf8\xe3\x76\xdc\x2b\x80\xb0\x06\xe8\x82\xe7\xb8\x1d\x1f\x6c\xe1\xe3\x11\xc8\xfc\xf1\x3f\x4a\xdc\x56\xbe\x0a\x3c\x60\x28\xad\xff\xf1\xc3\xc7\xa5\x33\x51\x37\xa0\x38\x3c\x3f\x00\x4d\xfc\x9f\xd0\xc4\x4d\x34\xab\x92\x1f\x8a\xe6\x3d\x90\x6a\xb6\xd5\x7c\x8a\x54\xa8\xb9\x63\x81\x81\xc2\x69\x8b\x57\x4c\x71\xb0\x4e\x1b\xb4\x20\x9c\x2f\x66\x57\x20\x70\xe6\xd8\x98\x59\x5c\xd1\x2c\xab\x54\x0a\x49\xb1\xae\xfc\x92\x29\x2e\xd1\xf4\xea\x7b\x92\x29\xf8\x2e\x44\xdf\xa2\x2d\xb5\xb2\xf8\xde\x08\x87\xa6\x0f\x06\x4e\xea\xf3\x40\xc9\x5e\x8b\x8c\xd2\x67\xbc\xa0\x52\xe7\xf4\xbd\x70\x45\xf2\x95\x95\x75\x52\x12\x32\x41\x57\x68\x4e\xfa\x40\xe2\x15\xa4\xd7\x5b\xd3\x1d\x0c\xe0\x05\xba\xe0\x73\xa9\xad\x0b\x8e\xd3\x35\x89\x3b\x66\x80\xef\x68\x10\x6b\xc2\x22\x03\x34\xc6\xfb\xe3\x73\x4b\x2f\x71\x7a\x8e\xa9\xe6\x68\x12\x43\x9f\x6a\x3e\xeb\xd1\xf8\x7b\xf2\x80\xf7\x1e\x05\xd1\xdf\x1e\x83\x12\xb2\x15\x51\x88\x8a\x5e\x18\xa3\x4d\x42\xd0\xff\x07\xdc\xeb\xf9\x3a\x0b\x45\xd3\x07\x1f\x64\x14\x40\x63\x5a\x41\xf9\xcf\xa0\xe2\x68\xe8\x53\xc6\x6b\x3f\x93\x69\x1f\x4c\x1f\x88\x50\xa1\x3a\x82\x1d\xdf\xdc\x84\xca\x49\x97\xba\xab\x8c\x5a\x3b\x5e\xb4\x81\x7b\x57\x57\xd9\x32\xe3\x74\x0b\x16\x05\x5d\x76\xff\xba\xfc\x93\x6f\x86\x1f\xb5\xfb\xa0\x6f\xbc\x05\x34\x86\x26\x27\x2b\x2b\xc3\x18\xc4\xbb\x25\x2b\x02\x14\xbd\x47\x5e\x7c\xd3\x56\x07\x9c\x0d\x9f\x54\xde\x4c\x84\x10\xc1\x1e\xc0\xde\x03\x77\xe8\xbb\xbd\x62\x72\x84\xe6\x0e\x4d\x54\x8a\x28\x2b\x21\xb7\x69\x6e\xe0\xba\x89\x6d\xf4\x77\xa8\x32\x9d\x90\x15\xf1\x21\x63\x42\x22\xff\x81\xdc\x7b\xe9\x83\x32\x3d\x62\x77\xdb\xb2\x3c\x8e\x09\x4e\xa5\x40\xe5\xe8\x1a\x4d\x68\xcd\xea\x0d\xc6\xc5\xc1\x39\x2d\x98\x03\x36\xd6\x95\x03\x2b\x45\x8a\x90\xc5\x91\xe6\xfc\x79\xe1\x6f\x4c\x2b\xeb\xf4\x04\x26\xcc\xd8\x82\x49\x89\xc6\xfe\x79\xf8\x54\x14\x19\x70\xda\x39\x1a\xb7\xd6\x60\x88\x8f\x8e\xd0\x75\xa9\x25\x27\xdd\xe6\x36\x11\xde\x98\x54\x3f\x3a\xc0\x96\xa1\xb4\xa7\xd8\xee\x50\xda\x33\xae\xcb\xf4\x2a\xec\x68\xff\x75\x15\x67\xcc\x08\xdd\xbd\x98\xdb\xf7\x76\xd7\x7a\x33\x40\xbf\xe7\x9e\x27\x3c\x60\xdb\x7d\x0d\xa5\x74\xdb\x4d\xa7\xed\x39\xd6\x7c\x7b\x81\xef\x4b\xdc\x8f\x30\x3f\xbe\x36\x47\x97\xff\xb0\xdf\x34\xb3\x31\xf5\x6c\x48\x0c\x7d\xa6\x95\xc3\x2f\x2e\x69\x11\xb0\x6e\x7b\xfb\xf6\x75\x1b\xd7\xc7\x7b\xc4\xf9\x17\x6e\x70\xcc\xc6\x7e\x6a\xef\x4d\xf5\xef\xec\x44\xfb\x70\xfe\x2d\x86\x4d\x1a\x95\x33\xb3\x75\x2c\x6e\x77\x50\xfe\xef\x0a\xcd\x2c\xe9\xd1\xf7\x7e\x05\x4e\xd6\xa2\x92\x7a\x8a\xc6\xcb\x0c\xcf\x13\xac\xd5\x86\xe7\xed\x4a\xea\x1d\xb5\x13\x1b\x5f\x2c\x9e\x0c\xd7\xfa\x95\x77\xe9\x58\xdd\x5f\x1d\x37\x82\x1b\x0c\xe0\x82\xe5\x68\x20\xfa\x1f\x58\x14\x7a\x0a\x33\x71\xfd\x17\x06\x39\x68\xd5\xbc\x08\x74\x89\x26\xd4\x1e\xed\xda\x14\xe9\x33\xcd\x11\xc8\xed\xc6\x55\x5b\x6a\xae\x2e\x94\xc7\x70\x4b\xaf\x94\x9c\x1d\x5e\x27\x76\x2a\x5c\x5a\xc4\xc9\xe7\xdf\x28\xed\xad\xa7\xf9\x52\x66\x11\x4e\x7c\x26\x2e\xb5\x7b\xee\xdf\x5a\x21\xfd\x67\x5b\x29\xd7\x4c\x96\xce\x92\x0b\xef\x95\xcc\x5b\xa9\x8b\x6f\xa8\x5c\x23\x3a\x3c\x6f\xd2\x4c\xfa\xb0\x3d\x83\xfb\x8d\x50\x58\x15\x6f\xe3\x77\xb3\xa1\x7c\xcb\xb1\x5d\x06\x3b\xa7\xeb\x06\x4c\x23\xa1\xf2\x4a\x32\xf3\x4d\xa4\x6a\xaa\xf2\xaa\x94\x22\xf5\xc5\x12\xe8\x10\x5e\xaa\xbb\x18\xfb\x0b\x40\xdb\x5c\xec\x56\x4e\x76\x03\x18\x5d\x0f\x6c\x12\x1c\x08\xfc\xee\xb7\xbf\x54\xab\x3b\x3a\x74\x9a\xed\x4d\xc9\x3d\xf1\xe6\x98\xb1\x4a\xba\x3d\xc0\x8d\x7d\x30\x43\x97\x16\x5b\x3b\x21\x64\x46\x4f\x80\x8f\x7f\x1d\xbe\x07\xec\x76\x3b\x10\x59\xec\xe8\xb5\x9f\x97\xa3\xc5\x16\x68\x44\x96\xd1\xd7\x71\xe1\x49\x1e\x34\x07\x57\x65\x78\xe7\x6d\x36\x80\xa1\x4a\x65\xc5\xf1\x62\x52\xba\xd9\x35\xcb\xcf\xc0\x99\x0a\xfb\x1b\x62\x2f\x8c\xae\x4a\x7b\x06\x1f\x3e\xc6\x85\x7f\xbe\x6a\xac\xc7\xed\x87\xe4\x28\x2d\x70\xc2\xea\xdd\x2d\x2a\x86\x5d\x4e\x73\x5c\xbd\x88\xbb\x39\x4a\x56\xe3\x15\x16\xeb\x5e\x2c\xfa\x80\x07\xce\x49\x8b\x46\x30\x29\xbe\xc6\x25\x38\x54\xcb\x4f\x2c\x83\x9f\x34\x50\x77\x37\xdd\x78\x29\x1e\xde\x73\xd7\x3d\xaa\x63\xb8\xfa\xab\x76\xf9\x73\xef\x68\xdd\xab\xd5\xb3\x7f\xf9\xd3\x7f\x01\x00\x00\xff\xff\xbf\x52\xbd\x03\x6a\x14\x00\x00")

func templateHttpCreateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpCreateTmpl,
		"template/http/create.tmpl",
	)
}

func templateHttpCreateTmpl() (*asset, error) {
	bytes, err := templateHttpCreateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/create.tmpl", size: 5226, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpDeleteTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\xdc\x36\x10\xbd\xfb\x57\x4c\x09\x1f\xb4\xc6\x9a\x3a\xf5\xe2\x22\x87\xb6\x9b\x26\x02\x02\x37\xb0\x93\xe6\xcc\x15\x47\x12\x11\x69\xa8\x0e\x47\x5e\x27\xea\xfe\xf7\x82\x92\xf6\x5b\x75\x7d\x09\x01\x61\x57\xd2\xcc\xe3\x9b\x37\x6f\xc4\xbe\x4f\x6f\xa0\xf4\xf2\xad\xc5\x3b\x40\x92\xd2\x6b\xe7\x53\x24\x89\x57\x9e\x96\x48\xfa\x1d\x9b\xb6\x82\x9b\x74\xbb\xbd\xba\xea\x7b\xb0\x58\x38\x42\x50\x95\x48\x9b\x5a\xac\x51\x50\xc1\x76\x7b\x05\x00\xd0\xf7\xb7\xb0\x71\x52\x01\x3e\x0b\x92\x85\x6b\x50\x1f\x4d\xfe\xd5\x94\xa8\xc6\x04\x05\xb7\x53\xe8\x18\x0e\x82\x4d\x5b\x1b\x89\x78\x68\x2c\xb2\x02\x7d\x00\x83\x88\x31\xdd\xb9\xa6\xf5\x2c\xa0\x4a\x27\x55\xb7\xd6\xb9\x6f\xd2\xd2\xdf\xe6\x95\x4b\xe3\xf5\xf4\xb3\x82\xa1\x94\x4f\x95\x0b\xe0\x02\x10\xa2\x45\x0b\x85\x67\x08\xd2\xb5\xce\xc2\x63\xf6\x17\x70\x57\xe3\x54\xc9\xb4\x03\x1b\x2a\x11\xae\x09\xee\xde\xc0\xb5\xbe\xf7\x16\x03\x1c\x31\x4c\x53\x58\x0d\x25\x02\x63\xe3\x9f\x30\x80\x89\x59\xd7\xa4\xef\x4d\x83\xb0\xdd\x42\xc1\xbe\x01\xa9\x10\xac\x11\xb3\x36\x01\xf5\x3e\xb9\xe8\x28\x87\xa4\x3a\x4d\x78\x6f\xc8\xd6\xc8\x8b\x09\x37\xd9\x40\xd4\x45\x3f\x60\x68\x3d\x05\xfc\xc2\x4e\x90\x97\xc0\x70\x33\x3d\xff\xbb\xc3\x20\x0b\xe8\xf7\xb0\x71\xd5\x91\x6f\xa5\x6b\x5f\xea\x2f\x4e\xaa\xe4\xbb\x69\xf5\xa3\xb0\xa3\x32\x51\x0d\x4a\xe5\xad\x5a\x82\x1a\xb7\x50\x8b\xc5\x49\x6e\x9a\x42\xb6\x8a\x1a\x7d\x7e\xf8\x00\xad\x61\xd3\xa0\x20\xeb\x93\x98\xd8\x48\x57\x44\xda\xd9\x4a\x67\x21\x23\x39\x56\x65\xb7\x9c\x5d\x02\x32\x47\x2e\x41\x38\xf7\xf4\xa4\x7f\x15\xef\x92\xbc\x72\xfa\xf3\xc3\x87\x8f\x11\x3b\xe1\x25\x28\x67\xcf\x49\x0c\xe9\xc5\x90\xfd\xd3\x1b\x20\x57\x9f\x15\xb8\x2f\x54\xbf\x65\xf6\x9c\x28\x8c\x3f\x50\xa2\x88\xa3\x12\x9c\x1d\x85\xef\xb8\x3e\x94\xa0\x96\x70\xac\x83\x8b\x1a\xcc\x53\x19\x03\x47\x64\x64\x9e\xe1\x16\x17\x23\x59\x64\xfd\x9b\xb1\x53\x17\x92\xcd\x12\x46\x0c\x68\xba\x20\xb0\x46\x30\x04\x8e\x04\x4b\x64\x28\x19\x8d\x20\xc3\x77\x64\xaf\xfe\x0b\x51\x3a\xa6\x8b\x57\xdb\x33\xed\x01\xeb\x80\xf3\x82\x47\xad\x67\x6b\xba\x80\x20\x7b\x32\x6b\x47\x82\x0f\xd6\xc9\x6b\x87\x24\xfa\xc4\x9b\x7a\x34\xcc\x9f\x84\xd9\x2a\xe9\xfb\x83\x03\xde\x9b\xf0\xce\x7f\xfa\xd6\xc6\xa0\x31\x23\x5b\xe9\xe9\x3e\x71\x76\x71\xa0\xec\xec\x7e\x6c\x17\xfa\xed\x33\xe6\x09\xeb\xdf\x3d\x09\x3e\x4b\xb2\x58\xfc\xf2\x72\xc3\xc3\xc6\x49\x5e\xc5\x18\x9d\xc4\x2f\xd2\xb9\xeb\x77\x2b\x37\x01\xe1\x26\xd2\xbf\xf7\xf2\x87\xef\xc8\x0e\xad\xbc\x9b\x0d\x86\xc1\x45\x19\x15\x3e\x51\x47\xd5\xfe\x03\x5f\x71\x6d\xd6\x71\x84\xc9\x0b\x14\x11\x65\x32\x50\x46\xb2\x0b\xcd\x56\x3b\x6d\xd4\x12\x9c\x7d\xa5\x71\xe0\x60\x9e\x1d\xc1\x9d\x75\xfe\x8f\xc1\x3c\xa0\xc5\xc2\x74\xb5\xbc\x54\xe0\xc9\x98\x0c\x9f\xe5\x38\x27\xf3\xdb\x0d\xa3\x63\xd7\x3f\xa0\xdc\x8c\x04\x99\x4c\xfd\x88\xfc\x84\x3c\x26\x8e\x95\x93\xab\x2f\xb3\x2f\x1d\x3e\x33\x21\xa7\x41\x2f\xb7\x72\x3c\x8f\x5e\xd1\xc8\x53\x2e\xfb\x66\x0d\x56\x25\x49\x36\x87\xf7\xe7\x87\xd1\xfe\xdf\xbf\x01\x00\x00\xff\xff\xbb\x5c\xf3\x26\x3b\x07\x00\x00")

func templateHttpDeleteTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpDeleteTmpl,
		"template/http/delete.tmpl",
	)
}

func templateHttpDeleteTmpl() (*asset, error) {
	bytes, err := templateHttpDeleteTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/delete.tmpl", size: 1851, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpHandlerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x92\x41\x8b\xdb\x3e\x10\xc5\xef\xf9\x14\x0f\x11\xfe\x24\x26\x91\xfe\xbd\x06\x7a\xea\xa1\x2d\x94\x50\xd8\xb2\x3d\xab\xd6\x44\x16\x95\x25\x23\x8f\xb3\xdd\x1a\x7f\xf7\xa2\xd8\xeb\xc4\xac\x05\x82\x27\xf4\xd3\x9b\x79\x83\xfa\x5e\x15\xb0\x91\x5f\x1b\x3a\x81\x02\xdb\x28\x5d\x54\x14\x38\xef\x52\x59\x0a\xf2\x73\xd2\x4d\x85\x42\x0d\xc3\x66\xd3\xf7\x30\x74\x71\x81\x20\x2a\xe6\x46\x55\x3a\x18\x4f\x49\x60\x18\x36\x00\xd0\xf7\x47\xbc\x38\xae\x40\x7f\x98\x82\xc1\x16\xe2\xbb\x2e\x7f\x6b\x4b\x62\x7c\x21\x70\x9c\xd0\x11\x07\x53\xdd\x78\xcd\xd9\x90\xb4\xc9\x56\xf2\x6e\x86\xec\x31\x9d\x5c\xdd\xc4\xc4\x10\xd6\x71\xd5\xfd\x92\x65\xac\x95\x8d\xc7\xc6\xeb\x57\x9b\x62\x17\x8c\xba\x6a\xef\x8c\xe6\x98\xd4\xf5\xc3\xff\x02\xb7\x64\x3f\x2a\xd7\xc2\xb5\x08\x44\x86\x0c\x2e\x31\xa1\xe5\xae\x71\x06\x4f\x5f\x9f\x91\x3a\x4f\x53\xb0\xa9\x5e\xd2\xc1\x12\xb6\x01\xa7\x8f\xd8\xca\x73\x34\xd4\xe2\xa1\x5f\xa5\x32\xb4\x0d\xf2\xac\x6b\xc2\x30\x7c\x19\xe3\x63\x1c\x43\x8b\x9c\x10\x65\xea\x0c\x62\x43\x49\xb3\x8b\xa1\x45\x0c\xe0\x8a\x96\x0f\x51\x47\x43\x5e\xce\xc6\x79\xfe\xeb\xd6\x2d\xa7\xae\x64\xf4\x33\x9a\x57\xe9\x1d\x05\xce\xaa\xa0\xc0\xf2\xd3\xed\xb8\x20\x7c\xb4\x93\x2a\xfe\xea\x46\x7e\x8b\xd6\x52\x5a\x10\xf3\xb8\x50\xcc\x52\x3e\x8f\x8a\x66\x72\x1a\x4d\x5e\x97\x2e\x94\x38\xd3\xcb\x5a\x9b\xbb\xf2\xb1\x93\x03\xfc\x63\xd9\x03\xae\x6b\x35\xf6\x28\x56\x13\x2f\xa3\x26\xe2\x2e\x05\xfc\xb7\x86\x2e\xc9\xfb\x60\x4e\x37\x79\x78\x77\xeb\xa3\x3d\xbd\x49\xf9\xd3\x71\xb5\xcb\x4d\x3e\x71\x72\xc1\xee\xc4\xdb\x5f\x3e\x40\xac\x15\x13\xfb\xfd\x7b\xc7\x39\xd5\x09\xd7\xe5\xed\xb0\x59\xaa\xfb\x67\x9e\xd5\xbf\x00\x00\x00\xff\xff\xee\x48\x80\xb8\x7c\x03\x00\x00")

func templateHttpHandlerTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpHandlerTmpl,
		"template/http/handler.tmpl",
	)
}

func templateHttpHandlerTmpl() (*asset, error) {
	bytes, err := templateHttpHandlerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/handler.tmpl", size: 892, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpListTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\x51\x6f\xdc\x36\x0c\x7e\xef\xaf\x60\x85\x60\xb5\x03\x47\xb7\x62\x6f\x37\xdc\x43\x56\x04\x59\xb0\xac\xc9\x92\x0e\x7d\x18\xf6\xa0\x3b\xd1\xb6\x10\x59\xf2\x51\x74\xd2\xc4\xf5\x7f\x1f\x64\x3b\x89\x7d\x97\xb5\xc3\x30\xac\x02\x0c\xd8\x34\xf9\xf1\x13\x3f\x9a\x72\xdb\x2e\x0e\xa1\xf0\x7c\x5f\xe3\x12\xd0\x71\xe1\xa5\xf1\x0b\x74\x1c\xaf\xcd\xa2\x40\x27\x4f\x49\xd5\x25\x1c\x2e\xba\xee\xd5\xab\xb6\x05\x8d\xb9\x71\x08\xa2\x64\xae\x17\xd6\x04\x16\xd0\x75\xaf\x00\x00\xda\xf6\x08\xee\x0c\x97\x80\x9f\x18\x9d\x86\x03\x10\x97\x6a\x73\xa3\x0a\x14\x83\xbb\x80\xa3\xd1\x75\x70\x07\xc6\xaa\xb6\x8a\x23\x1a\x2a\x8d\x24\x40\x3e\x83\x41\xc4\x88\x49\xc7\x47\x52\xae\x40\x38\x70\xb0\x5c\xc1\x81\x7c\xef\x35\x06\x98\xc0\x2d\x16\x70\x85\x4a\x43\x8e\xbc\x29\x31\x00\x97\x18\xa3\x0e\x9c\x7c\xaf\x2a\x84\xae\x83\xca\x6b\xb4\x60\x34\x3a\x36\xb9\x41\x0d\xeb\x7b\x50\x50\x98\x5b\x74\xd0\x90\x3d\xaa\x15\xa9\x0a\x19\x09\x72\xf2\x55\x04\x98\x82\x6b\xc5\x6a\xad\x02\x82\x72\x1a\x08\xb9\x21\x17\xc0\x30\xb0\xef\x53\x6d\xac\x41\xc7\xf2\x29\x22\x6f\xdc\x06\x92\x12\x0e\x67\x1c\x7e\x56\x4e\x5b\xa4\x14\xce\x4d\xe0\xe4\x0e\x62\x55\xe4\x15\x86\xda\xbb\x80\x1f\xc9\x30\x52\x06\x04\x87\xa3\x7d\xdb\x60\xe0\x14\xda\x27\xd4\xb8\x6c\x2c\x40\x29\xad\x2f\xe4\x47\xc3\x65\xf2\xa0\x6a\x79\xcd\x64\x5c\x91\x88\x0a\xb9\xf4\x5a\x64\x20\x62\x02\x91\xa6\xb3\xc8\xed\x10\x39\x52\x9d\x11\x93\xbf\x35\x48\xf7\xc9\xdc\xff\x59\x50\x5d\x60\xf8\xe0\xcf\xbd\xd2\x51\x00\x31\x93\x7d\xba\x16\x0b\x38\x51\x05\x12\xd8\xe8\xda\x87\x01\x97\x8a\x41\x11\x02\xe1\xb6\x31\x84\x1a\xbc\x83\x88\x00\xbe\x46\x52\x6c\xbc\x93\x7b\x40\x6d\x0b\xf2\x9d\xd7\x08\x62\xbb\x97\x28\xd2\x1a\x7b\x63\x6a\xbe\x55\x04\x48\xfd\xe5\x69\xf6\xa6\x56\x05\xc6\xad\xbf\x9d\x59\x4d\x0e\x3a\x5a\x49\xfe\x7e\x75\xfe\xb8\x7f\x79\x8a\x9c\x88\x18\x20\xd2\x1f\x41\xc3\xeb\x15\x08\xb1\x23\xc0\x23\x64\xd6\xa7\x5b\x41\x60\xda\x78\x77\x2b\x8f\xd9\x9b\x44\xa7\x7b\xbe\x26\xef\x1d\x5f\xaf\xc0\x19\xfb\x02\x56\x2f\xaa\x3c\x73\xb9\x4f\x44\x4f\x1e\x6a\x45\xc1\xb8\x02\xb6\x91\x14\x3c\xf7\xe5\x9b\x98\xf6\x8d\xc8\x60\xaa\x79\x4f\x36\x03\x9d\x0e\xe6\x93\x88\x90\x20\x51\xba\xcf\x24\x2e\x42\xa7\x91\xe4\x4f\x4a\x8f\xfd\x95\xdc\x65\x40\x19\xf4\x38\x50\x35\x81\x61\x1d\x9b\x1c\x8c\x63\x8c\x52\x16\x84\x2a\x26\x7f\x40\xf2\xe2\xef\x30\xe3\xe7\xb0\xf7\x6a\xae\xcf\xfc\xc9\x30\x56\xe1\x12\xe9\x72\xd4\xe6\x87\xef\xff\xa9\x38\xd3\xc8\x2f\x8b\x34\xf5\xfc\x06\x62\x4d\xd3\xef\x8a\x36\xdb\xc4\x7f\x20\xde\xac\x9c\xff\x9b\x88\x18\x86\xb2\x2e\x57\xb0\x95\xe7\xa6\x32\x9c\x4c\x89\xa4\xf2\x22\xcf\x03\x72\x92\xf4\xbd\x75\x04\x6f\x53\x38\x84\xb9\xc7\xb1\xb5\x09\xc9\x77\xde\x31\x7e\xe2\x64\x67\xdb\x5f\x13\xc3\x8e\x05\x1b\x95\xe8\x47\x7f\x94\x62\x32\xda\x3e\xc3\x0d\xae\xd5\x1a\x3e\x43\x6d\x1b\x52\xb6\xeb\x86\xe9\xae\xd7\xe2\xeb\x25\x1f\xcb\x7d\xe6\x18\xc9\x29\x7b\x8d\x74\x8b\x34\x04\x0c\x75\x77\xc6\xbe\x14\xb5\x57\xc8\x79\xd9\xf4\x53\xd5\x42\x89\x64\xf2\x5c\xfe\xaa\x28\x94\xca\x26\xdf\x3d\x1a\x2e\xea\x38\x17\xc3\xfe\x96\xcf\xdc\xc6\x36\x1a\x4f\xaa\x9a\xef\x3f\xa8\x62\x09\x4c\x0d\x66\x7b\x6e\xa7\xe4\x9b\x3a\x2c\xe1\x8f\x3f\x43\xdf\x71\xed\xf3\x30\x3f\x90\xc7\xce\x79\xee\x07\x6f\x90\x27\xf6\xe6\x7a\x53\x62\xa5\x64\x3c\x3d\x87\xb0\x78\x1e\xc4\xe1\x1b\xcf\x60\x1b\xe2\xf1\x20\x5e\xa8\xe8\x60\x8d\x83\xf8\xa8\xeb\xa0\x9b\x73\xe8\x32\xc0\xf0\x2f\xc5\x0c\x48\x46\x59\xf3\xd0\x33\x1c\xc6\xf9\xb7\xd3\xea\xf1\x5b\xff\x42\x4b\xc5\x7f\x8b\x21\x3b\xea\x91\xe8\x99\xe3\x44\xa8\xca\x37\x8e\x45\x06\x16\x5d\x82\x21\xdd\x21\x3d\x12\xbe\xf8\x65\xe4\x37\x19\x46\xbb\xbf\x40\x4f\x77\x7f\x05\x00\x00\xff\xff\x94\xf1\xf1\xbd\xaf\x09\x00\x00")

func templateHttpListTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpListTmpl,
		"template/http/list.tmpl",
	)
}

func templateHttpListTmpl() (*asset, error) {
	bytes, err := templateHttpListTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/list.tmpl", size: 2479, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpReadTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x4f\xe4\x46\x13\xbe\xf3\x2b\xea\xb5\xd0\x2b\x0f\x19\x7a\x4e\xb9\x20\xed\x61\x03\x84\xb5\x42\x60\x03\x6c\x38\x44\x39\xf4\xb8\xcb\x76\x0b\x4f\xb7\xa7\xba\x0c\x3b\x4c\xe6\xbf\x47\x65\x7b\x3e\xed\x04\x12\x65\x5b\xb2\xc0\xee\xaa\xea\xa7\x3e\x9e\xa7\x67\xb9\x9c\x9c\x40\xee\x79\x51\xe1\x19\xa0\xe3\xdc\x2b\xeb\x27\xe8\x58\x9e\x74\x92\xa3\x53\x57\xa4\xab\x02\x4e\x26\xab\xd5\xd1\xd1\x72\x09\x06\x33\xeb\x10\xa2\x82\xb9\x9a\x10\x6a\x13\xc1\x6a\x75\x04\x00\xb0\x5c\x9e\xc2\x8b\xe5\x02\xf0\x2b\xa3\x33\x70\x0c\xd1\x67\x9d\x3e\xe9\x1c\xa3\xd6\x3c\x82\xd3\xce\xb4\x35\x07\xc6\x59\x55\x6a\x96\x68\xa8\x0d\x52\x04\x6a\x1b\x0c\x24\x46\xf7\x66\x67\x95\x27\x86\x28\xb7\x5c\xd4\x53\x95\xfa\xd9\x24\xf7\xa7\x69\x61\x27\xf2\x3c\x7f\x1f\x41\x93\xc8\x43\x61\x03\xd8\x00\x0e\xd1\xa0\x81\xcc\x13\x04\xae\x2b\x6b\xe0\x3e\xf9\x15\xa8\x2e\xb1\xcb\xa3\x3b\x81\xb4\xcb\x11\x8e\x1d\x9c\x7d\x80\x63\x75\xe3\x0d\x06\xd8\x41\x38\x99\xc0\x1d\x6a\x03\x19\x72\x5a\x60\x00\x2e\x50\xbc\x8e\x9d\xba\xd1\x33\x84\xd5\x0a\x66\xde\x60\x09\xd6\xa0\x63\x9b\x59\x34\x30\x5d\x80\x86\xdc\x3e\xa3\x83\x9a\xca\xd3\x4a\x93\x9e\x21\x23\x41\x46\x7e\x26\x01\x76\x83\x1b\xcd\x7a\xaa\x03\x82\x76\x06\x08\xb9\x26\x17\xc0\x32\xb0\x6f\x8e\x4a\x4b\x8b\x8e\xd5\xc6\x23\xab\x5d\x0a\x71\x01\x27\x7b\x18\x3e\x69\x67\x4a\xa4\x51\x03\x35\x7e\x01\x29\xb4\xba\xc3\x50\x79\x17\xf0\x91\x2c\x23\x8d\x81\xe0\xa4\xfb\x3e\xaf\x31\xf0\x08\x96\x9b\xa8\xb2\x4a\x29\x40\xa1\x4a\x9f\xab\x47\xcb\x45\xfc\xaa\x2b\x75\xcf\x64\x5d\x1e\x47\x33\xe4\xc2\x9b\x68\x0c\x91\x1c\x10\x8d\x46\x7b\x9e\x93\x09\x24\x17\x52\xf2\x2f\x77\xd7\xb0\xc9\x56\xed\xd9\xc8\x5c\xd8\x4c\x20\x27\x17\x2a\x09\x89\xe3\xdd\x22\xaf\x97\x35\x63\x40\x22\x41\x12\x98\x52\xef\x9e\xd5\x47\xf6\x36\x4e\x0b\xab\xbe\xdc\x5d\x7f\x96\xd8\x31\x8d\x21\xb2\x3d\x10\x8d\x7b\xd6\x78\xff\xef\x03\x38\x5b\x1e\xa4\xb7\x49\x53\x5d\x12\x79\x8a\x23\x94\x3f\x90\x23\xb3\x75\x39\x58\xd3\x76\xa7\xa6\x72\x9b\x42\x34\x86\xdd\x2a\x58\xa9\xc0\x30\x94\xd6\xb0\x8d\x8c\x44\x03\xd8\x64\x11\x3a\x83\xa4\x7e\xd0\xa6\xeb\x41\xfc\x32\x86\x36\x06\xcc\xea\xc0\x30\x95\x31\x00\xeb\x18\x73\x24\xc8\x09\xb5\x8c\xcd\x2b\x92\x8f\xfe\x2a\xa2\x0c\x4c\x6f\x6b\x75\x50\x7b\xc0\x32\xe0\x70\xc1\xa5\xd6\x83\x39\xf5\x42\x38\xd3\x50\xf7\xb0\xf5\xe7\x0d\xca\x66\x58\xe7\x35\xd2\x42\x26\xb7\x21\x4b\x9f\x2a\x7b\xae\xf3\x76\xde\xba\x01\xdf\xb3\x53\xbf\x48\xa0\x78\xa4\x1e\x0b\x24\x8c\x77\xf6\xfe\x80\xd2\xbf\x20\x89\x4d\x72\x21\x1b\x9b\x99\xfa\xa4\xc3\x95\x7f\x58\x54\xe2\xdf\x3a\x24\x17\xaa\x7b\x8f\xad\x19\x6d\x8b\x60\xcd\x46\x57\x46\xa3\xa3\xde\x94\xb6\xea\x65\x72\x0c\x0f\xfe\xda\x6b\x23\xd2\x10\xed\x69\xdc\x41\x01\x2e\xb5\x34\xab\x14\xd3\xc6\x0d\xb8\xd0\x0c\x9a\x10\x08\xe7\xb5\x25\x34\xe0\x1d\x48\x04\xf0\x15\x92\x66\xeb\x9d\xea\x05\x5a\x2e\x41\x9d\x7b\x83\x10\xcd\x7b\x07\x09\xac\x1d\x21\x5c\x2f\xdc\x90\x65\xae\x6e\x5d\xb9\x88\x49\x9d\x7b\xc7\xf8\x95\xe3\x83\x01\x7c\x8b\x18\xe1\xc5\x4a\xc3\x90\x48\xc5\x72\x0d\x1c\x6a\xc3\x7a\xa5\x22\x54\x27\xd2\xaf\x1b\xcf\x3f\xfa\xda\x99\x66\xe4\xcf\x06\x8d\xa1\x61\x5b\xe2\x32\x1f\x47\x7b\x2d\x7c\xc2\xa9\x9e\x8a\x72\x3a\xcf\x90\x49\x94\x8e\x68\x89\xe3\xb5\x69\x72\xb1\x1e\x86\x68\x0c\xd6\xbc\x93\x60\xb0\x25\xd9\x1a\xe0\x9a\x62\x6f\x21\x18\x0e\xb8\x97\xf0\xbd\x75\x79\x5d\x6a\x7a\x33\xe7\x4e\x61\x4c\x5d\x95\x36\x15\x72\xa0\x63\x5a\x34\x57\xd1\x20\x8c\x6f\x90\x7e\x5f\x63\xb6\x68\x86\x4b\xd1\x62\x6c\xa6\xdf\x1a\x88\xe0\xbb\x8d\x04\x27\xec\xb5\x50\x68\xf8\x50\x83\x99\xae\x4b\x7e\x47\x3d\x5a\xc5\x6d\xb4\x41\x24\x77\x18\x46\xa3\xc2\x66\xfa\x0d\x4a\x92\x38\x46\x72\xba\xbc\x47\x7a\xc6\xb6\x89\x5d\x6d\x9c\x2d\xfb\xde\x7d\xae\x0f\x88\xed\xbe\xd1\xce\xed\x55\x20\xd9\x2c\x53\x3f\x6b\x0a\x85\x2e\xe3\xff\xaf\x3f\xdc\x56\x42\xff\xd0\xa7\x57\xe2\xd2\xb2\x36\x78\x39\xab\x78\xf1\xa0\xf3\x33\x60\xaa\x71\xdc\x33\xbb\x22\x5f\x57\xe1\x0c\x7e\xfb\x3d\x34\xb7\xd2\x72\xab\x59\xc7\xea\xa3\x73\x9e\x1b\x7d\x09\xea\xb2\x7c\xba\x4f\x0b\x9c\x69\x25\x57\x76\xeb\x26\xb2\x29\x1a\xb3\xd5\xc2\x61\x5a\x44\x5b\xb9\x87\xd5\x3e\x86\xd5\x18\xf0\x9f\x69\xcb\xa6\xfd\x01\xc9\xea\xd2\xbe\x36\x00\xa1\x19\x86\xff\xa2\xcb\xff\xae\xbb\x6f\xf6\xf2\xef\x95\xab\x3d\x14\xdf\x21\x5c\xfb\x47\x77\x60\x6f\x7f\xea\xb0\x99\xed\xf6\xe1\x4f\xde\xcd\x7f\x7f\x06\x00\x00\xff\xff\x81\xf1\x42\xb0\x9f\x0b\x00\x00")

func templateHttpReadTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpReadTmpl,
		"template/http/read.tmpl",
	)
}

func templateHttpReadTmpl() (*asset, error) {
	bytes, err := templateHttpReadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/read.tmpl", size: 2975, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpUpdateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x58\x5f\x6f\xdb\x38\x12\x7f\xcf\xa7\x98\x13\x8c\x85\x9c\x73\xa8\xbd\x87\x7b\xc9\xa2\x38\x74\x9b\x6c\x6b\x5c\xdb\xf4\x92\xb4\x7d\x58\x2c\xb0\xb4\x38\x92\xd8\xc8\xa4\x42\x52\x4e\x5d\x9f\xbf\xfb\x61\x48\xd9\xb2\x64\x39\x49\xff\x02\x77\x27\x20\x88\x2d\x0f\x87\x33\xbf\x99\xf9\xcd\x90\xab\x55\x72\x0c\xb9\x76\xcb\x0a\x4f\x01\x95\xcb\x35\x93\x3a\x41\xe5\xe8\x2f\x4d\x72\x54\xec\xb9\xe1\x55\x01\xc7\xc9\x7a\x7d\x74\xb4\x5a\x81\xc0\x4c\x2a\x84\xa8\x70\xae\x4a\xea\x4a\x70\x87\x11\xac\xd7\x47\x00\x00\xab\xd5\x09\xdc\x49\x57\x00\x7e\x74\xa8\x04\x8c\x20\x7a\xc3\xd3\x1b\x9e\x63\x14\x16\x44\x70\xd2\x88\x06\x71\x70\x38\xaf\x4a\xee\x48\x1f\x72\x81\x26\x02\xd6\x2a\x03\xd2\xd1\x7c\x93\xf3\x4a\x1b\x07\x31\x78\x8b\xaf\x0b\x69\x41\x5a\x50\x88\x02\x05\x64\xda\x80\x75\x75\x25\x05\x5c\x4d\xdf\x81\xa9\x4b\x0c\x06\x6f\x76\x8a\x72\xe9\x8a\x7a\xc6\x52\x3d\x4f\x72\x7d\x92\x16\x32\xa1\xbf\xc5\xdf\xa3\x43\x22\x55\xc9\x97\xb9\xd1\xb5\x12\xc9\x82\x97\x52\x70\xa7\x4d\xb2\xf8\xdb\xcf\x61\xc1\xf8\x68\x63\xa2\xe1\x2a\x47\x18\x29\x38\x7d\x02\x23\xf6\x5a\x0b\xb4\xb0\xb3\x71\x92\xc0\x1b\xbe\x2c\x35\x17\xa0\x33\xe0\xb4\x62\xa4\xd8\x6b\x3e\x47\x58\xaf\x21\xc0\x07\x06\x6f\x6b\xb4\x8e\x6d\x57\x51\x38\xba\xa2\x6f\xbd\xe4\x65\x10\x04\xeb\x4c\x9d\x3a\x58\x6d\x17\x04\x63\x08\x98\x8b\xb3\x8b\x53\x78\xc1\x17\x52\xe5\xc0\xcb\x12\x2a\x2d\x95\x43\x63\xa1\x40\x83\x60\x11\xe7\x16\x94\x76\x60\x64\x5e\x38\x06\xaf\xf8\x72\x86\xe0\x08\xce\x94\x2b\x98\x21\x08\xad\x10\xa4\x02\xae\xb4\x2b\xd0\xc0\x1d\x5f\x02\x63\xac\x8b\x67\xd7\xf9\xcc\x3b\xaf\xd8\x6f\x12\x4b\x61\x3b\x21\xde\x11\x96\x99\xdf\x78\x94\xb1\xe9\x7c\x5e\x3b\x3e\x2b\x71\x50\xb4\x11\x1f\x65\xec\xca\xbb\xe9\xb5\x12\x5a\xc7\xe1\xed\xf5\xb2\x42\xfa\x89\x3c\x5c\xaf\xff\xfc\x60\xb5\x3a\x8d\x48\xbf\x12\xf8\x11\x62\x5b\x95\xd2\x41\xec\x78\xfe\x52\xeb\x9b\xba\x6a\x15\x5d\xf3\x1c\x22\x12\x8f\xc6\x10\x4d\xa2\x31\xfc\x0c\xeb\x75\x74\x60\xff\x26\x91\x9b\xd8\x4b\xad\xae\x79\x6e\x49\xd7\x53\xa5\xb4\xf3\x6f\x2c\x3b\x2f\x6f\x20\x6a\x6b\x60\x23\x8d\xde\x1e\x4a\xe4\x68\x9b\xc4\x7f\x0e\x40\x72\xb2\x9b\xe0\x3b\xae\xd3\xdb\x3e\x32\x2d\xda\xd8\xa0\x7d\x2e\x72\x3c\x08\xf6\x08\x7b\xe8\x85\x00\x8c\x90\xbd\x55\xf2\xb6\xa6\x94\x22\x38\xb1\xb4\xf4\xf1\xf7\x3f\xb6\x76\x86\xb5\x1e\xe3\xe9\x59\x0f\x6b\x78\x04\xd8\xf8\x79\x60\x1f\x04\x1a\xbf\x0d\xd0\x5d\x12\xa1\x67\x7d\xb4\x5b\x9c\xa1\xae\x9a\x42\xb4\xc0\x21\x97\x0b\x54\xbd\x32\xe5\x4a\x80\xe5\x0b\x14\xe0\x0a\x84\xb4\xa0\x38\x58\x70\xda\x7f\x15\xdc\xf1\x19\xb7\xd8\x56\x6f\x56\xab\x14\xe2\xa2\xab\xe4\x05\x57\xa2\x44\x33\x6e\x76\x8c\xef\x80\xf8\x90\x5d\xa2\xad\xb4\xb2\xf8\xde\x48\x87\x66\x02\x06\x8e\x9b\xf7\xbe\xd2\xc7\xbd\x1a\x2f\x29\xf6\x05\x2b\x75\xce\xde\x4b\x57\xc4\x9f\x78\xd5\x84\x27\x8e\xe6\xe8\x0a\x2d\xa2\x09\x44\x61\x8b\x68\x3c\xee\xc2\x9d\x24\x30\x3d\x23\xd6\x7c\x7b\xf9\x12\x2a\x6e\xf8\x1c\x1d\x1a\x76\xd4\x8f\x07\xe5\x89\xa2\xe8\x4f\xed\x54\xb9\x7e\x7e\xd2\x23\xc5\x04\xd0\x18\x32\xc6\x3a\x93\x6a\xb5\x60\x4f\x9d\x96\x71\x5a\x48\xf6\xf6\xf2\xe5\x1b\xd2\x1d\x9b\x09\x44\x52\xec\x59\x41\xcb\x33\xbf\xfa\x2f\x4f\x40\xc9\xb2\xe7\xe1\xd6\x53\x76\x6e\x8c\x36\x71\x84\xf4\x0f\x72\x74\x8e\x92\x50\x0a\xc8\x8c\x9e\x43\x6d\xca\xd6\x85\x68\x02\xbb\x40\x48\x02\x61\xd8\x94\x20\x18\x34\xa3\x31\x03\xb6\xd1\x63\x50\x09\x34\xec\x57\x2e\x9a\x30\xc4\x77\x13\x08\x3a\x60\x5e\x5b\x47\x34\xc9\x15\x10\xb1\xe6\x68\x20\x37\xc8\x1d\x1a\xf8\x84\x46\x47\x87\x34\xba\xda\xa8\xbd\x9f\xf6\x2b\x3f\xd4\xe3\x00\xe0\x84\xf5\xa0\x4f\x87\xc8\xa3\xf3\x3e\x49\xe0\x39\x3a\x9f\xaf\x95\xb6\xce\x27\x6d\x37\xf0\x0b\x6e\x40\xdc\xd3\x73\x8e\x06\x02\x78\xfa\x04\xa8\xc2\xd9\x6b\xbc\x3b\xc3\x54\x0b\x34\xb1\x61\xbf\x6a\xb1\x1c\xb3\xf0\x3d\xfe\x49\x8c\x7f\xb9\x3f\xd6\xbd\x38\x0b\x5a\x47\x81\xf6\xd4\xf1\x70\xb8\x0e\x87\x4a\x79\x8e\xf0\x7a\x28\x49\xa5\xca\x07\x62\x33\x10\x97\x75\x1f\xb8\x77\x0d\xd7\x6c\xab\x9d\x1d\xc0\xa2\x60\xdb\x49\xa1\x21\xc1\xf8\x41\xf7\xc3\xea\x09\xe8\x1b\xd2\x80\xc6\xb0\xf8\xb8\xd5\x32\x0d\x4e\xbc\xdb\x72\xa3\x87\x62\xfc\x0b\x89\x3f\xaa\x6c\x36\xac\xaa\xf2\xcd\x90\xe1\x3d\x78\x04\xb0\x3b\xe0\x4e\x69\x80\x50\xbc\xbc\x42\xb3\x40\x13\x16\x05\x94\x95\x2c\xbf\x22\xdf\x83\xbd\x53\x95\xe9\x38\x6a\xe9\x1f\x32\x2e\x4b\x14\x5f\x11\x7b\x92\xfe\xa2\x48\x5f\xf1\xc5\xa1\x28\xcf\x42\x80\xd3\x52\xa2\x72\xac\x53\x26\x2c\xd4\xc9\x85\xc2\xe9\x59\xdc\xb4\x59\x4f\x9f\x2f\xb8\x7d\xae\xa9\x83\x36\x6d\x55\x6d\x3a\x2a\xac\xd7\xb1\x14\xe3\xb6\xde\xa5\xd8\xf6\xa9\x71\xdf\xa8\x30\xd1\xdd\x15\xdc\x01\x9f\xe9\xda\x81\x2d\x65\x8a\x90\x85\x59\xcb\xd1\xfb\x82\xec\x4e\x6b\xeb\xf4\x1c\xe6\xdc\xd8\x82\x97\x25\x1a\xfb\x8f\x1f\x36\xae\xc9\x0c\x04\x1b\x9c\xd9\xee\xe5\x78\x0f\x2c\xbb\x42\x37\xb4\x34\x3e\x1e\x56\x39\x0e\x83\xae\xd3\x42\xc3\xc9\x97\xe1\xb2\x3f\xcb\x0e\xa7\x04\xdc\x3b\x8e\x7d\xed\x94\xb6\x05\xad\x3f\xaa\xdd\x0f\x5a\x7f\x90\x3b\x14\x93\x00\x6e\xd0\xff\xaa\x0e\x83\xd4\x15\xba\x1d\x64\xfb\xfb\x0e\x97\xf2\x26\x4b\x3f\x67\x9f\x67\x25\x72\x43\x3b\x8d\x7b\x3f\x3c\x15\x3e\xb4\xc3\xfb\x33\xc6\x0e\x99\x30\x38\x29\xc3\x60\x07\x1d\x88\x0a\x95\xb6\xd3\xc6\x1f\x6b\xf6\xc7\x35\x7a\x70\x3b\xcf\xcc\x18\xb1\x40\x6c\xd8\x33\xad\x1c\x7e\x74\x71\x8f\x78\x1e\x9a\x5d\xec\x9d\x74\x69\x11\x98\x9c\x8e\x71\xfd\x09\x6e\xf3\xa4\xdc\x22\x1c\x13\x99\xbc\xd6\xee\x37\x3a\x67\x7a\xaa\x3b\x3d\x88\xf1\x86\x29\x77\xb8\xe7\xdf\x70\x83\x33\x3e\xa3\x94\xa1\x52\xcd\x48\x4b\xc3\x9b\x53\xe5\x36\xa2\xd3\xb3\x0d\x53\x45\x13\x90\xe2\x91\x33\x10\xb4\x04\xbb\x31\x70\xd3\x5a\x1f\xb2\x60\x58\x61\xc7\xe1\x2b\xa9\xf2\xba\xe4\xe6\x41\x9f\x9b\x6e\x26\xea\xaa\x94\x29\x35\x61\x54\xce\x2c\xfd\x81\x7f\xd0\x8c\xef\xe0\xfe\xfe\x6c\xd1\x5a\x33\x0c\x45\xb0\xd1\x1f\x6b\xa4\x80\x08\xfe\xba\x9d\x92\xa7\x4e\xf3\x18\xd9\xd6\xb2\x5e\x01\x0e\xdb\x22\x30\xe3\x75\xe9\x1e\x01\x53\x68\xfa\x36\x9c\xfe\x7f\x14\x3e\x9f\x39\x1e\xec\xd7\xf0\x63\x5a\xf3\x25\xfa\x3b\x14\x8f\x6c\xb7\x74\x6f\xef\xe9\xcc\xff\xaa\xd1\x2c\xe3\x31\x7b\x5f\xa0\xc1\xb8\x03\x48\xa9\xef\x90\x28\x8a\x4d\xcf\x1e\x1d\x90\xf6\x7a\x8b\x48\xfd\x5a\xbf\x24\x93\x46\x0a\xa2\xd4\x9f\x00\xa2\x21\x82\x4a\x12\x38\xe7\x74\x4a\x08\xf6\xfb\x6e\xe0\x9b\x13\x37\xe1\xe2\x47\x1a\x14\xa0\x15\x04\x1d\xa0\x2b\x34\x9e\x2a\xd9\x50\x2b\x62\xcf\xb4\x40\x88\x6e\xf7\xb6\x3a\x40\x91\x0d\xaf\x3d\x81\x5b\x76\xa1\xca\xe5\xff\x2c\xad\x1d\x8e\xe0\xff\x33\xdb\x7d\x43\x54\xfe\xeb\x48\x30\x43\x97\x16\x07\x69\x30\x5c\x22\x88\xd9\x8f\x03\xf0\xfb\xb3\xe4\x87\xf6\x4e\xa6\x40\x23\xb3\x8c\xbd\x0a\x33\x6f\xfc\xd3\xe6\xc5\x45\xe5\xaf\xd3\xf6\x4b\x77\xaa\xd2\xb2\x16\x78\x3e\xaf\xdc\xf2\x9a\xe7\xa7\xe0\x4c\x8d\x93\x3d\xb1\xe7\x46\xd7\x95\x3d\x85\xdf\xff\x08\x27\xea\x55\x4b\x89\xa3\xfe\x7d\xdd\x55\x5a\xe0\x9c\xb3\x67\x9e\xd6\xc2\x42\xa2\x5b\x22\xb0\xf6\xe0\x33\x5c\x5d\x51\x3b\xc7\xc1\xba\x6b\xc5\x7a\x02\xf8\x79\xcc\xb5\xcd\x0b\x8b\x46\xf2\x52\x7e\x0a\xa7\x4c\x9f\x25\xdf\x31\xfc\x5f\x16\xf6\x07\x83\x7c\x3f\x5d\x86\x4d\xf1\xcb\xd9\xb2\x6b\x51\xe3\xc3\xc5\x3f\x1b\x93\x3f\x8c\x8f\xba\x56\xb5\xb7\xab\xdb\x4f\xff\x09\x00\x00\xff\xff\x80\x3a\x20\xd7\x51\x1a\x00\x00")

func templateHttpUpdateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpUpdateTmpl,
		"template/http/update.tmpl",
	)
}

func templateHttpUpdateTmpl() (*asset, error) {
	bytes, err := templateHttpUpdateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/update.tmpl", size: 6737, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/flutter/client.tmpl": templateFlutterClientTmpl,
	"template/flutter/header.tmpl": templateFlutterHeaderTmpl,
	"template/flutter/model.tmpl":  templateFlutterModelTmpl,
	"template/http/create.tmpl":    templateHttpCreateTmpl,
	"template/http/delete.tmpl":    templateHttpDeleteTmpl,
	"template/http/handler.tmpl":   templateHttpHandlerTmpl,
	"template/http/list.tmpl":      templateHttpListTmpl,
	"template/http/read.tmpl":      templateHttpReadTmpl,
	"template/http/update.tmpl":    templateHttpUpdateTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"flutter": &bintree{nil, map[string]*bintree{
			"client.tmpl": &bintree{templateFlutterClientTmpl, map[string]*bintree{}},
			"header.tmpl": &bintree{templateFlutterHeaderTmpl, map[string]*bintree{}},
			"model.tmpl":  &bintree{templateFlutterModelTmpl, map[string]*bintree{}},
		}},
		"http": &bintree{nil, map[string]*bintree{
			"create.tmpl":  &bintree{templateHttpCreateTmpl, map[string]*bintree{}},
			"delete.tmpl":  &bintree{templateHttpDeleteTmpl, map[string]*bintree{}},
			"handler.tmpl": &bintree{templateHttpHandlerTmpl, map[string]*bintree{}},
			"list.tmpl":    &bintree{templateHttpListTmpl, map[string]*bintree{}},
			"read.tmpl":    &bintree{templateHttpReadTmpl, map[string]*bintree{}},
			"update.tmpl":  &bintree{templateHttpUpdateTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
