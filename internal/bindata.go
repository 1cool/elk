// Package internal Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/http/create.tmpl
// template/http/handler.tmpl
// template/http/read.tmpl
package internal

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateHttpCreateTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\x8d\x31\xaa\xc3\x30\x10\x44\x7b\x9d\x62\x58\x7e\x65\xb0\xd5\xff\x0b\xa4\xcd\x15\x16\x7b\x22\x9b\x24\xb2\x10\x0b\x49\x58\x74\xf7\x20\x1c\x92\x62\x60\x8a\x37\x6f\xdc\xe3\x80\xb4\xdb\xab\xf0\x1f\xcc\x96\xf6\x69\xdb\x23\xb3\xf5\xcc\x31\x31\x4f\xa7\xaa\x65\xc5\x10\x5b\x0b\xc1\x1d\x0b\x2f\x5b\x26\x64\x35\x2b\x71\xae\x54\xa3\xa0\xb5\x00\x00\xee\x23\x1e\x9b\xad\xe0\xd3\x98\x17\xfc\x41\xce\x3a\x5f\x35\x51\x8e\x81\x60\xfc\xa0\x07\x0e\xe3\xbd\xdc\xd4\xba\x8f\xba\xb0\x0a\xa6\x9f\x0c\xdd\xd1\x6f\xc3\xb7\xbf\x03\x00\x00\xff\xff\xd6\x81\xc2\xe3\xb0\x00\x00\x00")

func templateHttpCreateTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpCreateTmpl,
		"template/http/create.tmpl",
	)
}

func templateHttpCreateTmpl() (*asset, error) {
	bytes, err := templateHttpCreateTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/create.tmpl", size: 176, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpHandlerTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xcd\x6e\xab\x30\x10\x85\xf7\x3c\xc5\xb9\xe8\x2e\x20\x22\xa6\xeb\x4a\x59\x74\x55\x55\xea\x22\x8a\xd4\x07\xb0\x60\x00\xab\x64\xec\x4e\x86\xfe\xc8\xe2\xdd\x2b\x43\x4a\x62\xc9\x0b\x7b\xbe\xf3\x1d\x3b\xc6\x7a\x87\xde\xeb\x4f\xa0\x47\x10\x6b\xef\x8d\xf3\x35\xb1\xa6\xdd\xd4\x3d\xb1\x79\x16\x1b\x06\xec\xea\x79\xce\xb2\x18\xd1\x52\xe7\x98\x90\x0f\xaa\xa1\x1e\x2c\xb7\x23\x49\x8e\x79\xce\x00\x20\xc6\x3d\xbe\x9c\x0e\xa0\x6f\x25\x6e\xf1\x1f\xf9\xd1\x36\xef\xb6\xa7\x7c\x4d\xe4\xd8\x5f\xd1\x15\x87\xd2\x39\x8c\x56\x93\x90\x6c\x9b\x54\xe6\x26\x43\x72\xa4\xde\x74\xec\x26\x6e\xf0\x76\x7a\x3d\x5a\xb1\xe7\x17\xd6\x42\xb0\x4b\x4a\x73\xa2\x8f\x89\x2e\x5a\x21\xe0\xa2\xe2\xb8\x2f\x51\x38\xd6\x0a\x24\xe2\xa5\x44\xdc\xfa\x5c\xbb\x5c\xe2\x90\xc0\xc6\xf3\xa7\x79\x52\xef\x8a\x66\x70\xe6\x4f\x5c\x48\x85\x50\x96\xb7\x48\xb7\x24\xfe\x1d\xc0\x6e\xbc\x53\xa5\x25\xa4\x93\x30\x1e\x16\xe9\x36\xb9\x3e\xf7\x0e\x48\xb5\xec\xc6\x6c\x9d\x6e\xdf\xfa\x0d\x00\x00\xff\xff\xfd\x38\xf5\xe8\x7c\x01\x00\x00")

func templateHttpHandlerTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpHandlerTmpl,
		"template/http/handler.tmpl",
	)
}

func templateHttpHandlerTmpl() (*asset, error) {
	bytes, err := templateHttpHandlerTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/handler.tmpl", size: 380, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateHttpReadTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\xdd\x6e\xb3\x38\x10\xbd\xef\x53\x9c\x45\xd1\x0a\xa2\xd4\xdc\x47\xea\xc5\x2a\x59\xb5\x91\xa2\xb6\x1b\xb5\xea\xb5\x8b\x27\x60\x2d\xb1\x89\x31\x4d\xb3\x2c\xef\xfe\x69\x12\x4a\x20\xe1\xb3\x84\xc0\xf8\xcc\x99\x33\x3f\x9e\xba\x8e\xa7\x48\xad\x3f\x16\x34\x07\x19\x9f\x5a\xa1\x6d\x4c\xc6\xf3\x93\xc4\x29\x19\xf1\xe8\x64\x91\x61\x1a\x37\xcd\xdd\x5d\x5d\x43\xd1\x56\x1b\x42\x90\x79\x5f\xc4\x8e\xa4\x0a\xd0\x34\x77\x00\x50\xd7\xf7\x38\x68\x9f\x81\xbe\x3d\x19\x85\x09\x82\x57\x99\xfc\x2b\x53\x0a\xce\xf0\x00\xf7\x2d\xf4\x0c\x87\xa7\x5d\x91\x4b\xcf\x6c\x24\x15\xb9\x00\xe2\x42\x06\xe6\x60\xa7\xed\xd6\x49\x93\x12\x26\x06\xf3\x07\x4c\xc4\xb3\x55\x54\xa2\x47\x17\xc7\x0c\x9a\x18\xf1\x2c\x77\x84\xa6\x79\x92\x46\xe5\xe4\x90\x9d\xde\x25\x58\x00\x12\x57\x29\xd8\x82\x9c\xf4\xda\x9a\x12\xd6\xc0\x67\x34\x34\xc4\xce\x2a\xca\x45\x47\xcc\xb9\x19\xa7\x2e\xbd\xab\x12\x8f\xba\x83\xf2\x4a\x72\x4d\xc6\x63\x4a\xc6\x8b\xc5\xe9\x7b\x70\x9c\xdb\x94\x5f\xd3\xff\x64\x21\xd6\x36\x4d\xc9\x75\xc7\x6d\xa8\xbc\xb6\x95\x49\xf0\x4c\x87\x31\xb7\x61\xd2\x27\x9f\x21\xef\x93\x45\x98\x8e\x4a\x1d\x6a\x74\xe4\x2b\x67\xf0\xe7\x18\x74\x88\xbc\x44\x34\x47\x32\xbb\x39\xca\x6d\x3a\x47\x3e\xfc\xdf\x8c\x05\x74\x5d\x9d\x0d\x49\xf5\xa3\x6d\x4b\x3e\xc9\xa8\xfc\x5d\x25\xa0\x15\x19\xaf\xb7\x9a\x14\x3e\x8f\x90\x48\xf5\x17\x19\x54\x2e\xbf\x2f\xa4\x93\x3b\xf2\xcc\xe1\xec\x8e\x09\xfa\x0e\x95\xf4\xf2\x53\x96\x04\x69\x54\x1b\x72\x09\xed\xe1\xed\xc9\xd5\x39\x2c\x31\xcc\x79\x98\x8d\x27\x30\x02\x2b\x0e\x0f\xa7\x36\x12\x1b\x2a\x0b\x6b\x4a\xfa\x70\xda\x93\x9b\xc1\x61\xda\xfe\xdf\x57\x54\xfa\xe8\x2a\xdd\x71\x8c\xd5\x12\xba\xc4\xfb\x66\x8d\x4e\xb3\x18\x60\xf8\xf2\xe8\x2d\x3b\x5e\x2d\xc5\xaa\x5c\x19\xdf\x6f\xee\x9f\xa5\xd5\x0c\xe4\x1c\x5f\x81\xd2\xbb\xc4\x9a\x2f\xf1\x97\xb7\x3a\x4c\x32\x2d\xde\x37\xeb\x57\xe6\x0e\xdd\x0c\x81\x56\x41\x14\xdd\x9a\x6f\x4f\xd6\x7f\x3c\xc0\xe8\x1c\xb7\x95\x6e\xc5\xbe\xbd\x2c\x5f\xe6\x38\x47\x7e\x83\x69\xae\x64\x83\xf2\x92\xc6\xb5\xb2\xcc\x51\x65\x37\x14\xbd\x9b\xde\xd3\xb1\x70\xc4\xc3\x81\x8b\xb5\xaf\xc8\x1d\xb9\x72\xa7\x66\xb9\x6d\x95\x81\xe9\x9e\x1d\x67\xa2\x2d\xf0\x00\x27\xfe\x61\xa2\x30\x12\x1f\x19\x39\x0a\x7b\x67\xff\x23\xb7\x07\x72\x8c\x59\x2d\xf9\xa0\xab\xc6\x93\x2c\x1f\xed\x1b\x4f\x81\xa6\x39\x1b\xac\x96\xa2\xdd\x87\x5a\x45\x97\x1c\x68\xd5\x05\x13\x45\x37\xe1\xfc\x2d\x53\x72\xc8\xad\x54\x20\x95\x9e\x1a\x5e\x7a\x48\x47\x70\xb4\xaf\xb4\x23\xc5\xf3\x88\x47\xea\x65\x44\x5d\x37\x49\x3b\x60\xd9\xfc\xcd\xae\x99\x6a\x62\x10\xfc\x8c\xe1\xba\x86\x58\x58\x45\x08\xf6\xed\x76\x2c\xb3\xd4\xf5\xd0\x5e\xbc\x98\xfc\x18\x3a\xb1\xb0\xc6\xd3\xb7\x0f\x7b\x3d\x73\x3d\x86\xbb\xaf\x5f\x01\x00\x00\xff\xff\xd4\x18\xb6\x2b\x33\x06\x00\x00")

func templateHttpReadTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateHttpReadTmpl,
		"template/http/read.tmpl",
	)
}

func templateHttpReadTmpl() (*asset, error) {
	bytes, err := templateHttpReadTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/http/read.tmpl", size: 1587, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/http/create.tmpl":  templateHttpCreateTmpl,
	"template/http/handler.tmpl": templateHttpHandlerTmpl,
	"template/http/read.tmpl":    templateHttpReadTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"http": &bintree{nil, map[string]*bintree{
			"create.tmpl":  &bintree{templateHttpCreateTmpl, map[string]*bintree{}},
			"handler.tmpl": &bintree{templateHttpHandlerTmpl, map[string]*bintree{}},
			"read.tmpl":    &bintree{templateHttpReadTmpl, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
