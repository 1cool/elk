// Code generated by entc, DO NOT EDIT.

package http

import (
	"strings"

	"github.com/go-chi/chi/v5"
	"github.com/masseelch/elk/internal/fridge/ent"
	"go.uber.org/zap"
)

// NewHandler returns a ready to use handler with all generated endpoints mounted.
func NewHandler(c *ent.Client, l *zap.Logger) chi.Router {
	r := chi.NewRouter()
	compartmentHandler := NewCompartmentHandler(c, l)
	r.Route("/compartments", func(r chi.Router) {
		r.Post("/", compartmentHandler.Create)
		r.Get("/{id}", compartmentHandler.Read)
		r.Patch("/{id}", compartmentHandler.Update)
		r.Delete("/{id}", compartmentHandler.Delete)
		r.Get("/", compartmentHandler.List)
		r.Get("/{id}/fridge", compartmentHandler.Fridge)
		r.Get("/{id}/contents", compartmentHandler.Contents)
	})
	contentHandler := NewContentHandler(c, l)
	r.Route("/contents", func(r chi.Router) {
		r.Post("/", contentHandler.Create)
		r.Get("/{id}", contentHandler.Read)
		r.Patch("/{id}", contentHandler.Update)
		r.Delete("/{id}", contentHandler.Delete)
		r.Get("/", contentHandler.List)
		r.Get("/{id}/compartment", contentHandler.Compartment)
	})
	fridgeHandler := NewFridgeHandler(c, l)
	r.Route("/fridges", func(r chi.Router) {
		r.Post("/", fridgeHandler.Create)
		r.Get("/{id}", fridgeHandler.Read)
		r.Patch("/{id}", fridgeHandler.Update)
		r.Get("/", fridgeHandler.List)
		r.Get("/{id}/compartments", fridgeHandler.Compartments)
	})
	return r
}

// CompartmentHandler handles http crud operations on ent.Compartment.
type CompartmentHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewCompartmentHandler(c *ent.Client, l *zap.Logger) *CompartmentHandler {
	return &CompartmentHandler{
		client: c,
		log:    l.With(zap.String("handler", "CompartmentHandler")),
	}
}

// ContentHandler handles http crud operations on ent.Content.
type ContentHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewContentHandler(c *ent.Client, l *zap.Logger) *ContentHandler {
	return &ContentHandler{
		client: c,
		log:    l.With(zap.String("handler", "ContentHandler")),
	}
}

// FridgeHandler handles http crud operations on ent.Fridge.
type FridgeHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewFridgeHandler(c *ent.Client, l *zap.Logger) *FridgeHandler {
	return &FridgeHandler{
		client: c,
		log:    l.With(zap.String("handler", "FridgeHandler")),
	}
}

func stripEntError(err error) string {
	return strings.TrimPrefix(err.Error(), "ent: ")
}

func zapFields(errs map[string]string) []zap.Field {
	if errs == nil || len(errs) == 0 {
		return nil
	}
	r := make([]zap.Field, 0)
	for k, v := range errs {
		r = append(r, zap.String(k, v))
	}
	return r
}
