// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/masseelch/elk/internal/fridge/ent/compartment"
	"github.com/masseelch/elk/internal/fridge/ent/content"
)

// Content is the model entity for the Content schema.
type Content struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContentQuery when eager-loading is set.
	Edges                ContentEdges `json:"edges"`
	compartment_contents *int
}

// ContentEdges holds the relations/edges for other nodes in the graph.
type ContentEdges struct {
	// Compartment holds the value of the compartment edge.
	Compartment *Compartment `json:"compartment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CompartmentOrErr returns the Compartment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ContentEdges) CompartmentOrErr() (*Compartment, error) {
	if e.loadedTypes[0] {
		if e.Compartment == nil {
			// The edge compartment was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: compartment.Label}
		}
		return e.Compartment, nil
	}
	return nil, &NotLoadedError{edge: "compartment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Content) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case content.FieldID:
			values[i] = new(sql.NullInt64)
		case content.FieldName:
			values[i] = new(sql.NullString)
		case content.ForeignKeys[0]: // compartment_contents
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Content", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Content fields.
func (c *Content) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case content.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			c.ID = int(value.Int64)
		case content.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				c.Name = value.String
			}
		case content.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field compartment_contents", value)
			} else if value.Valid {
				c.compartment_contents = new(int)
				*c.compartment_contents = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCompartment queries the "compartment" edge of the Content entity.
func (c *Content) QueryCompartment() *CompartmentQuery {
	return (&ContentClient{config: c.config}).QueryCompartment(c)
}

// Update returns a builder for updating this Content.
// Note that you need to call Content.Unwrap() before calling this method if this Content
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Content) Update() *ContentUpdateOne {
	return (&ContentClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Content entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Content) Unwrap() *Content {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Content is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Content) String() string {
	var builder strings.Builder
	builder.WriteString("Content(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", name=")
	builder.WriteString(c.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Contents is a parsable slice of Content.
type Contents []*Content

func (c Contents) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
