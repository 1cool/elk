// Code generated by entc, DO NOT EDIT.

package http

import (
	"net/http"
	"strconv"

	"github.com/go-chi/chi"
	"github.com/masseelch/elk/internal/petstore/ent"
	"github.com/masseelch/elk/internal/petstore/ent/owner"
	"github.com/masseelch/elk/internal/petstore/ent/pet"
	"go.uber.org/zap"
)

// OwnerHandler handles http crud operations on the Owner model.
type OwnerHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewOwnerHandler(c *ent.Client, l *zap.Logger) *OwnerHandler {
	return &OwnerHandler{
		client: c,
		log:    l,
	}
}

// OwnerReadHandler fetches the Owner model identified by a given url-parameter from the
// database and returns it to the client.
func (h *OwnerHandler) Read(w http.ResponseWriter, r *http.Request) {
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		// TODO: Handle
	}

	// Create the query to fetch the Owner
	q := h.client.Owner.Query().Where(owner.ID(id))

	// Eager load edges that are required on read operation.

	e, err := q.Only(r.Context())
}

// PetHandler handles http crud operations on the Pet model.
type PetHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewPetHandler(c *ent.Client, l *zap.Logger) *PetHandler {
	return &PetHandler{
		client: c,
		log:    l,
	}
}

// PetReadHandler fetches the Pet model identified by a given url-parameter from the
// database and returns it to the client.
func (h *PetHandler) Read(w http.ResponseWriter, r *http.Request) {
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		// TODO: Handle
	}

	// Create the query to fetch the Pet
	q := h.client.Pet.Query().Where(pet.ID(id))

	// Eager load edges that are required on read operation.
	q.WithOwner()

	e, err := q.Only(r.Context())
}
