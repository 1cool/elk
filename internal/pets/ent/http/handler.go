// Code generated by entc, DO NOT EDIT.

package http

import (
	"strings"

	"github.com/go-chi/chi/v5"
	"github.com/masseelch/elk/internal/pets/ent"
	"go.uber.org/zap"
)

// NewHandler returns a ready to use handler with all generated endpoints mounted.
func NewHandler(c *ent.Client, l *zap.Logger) chi.Router {
	r := chi.NewRouter()
	badgeHandler := NewBadgeHandler(c, l)
	r.Route("/badges", func(r chi.Router) {
		r.Post("/", badgeHandler.Create)
		r.Get("/{id}", badgeHandler.Read)
		r.Patch("/{id}", badgeHandler.Update)
		r.Delete("/{id}", badgeHandler.Delete)
		r.Get("/", badgeHandler.List)
		r.Get("/{id}/wearer", badgeHandler.Wearer)
	})
	petHandler := NewPetHandler(c, l)
	r.Route("/pets", func(r chi.Router) {
		r.Post("/", petHandler.Create)
		r.Get("/{id}", petHandler.Read)
		r.Patch("/{id}", petHandler.Update)
		r.Delete("/{id}", petHandler.Delete)
		r.Get("/", petHandler.List)
		r.Get("/{id}/badge", petHandler.Badge)
		r.Get("/{id}/protege", petHandler.Protege)
		r.Get("/{id}/mentor", petHandler.Mentor)
		r.Get("/{id}/spouse", petHandler.Spouse)
		r.Get("/{id}/toys", petHandler.Toys)
		r.Get("/{id}/parent", petHandler.Parent)
		r.Get("/{id}/children", petHandler.Children)
		r.Get("/{id}/play-groups", petHandler.PlayGroups)
		r.Get("/{id}/friends", petHandler.Friends)
	})
	play_groupHandler := NewPlayGroupHandler(c, l)
	r.Route("/play-groups", func(r chi.Router) {
		r.Post("/", play_groupHandler.Create)
		r.Get("/{id}", play_groupHandler.Read)
		r.Patch("/{id}", play_groupHandler.Update)
		r.Delete("/{id}", play_groupHandler.Delete)
		r.Get("/", play_groupHandler.List)
		r.Get("/{id}/participants", play_groupHandler.Participants)
	})
	toyHandler := NewToyHandler(c, l)
	r.Route("/toys", func(r chi.Router) {
		r.Post("/", toyHandler.Create)
		r.Get("/{id}", toyHandler.Read)
		r.Patch("/{id}", toyHandler.Update)
		r.Delete("/{id}", toyHandler.Delete)
		r.Get("/", toyHandler.List)
		r.Get("/{id}/owner", toyHandler.Owner)
	})
	return r
}

// BadgeHandler handles http crud operations on ent.Badge.
type BadgeHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewBadgeHandler(c *ent.Client, l *zap.Logger) *BadgeHandler {
	return &BadgeHandler{
		client: c,
		log:    l.With(zap.String("handler", "BadgeHandler")),
	}
}

// PetHandler handles http crud operations on ent.Pet.
type PetHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewPetHandler(c *ent.Client, l *zap.Logger) *PetHandler {
	return &PetHandler{
		client: c,
		log:    l.With(zap.String("handler", "PetHandler")),
	}
}

// PlayGroupHandler handles http crud operations on ent.PlayGroup.
type PlayGroupHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewPlayGroupHandler(c *ent.Client, l *zap.Logger) *PlayGroupHandler {
	return &PlayGroupHandler{
		client: c,
		log:    l.With(zap.String("handler", "PlayGroupHandler")),
	}
}

// ToyHandler handles http crud operations on ent.Toy.
type ToyHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewToyHandler(c *ent.Client, l *zap.Logger) *ToyHandler {
	return &ToyHandler{
		client: c,
		log:    l.With(zap.String("handler", "ToyHandler")),
	}
}

func stripEntError(err error) string {
	return strings.TrimPrefix(err.Error(), "ent: ")
}

func zapFields(errs map[string]string) []zap.Field {
	if errs == nil || len(errs) == 0 {
		return nil
	}
	r := make([]zap.Field, 0)
	for k, v := range errs {
		r = append(r, zap.String(k, v))
	}
	return r
}
