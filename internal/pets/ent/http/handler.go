// Code generated by entc, DO NOT EDIT.

package http

import (
	"strings"

	"github.com/go-chi/chi/v5"
	"github.com/masseelch/elk/internal/pets/ent"
	"go.uber.org/zap"
)

// NewHandler returns a ready to use handler with all generated endpoints mounted.
func NewHandler(c *ent.Client, l *zap.Logger) chi.Router {
	r := chi.NewRouter()
	bHandler := NewBadgeHandler(c, l)
	r.Route("/badges", func(r chi.Router) {
		r.Post("/", bHandler.Create)
		r.Get("/{id}", bHandler.Read)
		r.Patch("/{id}", bHandler.Update)
		r.Delete("/{id}", bHandler.Delete)
		r.Get("/", bHandler.List)
		r.Get("/{id}/wearer", bHandler.Wearer)
	})
	peHandler := NewPetHandler(c, l)
	r.Route("/pets", func(r chi.Router) {
		r.Post("/", peHandler.Create)
		r.Get("/{id}", peHandler.Read)
		r.Patch("/{id}", peHandler.Update)
		r.Delete("/{id}", peHandler.Delete)
		r.Get("/", peHandler.List)
		r.Get("/{id}/badge", peHandler.Badge)
		r.Get("/{id}/protege", peHandler.Protege)
		r.Get("/{id}/mentor", peHandler.Mentor)
		r.Get("/{id}/spouse", peHandler.Spouse)
		r.Get("/{id}/toys", peHandler.Toys)
		r.Get("/{id}/parent", peHandler.Parent)
		r.Get("/{id}/children", peHandler.Children)
		r.Get("/{id}/play-groups", peHandler.PlayGroups)
		r.Get("/{id}/friends", peHandler.Friends)
	})
	pgHandler := NewPlayGroupHandler(c, l)
	r.Route("/play-groups", func(r chi.Router) {
		r.Post("/", pgHandler.Create)
		r.Get("/{id}", pgHandler.Read)
		r.Patch("/{id}", pgHandler.Update)
		r.Delete("/{id}", pgHandler.Delete)
		r.Get("/", pgHandler.List)
		r.Get("/{id}/participants", pgHandler.Participants)
	})
	tHandler := NewToyHandler(c, l)
	r.Route("/toys", func(r chi.Router) {
		r.Post("/", tHandler.Create)
		r.Get("/{id}", tHandler.Read)
		r.Patch("/{id}", tHandler.Update)
		r.Delete("/{id}", tHandler.Delete)
		r.Get("/", tHandler.List)
		r.Get("/{id}/owner", tHandler.Owner)
	})
	return r
}

// BadgeHandler handles http crud operations on ent.Badge.
type BadgeHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewBadgeHandler(c *ent.Client, l *zap.Logger) *BadgeHandler {
	return &BadgeHandler{
		client: c,
		log:    l.With(zap.String("handler", "BadgeHandler")),
	}
}

// PetHandler handles http crud operations on ent.Pet.
type PetHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewPetHandler(c *ent.Client, l *zap.Logger) *PetHandler {
	return &PetHandler{
		client: c,
		log:    l.With(zap.String("handler", "PetHandler")),
	}
}

// PlayGroupHandler handles http crud operations on ent.PlayGroup.
type PlayGroupHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewPlayGroupHandler(c *ent.Client, l *zap.Logger) *PlayGroupHandler {
	return &PlayGroupHandler{
		client: c,
		log:    l.With(zap.String("handler", "PlayGroupHandler")),
	}
}

// ToyHandler handles http crud operations on ent.Toy.
type ToyHandler struct {
	client *ent.Client
	log    *zap.Logger
}

func NewToyHandler(c *ent.Client, l *zap.Logger) *ToyHandler {
	return &ToyHandler{
		client: c,
		log:    l.With(zap.String("handler", "ToyHandler")),
	}
}

func stripEntError(err error) string {
	return strings.TrimPrefix(err.Error(), "ent: ")
}

func zapFields(errs map[string]string) []zap.Field {
	if errs == nil || len(errs) == 0 {
		return nil
	}
	r := make([]zap.Field, 0)
	for k, v := range errs {
		r = append(r, zap.String(k, v))
	}
	return r
}
