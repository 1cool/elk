// Code generated by entc, DO NOT EDIT.

package http

import (
	"net/http"

	easyjson "github.com/mailru/easyjson"
	"github.com/masseelch/elk/internal/integration/pets/ent"
	"github.com/masseelch/elk/internal/integration/pets/ent/badge"
	pet "github.com/masseelch/elk/internal/integration/pets/ent/pet"
	playgroup "github.com/masseelch/elk/internal/integration/pets/ent/playgroup"
	"github.com/masseelch/elk/internal/integration/pets/ent/toy"
	"github.com/masseelch/render"
	"go.uber.org/zap"
)

// Create creates a new ent.Badge and stores it in the database.
func (h BadgeHandler) Create(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Create"))
	// Get the post data.
	var d BadgeCreateRequest
	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		render.BadRequest(w, r, "invalid json string")
		return
	}
	// Save the data.
	b := h.client.Badge.Create()
	if d.Wearer != nil {
		b.SetWearerID(*d.Wearer)
	}
	e, err := b.Save(r.Context())
	if err != nil {
		switch {
		default:
			l.Error("could not create badge", zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	// Reload entry.
	q := h.client.Badge.Query().Where(badge.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", e.ID))
			render.NotFound(w, r, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int("id", e.ID))
			render.BadRequest(w, r, msg)
		default:
			l.Error("could not read badge", zap.Error(err), zap.Int("id", e.ID))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	l.Info("badge rendered", zap.Int("id", e.ID))
	easyjson.MarshalToHTTPResponseWriter(NewBadgeCreateResponse(e), w)
}

// Create creates a new ent.Pet and stores it in the database.
func (h PetHandler) Create(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Create"))
	// Get the post data.
	var d PetCreateRequest
	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		render.BadRequest(w, r, "invalid json string")
		return
	}
	// Save the data.
	b := h.client.Pet.Create()
	if d.Height != nil {
		b.SetHeight(*d.Height)
	}
	if d.Weight != nil {
		b.SetWeight(*d.Weight)
	}
	if d.Castrated != nil {
		b.SetCastrated(*d.Castrated)
	}
	if d.Name != nil {
		b.SetName(*d.Name)
	}
	if d.Birthday != nil {
		b.SetBirthday(*d.Birthday)
	}
	if d.Nicknames != nil {
		b.SetNicknames(*d.Nicknames)
	}
	if d.Sex != nil {
		b.SetSex(*d.Sex)
	}
	if d.Chip != nil {
		b.SetChip(*d.Chip)
	}
	if d.Badge != nil {
		b.SetBadgeID(*d.Badge)
	}
	if d.Protege != nil {
		b.SetProtegeID(*d.Protege)
	}
	if d.Mentor != nil {
		b.SetMentorID(*d.Mentor)
	}
	if d.Spouse != nil {
		b.SetSpouseID(*d.Spouse)
	}
	if d.Toys != nil {
		b.AddToyIDs(d.Toys...)
	}
	if d.Parent != nil {
		b.SetParentID(*d.Parent)
	}
	if d.Children != nil {
		b.AddChildIDs(d.Children...)
	}
	if d.PlayGroups != nil {
		b.AddPlayGroupIDs(d.PlayGroups...)
	}
	if d.Friends != nil {
		b.AddFriendIDs(d.Friends...)
	}
	e, err := b.Save(r.Context())
	if err != nil {
		switch {
		default:
			l.Error("could not create pet", zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	// Reload entry.
	q := h.client.Pet.Query().Where(pet.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", e.ID))
			render.NotFound(w, r, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int("id", e.ID))
			render.BadRequest(w, r, msg)
		default:
			l.Error("could not read pet", zap.Error(err), zap.Int("id", e.ID))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	l.Info("pet rendered", zap.Int("id", e.ID))
	easyjson.MarshalToHTTPResponseWriter(NewPetCreateResponse(e), w)
}

// Create creates a new ent.PlayGroup and stores it in the database.
func (h PlayGroupHandler) Create(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Create"))
	// Get the post data.
	var d PlayGroupCreateRequest
	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		render.BadRequest(w, r, "invalid json string")
		return
	}
	// Save the data.
	b := h.client.PlayGroup.Create()
	if d.Title != nil {
		b.SetTitle(*d.Title)
	}
	if d.Description != nil {
		b.SetDescription(*d.Description)
	}
	if d.Weekday != nil {
		b.SetWeekday(*d.Weekday)
	}
	if d.Participants != nil {
		b.AddParticipantIDs(d.Participants...)
	}
	e, err := b.Save(r.Context())
	if err != nil {
		switch {
		default:
			l.Error("could not create play-group", zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	// Reload entry.
	q := h.client.PlayGroup.Query().Where(playgroup.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", e.ID))
			render.NotFound(w, r, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int("id", e.ID))
			render.BadRequest(w, r, msg)
		default:
			l.Error("could not read play-group", zap.Error(err), zap.Int("id", e.ID))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	l.Info("play-group rendered", zap.Int("id", e.ID))
	easyjson.MarshalToHTTPResponseWriter(NewPlayGroupCreateResponse(e), w)
}

// Create creates a new ent.Toy and stores it in the database.
func (h ToyHandler) Create(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Create"))
	// Get the post data.
	var d ToyCreateRequest
	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		render.BadRequest(w, r, "invalid json string")
		return
	}
	// Save the data.
	b := h.client.Toy.Create()
	if d.Title != nil {
		b.SetTitle(*d.Title)
	}
	if d.Owner != nil {
		b.SetOwnerID(*d.Owner)
	}
	e, err := b.Save(r.Context())
	if err != nil {
		switch {
		default:
			l.Error("could not create toy", zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	// Reload entry.
	q := h.client.Toy.Query().Where(toy.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", e.ID))
			render.NotFound(w, r, msg)
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Error(err), zap.Int("id", e.ID))
			render.BadRequest(w, r, msg)
		default:
			l.Error("could not read toy", zap.Error(err), zap.Int("id", e.ID))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	l.Info("toy rendered", zap.Int("id", e.ID))
	easyjson.MarshalToHTTPResponseWriter(NewToyCreateResponse(e), w)
}
