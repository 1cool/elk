// Code generated by entc, DO NOT EDIT.

package http

import (
	"net/http"
	"strconv"

	"github.com/go-chi/chi/v5"
	"github.com/masseelch/elk/internal/integration/pets/ent"
	"github.com/masseelch/render"
	"go.uber.org/zap"
)

// Delete removes a ent.Badge from the database.
func (h BadgeHandler) Delete(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Delete"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	err = h.client.Badge.DeleteOneID(id).Exec(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			render.NotFound(w, r, msg)
		default:
			l.Error("could-not-delete-badge", zap.Error(err), zap.Int("id", id))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	l.Info("badge deleted", zap.Int("id", id))
	render.NoContent(w)
}

// Delete removes a ent.Pet from the database.
func (h PetHandler) Delete(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Delete"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	err = h.client.Pet.DeleteOneID(id).Exec(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			render.NotFound(w, r, msg)
		default:
			l.Error("could-not-delete-pet", zap.Error(err), zap.Int("id", id))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	l.Info("pet deleted", zap.Int("id", id))
	render.NoContent(w)
}

// Delete removes a ent.PlayGroup from the database.
func (h PlayGroupHandler) Delete(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Delete"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	err = h.client.PlayGroup.DeleteOneID(id).Exec(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			render.NotFound(w, r, msg)
		default:
			l.Error("could-not-delete-play-group", zap.Error(err), zap.Int("id", id))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	l.Info("play-group deleted", zap.Int("id", id))
	render.NoContent(w)
}

// Delete removes a ent.Toy from the database.
func (h ToyHandler) Delete(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Delete"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	err = h.client.Toy.DeleteOneID(id).Exec(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Error(err), zap.Int("id", id))
			render.NotFound(w, r, msg)
		default:
			l.Error("could-not-delete-toy", zap.Error(err), zap.Int("id", id))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	l.Info("toy deleted", zap.Int("id", id))
	render.NoContent(w)
}
