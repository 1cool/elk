// Code generated by entc, DO NOT EDIT.

package http

import (
	"net/http"
	"strconv"

	"github.com/go-chi/chi/v5"
	"github.com/go-playground/validator/v10"
	easyjson "github.com/mailru/easyjson"
	"github.com/masseelch/elk/internal/integration/pets/ent"
	"github.com/masseelch/elk/internal/integration/pets/ent/category"
	"github.com/masseelch/elk/internal/integration/pets/ent/owner"
	"github.com/masseelch/elk/internal/integration/pets/ent/pet"
	"github.com/masseelch/render"
	"go.uber.org/zap"
)

// Update updates a given ent.Category and saves the changes to the database.
func (h CategoryHandler) Update(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Update"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	// Get the post data.
	var d CategoryUpdateRequest

	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		render.BadRequest(w, r, "invalid json string")
		return
	}
	// Save the data.
	b := h.client.Category.UpdateOneID(id)
	if d.Name != nil {
		b.SetName(*d.Name)
	}
	if d.Pets != nil {
		b.ClearPets().AddPetIDs(d.Pets...)
	}
	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		switch err.(type) {
		case *ent.NotFoundError:
			l.Info("category not found", zap.Int("id", id), zap.Error(err))
			render.NotFound(w, r, "category not found")
		case *ent.NotSingularError:
			l.Error("duplicate entry for category", zap.Int("id", id), zap.Error(err))
			render.BadRequest(w, r, "duplicate category entry with id "+strconv.Itoa(e.ID))
		default:
			l.Error("error saving category", zap.Int("id", id), zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	// Reload entry.
	q := h.client.Category.Query().Where(category.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Int("id", e.ID), zap.Error(err))
			render.NotFound(w, r, msg)
		default:
			l.Error("error fetching category from db", zap.Int("id", e.ID), zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	l.Info("category rendered", zap.Int("id", e.ID))
	easyjson.MarshalToHTTPResponseWriter(NewCategoryUpdateResponse(e), w)
}

// Update updates a given ent.Owner and saves the changes to the database.
func (h OwnerHandler) Update(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Update"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	// Get the post data.
	var d OwnerUpdateRequest

	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		render.BadRequest(w, r, "invalid json string")
		return
	}
	// Save the data.
	b := h.client.Owner.UpdateOneID(id)
	if d.Name != nil {
		b.SetName(*d.Name)
	}
	if d.Age != nil {
		b.SetAge(*d.Age)
	}
	if d.Pets != nil {
		b.ClearPets().AddPetIDs(d.Pets...)
	}
	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		switch err.(type) {
		case *ent.NotFoundError:
			l.Info("owner not found", zap.Int("id", id), zap.Error(err))
			render.NotFound(w, r, "owner not found")
		case *ent.NotSingularError:
			l.Error("duplicate entry for owner", zap.Int("id", id), zap.Error(err))
			render.BadRequest(w, r, "duplicate owner entry with id "+strconv.Itoa(e.ID))
		default:
			l.Error("error saving owner", zap.Int("id", id), zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	// Reload entry.
	q := h.client.Owner.Query().Where(owner.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Int("id", e.ID), zap.Error(err))
			render.NotFound(w, r, msg)
		default:
			l.Error("error fetching owner from db", zap.Int("id", e.ID), zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	l.Info("owner rendered", zap.Int("id", e.ID))
	easyjson.MarshalToHTTPResponseWriter(NewOwnerUpdateResponse(e), w)
}

// Update updates a given ent.Pet and saves the changes to the database.
func (h PetHandler) Update(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Update"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	// Get the post data.
	var d PetUpdateRequest

	if err := easyjson.UnmarshalFromReader(r.Body, &d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		render.BadRequest(w, r, "invalid json string")
		return
	}
	// Validate the data.
	if err := h.validator.Struct(d); err != nil {
		if err, ok := err.(*validator.InvalidValidationError); ok {
			l.Error("error validating request data", zap.Error(err))
			render.InternalServerError(w, r, nil)
			return
		}
		l.Info("validation failed", zap.Error(err))
		render.BadRequest(w, r, err)
		return
	}
	// Save the data.
	b := h.client.Pet.UpdateOneID(id)
	if d.Name != nil {
		b.SetName(*d.Name)
	}
	if d.Age != nil {
		b.SetAge(*d.Age)
	}
	if d.Category != nil {
		b.ClearCategory().AddCategoryIDs(d.Category...)
	}
	if d.Owner != nil {
		b.SetOwnerID(*d.Owner)

	}
	if d.Friends != nil {
		b.ClearFriends().AddFriendIDs(d.Friends...)
	}
	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		switch err.(type) {
		case *ent.NotFoundError:
			l.Info("pet not found", zap.Int("id", id), zap.Error(err))
			render.NotFound(w, r, "pet not found")
		case *ent.NotSingularError:
			l.Error("duplicate entry for pet", zap.Int("id", id), zap.Error(err))
			render.BadRequest(w, r, "duplicate pet entry with id "+strconv.Itoa(e.ID))
		default:
			l.Error("error saving pet", zap.Int("id", id), zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	// Reload entry.
	q := h.client.Pet.Query().Where(pet.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Int("id", e.ID), zap.Error(err))
			render.NotFound(w, r, msg)
		default:
			l.Error("error fetching pet from db", zap.Int("id", e.ID), zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	l.Info("pet rendered", zap.Int("id", e.ID))
	easyjson.MarshalToHTTPResponseWriter(NewPetUpdateResponse(e), w)
}
