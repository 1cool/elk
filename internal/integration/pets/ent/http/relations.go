// Code generated by entc, DO NOT EDIT.

package http

import (
	"net/http"
	"strconv"
	"strings"

	"github.com/go-chi/chi/v5"
	"github.com/mailru/easyjson"
	"github.com/masseelch/elk/internal/integration/pets/ent"
	"github.com/masseelch/elk/internal/integration/pets/ent/category"
	"github.com/masseelch/elk/internal/integration/pets/ent/owner"
	"github.com/masseelch/elk/internal/integration/pets/ent/pet"
	"github.com/masseelch/render"
	"go.uber.org/zap"
)

// Pets fetches the ent.pets attached to the ent.Category
// identified by a given url-parameter from the database and renders it to the client.
func (h CategoryHandler) Pets(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Pets"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	// Create the query to fetch the pets attached to this category
	q := h.client.Category.Query().Where(category.ID(id)).QueryPets()
	// Eager load edges that are required on list operation.
	q.WithFriends(func(q *ent.PetQuery) {
		q.WithFriends(func(q *ent.PetQuery) {
			q.WithFriends()
		})
	})
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			render.BadRequest(w, r, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			render.BadRequest(w, r, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching pets from db", zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	l.Info("pets rendered", zap.Int("amount", len(es)))
	easyjson.MarshalToHTTPResponseWriter(NewPetListResponse(es), w)
}

// Pets fetches the ent.pets attached to the ent.Owner
// identified by a given url-parameter from the database and renders it to the client.
func (h OwnerHandler) Pets(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Pets"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	// Create the query to fetch the pets attached to this owner
	q := h.client.Owner.Query().Where(owner.ID(id)).QueryPets()
	// Eager load edges that are required on list operation.
	q.WithFriends(func(q *ent.PetQuery) {
		q.WithFriends(func(q *ent.PetQuery) {
			q.WithFriends()
		})
	})
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			render.BadRequest(w, r, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			render.BadRequest(w, r, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching pets from db", zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	l.Info("pets rendered", zap.Int("amount", len(es)))
	easyjson.MarshalToHTTPResponseWriter(NewPetListResponse(es), w)
}

// Category fetches the ent.category attached to the ent.Pet
// identified by a given url-parameter from the database and renders it to the client.
func (h PetHandler) Category(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Category"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	// Create the query to fetch the category attached to this pet
	q := h.client.Pet.Query().Where(pet.ID(id)).QueryCategory()
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			render.BadRequest(w, r, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			render.BadRequest(w, r, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching categories from db", zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	l.Info("categories rendered", zap.Int("amount", len(es)))
	easyjson.MarshalToHTTPResponseWriter(NewCategoryListResponse(es), w)
}

// Owner fetches the ent.owner attached to the ent.Pet
// identified by a given url-parameter from the database and renders it to the client.
func (h PetHandler) Owner(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Owner"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	// Create the query to fetch the owner attached to this pet
	q := h.client.Pet.Query().Where(pet.ID(id)).QueryOwner()
	e, err := q.Only(r.Context())
	if err != nil {
		switch {
		case ent.IsNotFound(err):
			msg := stripEntError(err)
			l.Info(msg, zap.Int("id", id), zap.Error(err))
			render.NotFound(w, r, strings.TrimPrefix(err.Error(), "ent: "))
		case ent.IsNotSingular(err):
			msg := stripEntError(err)
			l.Error(msg, zap.Int("id", id), zap.Error(err))
			render.BadRequest(w, r, strings.TrimPrefix(err.Error(), "ent: "))
		default:
			l.Error("error fetching owner from db", zap.Int("pet.id", id), zap.Error(err))
			render.InternalServerError(w, r, nil)
		}
		return
	}
	l.Info("owner rendered", zap.Int("id", e.ID))
	easyjson.MarshalToHTTPResponseWriter(NewOwnerReadResponse(e), w)
}

// Friends fetches the ent.friends attached to the ent.Pet
// identified by a given url-parameter from the database and renders it to the client.
func (h PetHandler) Friends(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Friends"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter", zap.String("id", chi.URLParam(r, "id")), zap.Error(err))
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	// Create the query to fetch the friends attached to this pet
	q := h.client.Pet.Query().Where(pet.ID(id)).QueryFriends()
	// Eager load edges that are required on list operation.
	q.WithFriends(func(q *ent.PetQuery) {
		q.WithFriends(func(q *ent.PetQuery) {
			q.WithFriends()
		})
	})
	page := 1
	if d := r.URL.Query().Get("page"); d != "" {
		page, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'page'", zap.String("page", d), zap.Error(err))
			render.BadRequest(w, r, "page must be an integer greater zero")
			return
		}
	}
	itemsPerPage := 30
	if d := r.URL.Query().Get("itemsPerPage"); d != "" {
		itemsPerPage, err = strconv.Atoi(d)
		if err != nil {
			l.Info("error parsing query parameter 'itemsPerPage'", zap.String("itemsPerPage", d), zap.Error(err))
			render.BadRequest(w, r, "itemsPerPage must be an integer greater zero")
			return
		}
	}
	es, err := q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage).All(r.Context())
	if err != nil {
		l.Error("error fetching pets from db", zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	l.Info("pets rendered", zap.Int("amount", len(es)))
	easyjson.MarshalToHTTPResponseWriter(NewPetListResponse(es), w)
}
