// Code generated by entc, DO NOT EDIT.

package http

import (
	"net/http"
	"strconv"

	"github.com/go-chi/chi"
	"github.com/liip/sheriff"
	"github.com/masseelch/elk/internal/integration/petstore/ent"
	"github.com/masseelch/elk/internal/integration/petstore/ent/category"
	"github.com/masseelch/elk/internal/integration/petstore/ent/owner"
	"github.com/masseelch/elk/internal/integration/petstore/ent/pet"
	"github.com/masseelch/render"
	"go.uber.org/zap"
)

// Read fetches the Category model identified by a given url-parameter from the
// database and returns it to the client.
func (h *CategoryHandler) Read(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Read"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter",
			zap.String("id", chi.URLParam(r, "id")),
			zap.Error(err),
		)
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	// Create the query to fetch the Category
	q := h.client.Category.Query().Where(category.ID(id))
	e, err := q.Only(r.Context())
	if err != nil {
		switch err.(type) {
		case *ent.NotFoundError:
			l.Debug("category not found",
				zap.Int("id", id),
				zap.Error(err),
			)
			render.NotFound(w, r, "category not found")
			return
		case *ent.NotSingularError:
			l.Debug("duplicate entry for category",
				zap.Int("id", id),
				zap.Error(err),
			)
			render.BadRequest(w, r, "duplicate category entry with id "+strconv.Itoa(id))
			return
		default:
			l.Error("error fetching category from db",
				zap.Int("id", id),
				zap.Error(err),
			)
			render.InternalServerError(w, r, nil)
			return
		}
	}
	d, err := sheriff.Marshal(&sheriff.Options{
		IncludeEmptyTag: true,
		Groups:          []string{"category"},
	}, e)
	if err != nil {
		l.Error("serialization error",
			zap.Int("id", id),
			zap.Error(err),
		)
		render.InternalServerError(w, r, nil)
		return
	}
	l.Info("category rendered", zap.Int("id", id))
	render.OK(w, r, d)
}

// Read fetches the Owner model identified by a given url-parameter from the
// database and returns it to the client.
func (h *OwnerHandler) Read(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Read"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter",
			zap.String("id", chi.URLParam(r, "id")),
			zap.Error(err),
		)
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	// Create the query to fetch the Owner
	q := h.client.Owner.Query().Where(owner.ID(id))
	e, err := q.Only(r.Context())
	if err != nil {
		switch err.(type) {
		case *ent.NotFoundError:
			l.Debug("owner not found",
				zap.Int("id", id),
				zap.Error(err),
			)
			render.NotFound(w, r, "owner not found")
			return
		case *ent.NotSingularError:
			l.Debug("duplicate entry for owner",
				zap.Int("id", id),
				zap.Error(err),
			)
			render.BadRequest(w, r, "duplicate owner entry with id "+strconv.Itoa(id))
			return
		default:
			l.Error("error fetching owner from db",
				zap.Int("id", id),
				zap.Error(err),
			)
			render.InternalServerError(w, r, nil)
			return
		}
	}
	d, err := sheriff.Marshal(&sheriff.Options{
		IncludeEmptyTag: true,
		Groups:          []string{"owner"},
	}, e)
	if err != nil {
		l.Error("serialization error",
			zap.Int("id", id),
			zap.Error(err),
		)
		render.InternalServerError(w, r, nil)
		return
	}
	l.Info("owner rendered", zap.Int("id", id))
	render.OK(w, r, d)
}

// Read fetches the Pet model identified by a given url-parameter from the
// database and returns it to the client.
func (h *PetHandler) Read(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Read"))
	// ID is URL parameter.
	id, err := strconv.Atoi(chi.URLParam(r, "id"))
	if err != nil {
		l.Error("error getting id from url parameter",
			zap.String("id", chi.URLParam(r, "id")),
			zap.Error(err),
		)
		render.BadRequest(w, r, "id must be an integer greater zero")
		return
	}
	// Create the query to fetch the Pet
	q := h.client.Pet.Query().Where(pet.ID(id))
	// Eager load edges that are required on read operation.
	q.WithOwner(func(q_ *ent.OwnerQuery) {
		q_.WithFriends(func(q__ *ent.OwnerQuery) {
			q__.WithFriends(func(q___ *ent.OwnerQuery) {
				q___.WithFriends()
			})
		})
	})
	e, err := q.Only(r.Context())
	if err != nil {
		switch err.(type) {
		case *ent.NotFoundError:
			l.Debug("pet not found",
				zap.Int("id", id),
				zap.Error(err),
			)
			render.NotFound(w, r, "pet not found")
			return
		case *ent.NotSingularError:
			l.Debug("duplicate entry for pet",
				zap.Int("id", id),
				zap.Error(err),
			)
			render.BadRequest(w, r, "duplicate pet entry with id "+strconv.Itoa(id))
			return
		default:
			l.Error("error fetching pet from db",
				zap.Int("id", id),
				zap.Error(err),
			)
			render.InternalServerError(w, r, nil)
			return
		}
	}
	d, err := sheriff.Marshal(&sheriff.Options{
		IncludeEmptyTag: true,
		Groups:          []string{"pet"},
	}, e)
	if err != nil {
		l.Error("serialization error",
			zap.Int("id", id),
			zap.Error(err),
		)
		render.InternalServerError(w, r, nil)
		return
	}
	l.Info("pet rendered", zap.Int("id", id))
	render.OK(w, r, d)
}
