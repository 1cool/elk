// Code generated by entc, DO NOT EDIT.

package http

import (
	"encoding/json"
	"net/http"
	"strconv"

	"github.com/go-playground/validator/v10"
	"github.com/liip/sheriff"
	"github.com/masseelch/elk/internal/integration/petstore/ent"
	"github.com/masseelch/elk/internal/integration/petstore/ent/category"
	"github.com/masseelch/elk/internal/integration/petstore/ent/owner"
	"github.com/masseelch/elk/internal/integration/petstore/ent/pet"
	"github.com/masseelch/render"
	"go.uber.org/zap"
)

// Payload of a Category create request.
type CategoryCreateRequest struct {
	Name *string `json:"name"`
	Pets []int   `json:"pets"`
}

// Create creates a new Category and stores it in the database.
func (h CategoryHandler) Create(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Create"))
	// Get the post data.
	var d CategoryCreateRequest
	if err := json.NewDecoder(r.Body).Decode(&d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		render.BadRequest(w, r, "invalid json string")
		return
	}
	// Validate the data.
	if err := h.validator.Struct(d); err != nil {
		if err, ok := err.(*validator.InvalidValidationError); ok {
			l.Error("error validating request data", zap.Error(err))
			render.InternalServerError(w, r, nil)
			return
		}
		l.Info("validation failed", zap.Error(err))
		render.BadRequest(w, r, err)
		return
	}
	// Save the data.
	b := h.client.Category.Create()
	// TODO: what about slice fields that have custom marshallers?
	if d.Name != nil {
		b.SetName(*d.Name)
	}
	if d.Pets != nil {
		b.AddPetIDs(d.Pets...)
	}
	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		l.Error("error saving category", zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	// Reload entry.
	q := h.client.Category.Query().Where(category.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch err.(type) {
		case *ent.NotFoundError:
			l.Info("category not found", zap.Int("id", e.ID), zap.Error(err))
			render.NotFound(w, r, "category not found")
			return
		case *ent.NotSingularError:
			l.Error("duplicate entry for category", zap.Int("id", e.ID), zap.Error(err))
			render.BadRequest(w, r, "duplicate category entry with id "+strconv.Itoa(e.ID))
			return
		default:
			l.Error("error fetching category from db", zap.Int("id", e.ID), zap.Error(err))
			render.InternalServerError(w, r, nil)
			return
		}
	}
	j, err := sheriff.Marshal(&sheriff.Options{
		IncludeEmptyTag: true,
		Groups:          []string{"category"},
	}, e)
	if err != nil {
		l.Error("serialization error", zap.Int("id", e.ID), zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	l.Info("category rendered", zap.Int("id", e.ID))
	render.OK(w, r, j)
}

// Payload of a Owner create request.
type OwnerCreateRequest struct {
	Name    *string `json:"name"`
	Age     *int    `json:"age"`
	Pets    []int   `json:"pets"`
	Friends []int   `json:"friends"`
}

// Create creates a new Owner and stores it in the database.
func (h OwnerHandler) Create(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Create"))
	// Get the post data.
	var d OwnerCreateRequest
	if err := json.NewDecoder(r.Body).Decode(&d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		render.BadRequest(w, r, "invalid json string")
		return
	}
	// Validate the data.
	if err := h.validator.Struct(d); err != nil {
		if err, ok := err.(*validator.InvalidValidationError); ok {
			l.Error("error validating request data", zap.Error(err))
			render.InternalServerError(w, r, nil)
			return
		}
		l.Info("validation failed", zap.Error(err))
		render.BadRequest(w, r, err)
		return
	}
	// Save the data.
	b := h.client.Owner.Create()
	// TODO: what about slice fields that have custom marshallers?
	if d.Name != nil {
		b.SetName(*d.Name)
	}
	if d.Age != nil {
		b.SetAge(*d.Age)
	}
	if d.Pets != nil {
		b.AddPetIDs(d.Pets...)
	}
	if d.Friends != nil {
		b.AddFriendIDs(d.Friends...)
	}
	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		l.Error("error saving owner", zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	// Reload entry.
	q := h.client.Owner.Query().Where(owner.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch err.(type) {
		case *ent.NotFoundError:
			l.Info("owner not found", zap.Int("id", e.ID), zap.Error(err))
			render.NotFound(w, r, "owner not found")
			return
		case *ent.NotSingularError:
			l.Error("duplicate entry for owner", zap.Int("id", e.ID), zap.Error(err))
			render.BadRequest(w, r, "duplicate owner entry with id "+strconv.Itoa(e.ID))
			return
		default:
			l.Error("error fetching owner from db", zap.Int("id", e.ID), zap.Error(err))
			render.InternalServerError(w, r, nil)
			return
		}
	}
	j, err := sheriff.Marshal(&sheriff.Options{
		IncludeEmptyTag: true,
		Groups:          []string{"owner"},
	}, e)
	if err != nil {
		l.Error("serialization error", zap.Int("id", e.ID), zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	l.Info("owner rendered", zap.Int("id", e.ID))
	render.OK(w, r, j)
}

// Payload of a Pet create request.
type PetCreateRequest struct {
	Name     *string `json:"name" validate:"required"`
	Age      *int    `json:"age" validate:"required,gt=0"`
	Owner    *int    `json:"owner"`
	Category []int   `json:"category"`
}

// Create creates a new Pet and stores it in the database.
func (h PetHandler) Create(w http.ResponseWriter, r *http.Request) {
	l := h.log.With(zap.String("method", "Create"))
	// Get the post data.
	var d PetCreateRequest
	if err := json.NewDecoder(r.Body).Decode(&d); err != nil {
		l.Error("error decoding json", zap.Error(err))
		render.BadRequest(w, r, "invalid json string")
		return
	}
	// Validate the data.
	if err := h.validator.Struct(d); err != nil {
		if err, ok := err.(*validator.InvalidValidationError); ok {
			l.Error("error validating request data", zap.Error(err))
			render.InternalServerError(w, r, nil)
			return
		}
		l.Info("validation failed", zap.Error(err))
		render.BadRequest(w, r, err)
		return
	}
	// Save the data.
	b := h.client.Pet.Create()
	// TODO: what about slice fields that have custom marshallers?
	if d.Name != nil {
		b.SetName(*d.Name)
	}
	if d.Age != nil {
		b.SetAge(*d.Age)
	}
	if d.Owner != nil {
		b.SetOwnerID(*d.Owner)

	}
	if d.Category != nil {
		b.AddCategoryIDs(d.Category...)
	}
	// Store in database.
	e, err := b.Save(r.Context())
	if err != nil {
		l.Error("error saving pet", zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	// Reload entry.
	q := h.client.Pet.Query().Where(pet.ID(e.ID))
	e, err = q.Only(r.Context())
	if err != nil {
		switch err.(type) {
		case *ent.NotFoundError:
			l.Info("pet not found", zap.Int("id", e.ID), zap.Error(err))
			render.NotFound(w, r, "pet not found")
			return
		case *ent.NotSingularError:
			l.Error("duplicate entry for pet", zap.Int("id", e.ID), zap.Error(err))
			render.BadRequest(w, r, "duplicate pet entry with id "+strconv.Itoa(e.ID))
			return
		default:
			l.Error("error fetching pet from db", zap.Int("id", e.ID), zap.Error(err))
			render.InternalServerError(w, r, nil)
			return
		}
	}
	j, err := sheriff.Marshal(&sheriff.Options{
		IncludeEmptyTag: true,
		Groups:          []string{"pet"},
	}, e)
	if err != nil {
		l.Error("serialization error", zap.Int("id", e.ID), zap.Error(err))
		render.InternalServerError(w, r, nil)
		return
	}
	l.Info("pet rendered", zap.Int("id", e.ID))
	render.OK(w, r, j)
}
